
ECSE444_Lab1_KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08006f60  08006f60  00016f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e0  080074e0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080074e0  080074e0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074e0  080074e0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080074e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001e8  080076d0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080076d0  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000aea5  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000008a  00000000  00000000  0002b175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000b3bb  00000000  00000000  0002b1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002654  00000000  00000000  000365ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000900  00000000  00000000  00038c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e493c  00000000  00000000  00039510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000005ef  00000000  00000000  0011de4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00024226  00000000  00000000  0011e43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000033a4  00000000  00000000  00142664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000210e  00000000  00000000  00145a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000078  00000000  00000000  00147b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f44 	.word	0x08006f44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08006f44 	.word	0x08006f44

080001d0 <updateKarmanFilter_ASM>:
.global updateKarmanFilter_ASM

updateKarmanFilter_ASM:

//load struct
VLDR.f32 S1, [R0, #0] //q
 80001d0:	edd0 0a00 	vldr	s1, [r0]
VLDR.f32 S2, [R0, #4] //p
 80001d4:	ed90 1a01 	vldr	s2, [r0, #4]
VLDR.f32 S3, [R0, #8] //r
 80001d8:	edd0 1a02 	vldr	s3, [r0, #8]
VLDR.f32 S4, [R0, #12] //k
 80001dc:	ed90 2a03 	vldr	s4, [r0, #12]
VLDR.f32 S5, [R0, #16] //x
 80001e0:	edd0 2a04 	vldr	s5, [r0, #16]

//update
VADD.f32 S2, S2, S1 //p = p+q
 80001e4:	ee31 1a20 	vadd.f32	s2, s2, s1
BVS Error
 80001e8:	d62f      	bvs.n	800024a <Error>
VADD.f32 S6, S2, S3 //temp = p+r
 80001ea:	ee31 3a21 	vadd.f32	s6, s2, s3
VMRS APSR_nzcv, FPSCR
 80001ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
BVS Error
 80001f2:	d62a      	bvs.n	800024a <Error>
VCMP.f32 S6, #0
 80001f4:	eeb5 3a40 	vcmp.f32	s6, #0.0
VMRS APSR_nzcv, FPSCR
 80001f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
BEQ Error
 80001fc:	d025      	beq.n	800024a <Error>
VDIV.f32 S4, S2, S6 //k = p/(p+r)
 80001fe:	ee81 2a03 	vdiv.f32	s4, s2, s6
VSUB.f32 S0, S0, S5 //measurement-x
 8000202:	ee30 0a62 	vsub.f32	s0, s0, s5
VMRS APSR_nzcv, FPSCR
 8000206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
BVS Error
 800020a:	d61e      	bvs.n	800024a <Error>
VMUL.f32 S6, S4, S0 //temp = k(m-x)
 800020c:	ee22 3a00 	vmul.f32	s6, s4, s0
VMRS APSR_nzcv, FPSCR
 8000210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
BVS Error
 8000214:	d619      	bvs.n	800024a <Error>
VADD.f32 S5, S5, S6 //x = x+temp
 8000216:	ee72 2a83 	vadd.f32	s5, s5, s6
VMRS APSR_nzcv, FPSCR
 800021a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
BVS Error
 800021e:	d614      	bvs.n	800024a <Error>
VMOV S6, #1
 8000220:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
VSUB.f32 S6, S6, S4 //temp = 1-k//no err possible
 8000224:	ee33 3a42 	vsub.f32	s6, s6, s4
VMUL.f32 S2, S2, S6 //p = p(1-k)
 8000228:	ee21 1a03 	vmul.f32	s2, s2, s6
VMRS APSR_nzcv, FPSCR
 800022c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
BVS Error //overflow
 8000230:	d60b      	bvs.n	800024a <Error>


//store
VSTR.f32 S1, [R0, #0]
 8000232:	edc0 0a00 	vstr	s1, [r0]
VSTR.f32 S2, [R0, #4]
 8000236:	ed80 1a01 	vstr	s2, [r0, #4]
VSTR.f32 S3, [R0, #8]
 800023a:	edc0 1a02 	vstr	s3, [r0, #8]
VSTR.f32 S4, [R0, #12]
 800023e:	ed80 2a03 	vstr	s4, [r0, #12]
VSTR.f32 S5, [R0, #16]
 8000242:	edc0 2a04 	vstr	s5, [r0, #16]

MOV R0, #0 //return 0 if no err
 8000246:	2000      	movs	r0, #0
MOV PC, LR
 8000248:	46f7      	mov	pc, lr

0800024a <Error>:

Error:
MOV R0, #1 //return -1 if error
 800024a:	2001      	movs	r0, #1
MOV PC, LR
 800024c:	46f7      	mov	pc, lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__aeabi_dmul>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800067e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000686:	bf1d      	ittte	ne
 8000688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800068c:	ea94 0f0c 	teqne	r4, ip
 8000690:	ea95 0f0c 	teqne	r5, ip
 8000694:	f000 f8de 	bleq	8000854 <__aeabi_dmul+0x1dc>
 8000698:	442c      	add	r4, r5
 800069a:	ea81 0603 	eor.w	r6, r1, r3
 800069e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006aa:	bf18      	it	ne
 80006ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b8:	d038      	beq.n	800072c <__aeabi_dmul+0xb4>
 80006ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ce:	f04f 0600 	mov.w	r6, #0
 80006d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006d6:	f09c 0f00 	teq	ip, #0
 80006da:	bf18      	it	ne
 80006dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ec:	d204      	bcs.n	80006f8 <__aeabi_dmul+0x80>
 80006ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006f2:	416d      	adcs	r5, r5
 80006f4:	eb46 0606 	adc.w	r6, r6, r6
 80006f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000700:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000704:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000708:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800070c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000710:	bf88      	it	hi
 8000712:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000716:	d81e      	bhi.n	8000756 <__aeabi_dmul+0xde>
 8000718:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800071c:	bf08      	it	eq
 800071e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000722:	f150 0000 	adcs.w	r0, r0, #0
 8000726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000730:	ea46 0101 	orr.w	r1, r6, r1
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000740:	bfc2      	ittt	gt
 8000742:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000746:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800074a:	bd70      	popgt	{r4, r5, r6, pc}
 800074c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000750:	f04f 0e00 	mov.w	lr, #0
 8000754:	3c01      	subs	r4, #1
 8000756:	f300 80ab 	bgt.w	80008b0 <__aeabi_dmul+0x238>
 800075a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800075e:	bfde      	ittt	le
 8000760:	2000      	movle	r0, #0
 8000762:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000766:	bd70      	pople	{r4, r5, r6, pc}
 8000768:	f1c4 0400 	rsb	r4, r4, #0
 800076c:	3c20      	subs	r4, #32
 800076e:	da35      	bge.n	80007dc <__aeabi_dmul+0x164>
 8000770:	340c      	adds	r4, #12
 8000772:	dc1b      	bgt.n	80007ac <__aeabi_dmul+0x134>
 8000774:	f104 0414 	add.w	r4, r4, #20
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f305 	lsl.w	r3, r0, r5
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	fa21 f604 	lsr.w	r6, r1, r4
 800079c:	eb42 0106 	adc.w	r1, r2, r6
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 040c 	rsb	r4, r4, #12
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f304 	lsl.w	r3, r0, r4
 80007b8:	fa20 f005 	lsr.w	r0, r0, r5
 80007bc:	fa01 f204 	lsl.w	r2, r1, r4
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 0520 	rsb	r5, r4, #32
 80007e0:	fa00 f205 	lsl.w	r2, r0, r5
 80007e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ec:	fa01 f205 	lsl.w	r2, r1, r5
 80007f0:	ea43 0302 	orr.w	r3, r3, r2
 80007f4:	fa21 f004 	lsr.w	r0, r1, r4
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000800:	ea20 0002 	bic.w	r0, r0, r2
 8000804:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f094 0f00 	teq	r4, #0
 8000818:	d10f      	bne.n	800083a <__aeabi_dmul+0x1c2>
 800081a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800081e:	0040      	lsls	r0, r0, #1
 8000820:	eb41 0101 	adc.w	r1, r1, r1
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3c01      	subeq	r4, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1a6>
 800082e:	ea41 0106 	orr.w	r1, r1, r6
 8000832:	f095 0f00 	teq	r5, #0
 8000836:	bf18      	it	ne
 8000838:	4770      	bxne	lr
 800083a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	eb43 0303 	adc.w	r3, r3, r3
 8000844:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000848:	bf08      	it	eq
 800084a:	3d01      	subeq	r5, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1c6>
 800084e:	ea43 0306 	orr.w	r3, r3, r6
 8000852:	4770      	bx	lr
 8000854:	ea94 0f0c 	teq	r4, ip
 8000858:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800085c:	bf18      	it	ne
 800085e:	ea95 0f0c 	teqne	r5, ip
 8000862:	d00c      	beq.n	800087e <__aeabi_dmul+0x206>
 8000864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000868:	bf18      	it	ne
 800086a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086e:	d1d1      	bne.n	8000814 <__aeabi_dmul+0x19c>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000882:	bf06      	itte	eq
 8000884:	4610      	moveq	r0, r2
 8000886:	4619      	moveq	r1, r3
 8000888:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088c:	d019      	beq.n	80008c2 <__aeabi_dmul+0x24a>
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	d102      	bne.n	800089a <__aeabi_dmul+0x222>
 8000894:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000898:	d113      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 800089a:	ea95 0f0c 	teq	r5, ip
 800089e:	d105      	bne.n	80008ac <__aeabi_dmul+0x234>
 80008a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a4:	bf1c      	itt	ne
 80008a6:	4610      	movne	r0, r2
 80008a8:	4619      	movne	r1, r3
 80008aa:	d10a      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 80008ac:	ea81 0103 	eor.w	r1, r1, r3
 80008b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ca:	bd70      	pop	{r4, r5, r6, pc}

080008cc <__aeabi_ddiv>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008da:	bf1d      	ittte	ne
 80008dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e0:	ea94 0f0c 	teqne	r4, ip
 80008e4:	ea95 0f0c 	teqne	r5, ip
 80008e8:	f000 f8a7 	bleq	8000a3a <__aeabi_ddiv+0x16e>
 80008ec:	eba4 0405 	sub.w	r4, r4, r5
 80008f0:	ea81 0e03 	eor.w	lr, r1, r3
 80008f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008fc:	f000 8088 	beq.w	8000a10 <__aeabi_ddiv+0x144>
 8000900:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000904:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000908:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800090c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000910:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000914:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000918:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800091c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000920:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000924:	429d      	cmp	r5, r3
 8000926:	bf08      	it	eq
 8000928:	4296      	cmpeq	r6, r2
 800092a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800092e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000932:	d202      	bcs.n	800093a <__aeabi_ddiv+0x6e>
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	1ab6      	subs	r6, r6, r2
 800093c:	eb65 0503 	sbc.w	r5, r5, r3
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800094a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ac:	d018      	beq.n	80009e0 <__aeabi_ddiv+0x114>
 80009ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ca:	d1c0      	bne.n	800094e <__aeabi_ddiv+0x82>
 80009cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d0:	d10b      	bne.n	80009ea <__aeabi_ddiv+0x11e>
 80009d2:	ea41 0100 	orr.w	r1, r1, r0
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009de:	e7b6      	b.n	800094e <__aeabi_ddiv+0x82>
 80009e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e4:	bf04      	itt	eq
 80009e6:	4301      	orreq	r1, r0
 80009e8:	2000      	moveq	r0, #0
 80009ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ee:	bf88      	it	hi
 80009f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009f4:	f63f aeaf 	bhi.w	8000756 <__aeabi_dmul+0xde>
 80009f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009fc:	bf04      	itt	eq
 80009fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a06:	f150 0000 	adcs.w	r0, r0, #0
 8000a0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a1c:	bfc2      	ittt	gt
 8000a1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	popgt	{r4, r5, r6, pc}
 8000a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2c:	f04f 0e00 	mov.w	lr, #0
 8000a30:	3c01      	subs	r4, #1
 8000a32:	e690      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a34:	ea45 0e06 	orr.w	lr, r5, r6
 8000a38:	e68d      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	bf08      	it	eq
 8000a44:	ea95 0f0c 	teqeq	r5, ip
 8000a48:	f43f af3b 	beq.w	80008c2 <__aeabi_dmul+0x24a>
 8000a4c:	ea94 0f0c 	teq	r4, ip
 8000a50:	d10a      	bne.n	8000a68 <__aeabi_ddiv+0x19c>
 8000a52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a56:	f47f af34 	bne.w	80008c2 <__aeabi_dmul+0x24a>
 8000a5a:	ea95 0f0c 	teq	r5, ip
 8000a5e:	f47f af25 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a62:	4610      	mov	r0, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	e72c      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a68:	ea95 0f0c 	teq	r5, ip
 8000a6c:	d106      	bne.n	8000a7c <__aeabi_ddiv+0x1b0>
 8000a6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a72:	f43f aefd 	beq.w	8000870 <__aeabi_dmul+0x1f8>
 8000a76:	4610      	mov	r0, r2
 8000a78:	4619      	mov	r1, r3
 8000a7a:	e722      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a86:	f47f aec5 	bne.w	8000814 <__aeabi_dmul+0x19c>
 8000a8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a8e:	f47f af0d 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a96:	f47f aeeb 	bne.w	8000870 <__aeabi_dmul+0x1f8>
 8000a9a:	e712      	b.n	80008c2 <__aeabi_dmul+0x24a>

08000a9c <__gedf2>:
 8000a9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000aa0:	e006      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__ledf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	e002      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__cmpdf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ac6:	d01b      	beq.n	8000b00 <__cmpdf2+0x54>
 8000ac8:	b001      	add	sp, #4
 8000aca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ace:	bf0c      	ite	eq
 8000ad0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad4:	ea91 0f03 	teqne	r1, r3
 8000ad8:	bf02      	ittt	eq
 8000ada:	ea90 0f02 	teqeq	r0, r2
 8000ade:	2000      	moveq	r0, #0
 8000ae0:	4770      	bxeq	lr
 8000ae2:	f110 0f00 	cmn.w	r0, #0
 8000ae6:	ea91 0f03 	teq	r1, r3
 8000aea:	bf58      	it	pl
 8000aec:	4299      	cmppl	r1, r3
 8000aee:	bf08      	it	eq
 8000af0:	4290      	cmpeq	r0, r2
 8000af2:	bf2c      	ite	cs
 8000af4:	17d8      	asrcs	r0, r3, #31
 8000af6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afa:	f040 0001 	orr.w	r0, r0, #1
 8000afe:	4770      	bx	lr
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__cmpdf2+0x64>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d107      	bne.n	8000b20 <__cmpdf2+0x74>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d1d6      	bne.n	8000ac8 <__cmpdf2+0x1c>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d0d3      	beq.n	8000ac8 <__cmpdf2+0x1c>
 8000b20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdrcmple>:
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4662      	mov	r2, ip
 8000b2e:	468c      	mov	ip, r1
 8000b30:	4619      	mov	r1, r3
 8000b32:	4663      	mov	r3, ip
 8000b34:	e000      	b.n	8000b38 <__aeabi_cdcmpeq>
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdcmpeq>:
 8000b38:	b501      	push	{r0, lr}
 8000b3a:	f7ff ffb7 	bl	8000aac <__cmpdf2>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	bf48      	it	mi
 8000b42:	f110 0f00 	cmnmi.w	r0, #0
 8000b46:	bd01      	pop	{r0, pc}

08000b48 <__aeabi_dcmpeq>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff fff4 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b50:	bf0c      	ite	eq
 8000b52:	2001      	moveq	r0, #1
 8000b54:	2000      	movne	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmplt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffea 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmple>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffe0 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b78:	bf94      	ite	ls
 8000b7a:	2001      	movls	r0, #1
 8000b7c:	2000      	movhi	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpge>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffce 	bl	8000b28 <__aeabi_cdrcmple>
 8000b8c:	bf94      	ite	ls
 8000b8e:	2001      	movls	r0, #1
 8000b90:	2000      	movhi	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_dcmpgt>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffc4 	bl	8000b28 <__aeabi_cdrcmple>
 8000ba0:	bf34      	ite	cc
 8000ba2:	2001      	movcc	r0, #1
 8000ba4:	2000      	movcs	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmpun>:
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x10>
 8000bb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bba:	d10a      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__aeabi_dcmpun+0x20>
 8000bc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0001 	mov.w	r0, #1
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2iz>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d215      	bcs.n	8000c0e <__aeabi_d2iz+0x36>
 8000be2:	d511      	bpl.n	8000c08 <__aeabi_d2iz+0x30>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d912      	bls.n	8000c14 <__aeabi_d2iz+0x3c>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d105      	bne.n	8000c20 <__aeabi_d2iz+0x48>
 8000c14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	bf08      	it	eq
 8000c1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <KalmanFilter>:
extern int updateKarmanFilter_ASM(Karman *kr, float m);
extern int updateKarmanFilter_c(Karman *kr, float m);
extern int updateKarmanFilter_CMSIS(Karman *kr, float m);
//extern int Karman_init(Karman* kr);

void KalmanFilter(float *InputArray, float *OutputArray, Karman *kr, int len) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < len; i++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e019      	b.n	8000d10 <KalmanFilter+0x48>
		if (updateKarmanFilter_ASM(kr, *(InputArray + i))) {
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fa6f 	bl	80001d0 <updateKarmanFilter_ASM>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <KalmanFilter+0x34>
			Error_Handler();
 8000cf8:	f000 fa68 	bl	80011cc <Error_Handler>
		}
		;
		//updateKarmanFilter_c(kr, InputArray[i]);
		//updateKarmanFilter_CMSIS(kr, InputArray[i]);
		*(OutputArray + i) = kr->x;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	4413      	add	r3, r2
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	6912      	ldr	r2, [r2, #16]
 8000d08:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbe1      	blt.n	8000cdc <KalmanFilter+0x14>
	}
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d28:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d2c:	af00      	add	r7, sp, #0
int main(void)
 8000d2e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000d32:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f000 fe98 	bl	8001a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 f98b 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f000 f9f1 	bl	8001124 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int clk = HAL_RCC_GetSysClockFreq();
 8000d42:	f001 ff3f 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		}

	}

	Karman kr;
	kr.q = 0.1;
 8000d4c:	4baa      	ldr	r3, [pc, #680]	; (8000ff8 <main+0x2d4>)
 8000d4e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	kr.p = 0.1;
 8000d52:	4ba9      	ldr	r3, [pc, #676]	; (8000ff8 <main+0x2d4>)
 8000d54:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	kr.r = 0.1;
 8000d58:	4ba7      	ldr	r3, [pc, #668]	; (8000ff8 <main+0x2d4>)
 8000d5a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	kr.k = 0.0;
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	kr.x = 5.0;
 8000d66:	4ba5      	ldr	r3, [pc, #660]	; (8000ffc <main+0x2d8>)
 8000d68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

	float inputArray[] = { 10.4915760032, 10.1349974709, 9.53992591829,
 8000d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000d74:	4aa2      	ldr	r2, [pc, #648]	; (8001000 <main+0x2dc>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	4611      	mov	r1, r2
 8000d7a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f003 fa87 	bl	8004292 <memcpy>
			10.2279703226, 10.3535284606, 10.2437410625, 10.3851531317,
			9.90784804928, 9.98208344925, 9.52778805729, 9.69323876912,
			9.92987312087, 9.73938925207, 9.60543743477, 9.79600805462,
			10.4950988486, 10.2814361401, 9.7985283333, 9.6287888922,
			10.4491538991, 9.5799256668 };
	int len = sizeof(inputArray) / sizeof(float);
 8000d84:	2365      	movs	r3, #101	; 0x65
 8000d86:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	float outputArray[len];
 8000d8a:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000d8e:	1e4b      	subs	r3, r1, #1
 8000d90:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8000d94:	460a      	mov	r2, r1
 8000d96:	2300      	movs	r3, #0
 8000d98:	4614      	mov	r4, r2
 8000d9a:	461d      	mov	r5, r3
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	016b      	lsls	r3, r5, #5
 8000da6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000daa:	0162      	lsls	r2, r4, #5
 8000dac:	460a      	mov	r2, r1
 8000dae:	2300      	movs	r3, #0
 8000db0:	613a      	str	r2, [r7, #16]
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	0143      	lsls	r3, r0, #5
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000dca:	4620      	mov	r0, r4
 8000dcc:	0142      	lsls	r2, r0, #5
 8000dce:	460b      	mov	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	3307      	adds	r3, #7
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	ebad 0d03 	sub.w	sp, sp, r3
 8000ddc:	466b      	mov	r3, sp
 8000dde:	3303      	adds	r3, #3
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	float diffArray[len];
 8000de8:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000dec:	1e4b      	subs	r3, r1, #1
 8000dee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8000df2:	460a      	mov	r2, r1
 8000df4:	2300      	movs	r3, #0
 8000df6:	60ba      	str	r2, [r7, #8]
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000e06:	4628      	mov	r0, r5
 8000e08:	0143      	lsls	r3, r0, #5
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000e10:	4620      	mov	r0, r4
 8000e12:	0142      	lsls	r2, r0, #5
 8000e14:	460a      	mov	r2, r1
 8000e16:	2300      	movs	r3, #0
 8000e18:	603a      	str	r2, [r7, #0]
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000e28:	4628      	mov	r0, r5
 8000e2a:	0143      	lsls	r3, r0, #5
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000e32:	4620      	mov	r0, r4
 8000e34:	0142      	lsls	r2, r0, #5
 8000e36:	460b      	mov	r3, r1
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	3307      	adds	r3, #7
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	ebad 0d03 	sub.w	sp, sp, r3
 8000e44:	466b      	mov	r3, sp
 8000e46:	3303      	adds	r3, #3
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	float convArray[2 * len - 1];
 8000e50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	1e59      	subs	r1, r3, #1
 8000e58:	1e4b      	subs	r3, r1, #1
 8000e5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e5e:	460a      	mov	r2, r1
 8000e60:	2300      	movs	r3, #0
 8000e62:	4692      	mov	sl, r2
 8000e64:	469b      	mov	fp, r3
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000e72:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000e76:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000e7a:	460a      	mov	r2, r1
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	4690      	mov	r8, r2
 8000e80:	4699      	mov	r9, r3
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000e8e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000e92:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000e96:	460b      	mov	r3, r1
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	3307      	adds	r3, #7
 8000e9c:	08db      	lsrs	r3, r3, #3
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ea4:	466b      	mov	r3, sp
 8000ea6:	3303      	adds	r3, #3
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	float average, average_CMSIS, std, std_CMSIS, corr, corr_CMSIS;

	while (1) {
		ITM_Port32(31) = 1;
 8000eb0:	4b54      	ldr	r3, [pc, #336]	; (8001004 <main+0x2e0>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]

		KalmanFilter(inputArray, outputArray, &kr, len);
 8000eb6:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8000eba:	f107 001c 	add.w	r0, r7, #28
 8000ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ec2:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8000ec6:	f7ff feff 	bl	8000cc8 <KalmanFilter>
		ITM_Port32(31) = 2;
 8000eca:	4b4e      	ldr	r3, [pc, #312]	; (8001004 <main+0x2e0>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	601a      	str	r2, [r3, #0]

		calculateDiff(inputArray, outputArray, diffArray, len);
 8000ed0:	f107 001c 	add.w	r0, r7, #28
 8000ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ed8:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8000edc:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8000ee0:	f000 f979 	bl	80011d6 <calculateDiff>
		ITM_Port32(31) = 3;
 8000ee4:	4b47      	ldr	r3, [pc, #284]	; (8001004 <main+0x2e0>)
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	601a      	str	r2, [r3, #0]

		calculateDiff_CMSIS(inputArray, outputArray, diffArray, len);
 8000eea:	f107 001c 	add.w	r0, r7, #28
 8000eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ef2:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8000ef6:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8000efa:	f000 f998 	bl	800122e <calculateDiff_CMSIS>
		ITM_Port32(31) = 4;
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <main+0x2e0>)
 8000f00:	2204      	movs	r2, #4
 8000f02:	601a      	str	r2, [r3, #0]

		average = calculateAverage(diffArray, len);
 8000f04:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000f08:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8000f0c:	f000 f9a0 	bl	8001250 <calculateAverage>
 8000f10:	ed87 0a77 	vstr	s0, [r7, #476]	; 0x1dc
		ITM_Port32(31) = 5;
 8000f14:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <main+0x2e0>)
 8000f16:	2205      	movs	r2, #5
 8000f18:	601a      	str	r2, [r3, #0]

		average_CMSIS = calculateAverage_CMSIS(diffArray, len);
 8000f1a:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000f1e:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8000f22:	f000 f9c5 	bl	80012b0 <calculateAverage_CMSIS>
 8000f26:	ed87 0a76 	vstr	s0, [r7, #472]	; 0x1d8
		ITM_Port32(31) = 6;
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <main+0x2e0>)
 8000f2c:	2206      	movs	r2, #6
 8000f2e:	601a      	str	r2, [r3, #0]

		std = calculateStd(outputArray, len);
 8000f30:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000f34:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8000f38:	f000 f9ce 	bl	80012d8 <calculateStd>
 8000f3c:	ed87 0a75 	vstr	s0, [r7, #468]	; 0x1d4
		ITM_Port32(31) = 7;
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <main+0x2e0>)
 8000f42:	2207      	movs	r2, #7
 8000f44:	601a      	str	r2, [r3, #0]

		std_CMSIS = calculateStd_CMSIS(outputArray, len);
 8000f46:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000f4a:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8000f4e:	f000 fa2b 	bl	80013a8 <calculateStd_CMSIS>
 8000f52:	ed87 0a74 	vstr	s0, [r7, #464]	; 0x1d0
		ITM_Port32(31) = 8;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <main+0x2e0>)
 8000f58:	2208      	movs	r2, #8
 8000f5a:	601a      	str	r2, [r3, #0]

		calculateConv(inputArray, outputArray, convArray, len);
 8000f5c:	f107 001c 	add.w	r0, r7, #28
 8000f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f64:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8000f68:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8000f6c:	f000 fa30 	bl	80013d0 <calculateConv>
		ITM_Port32(31) = 9;
 8000f70:	4b24      	ldr	r3, [pc, #144]	; (8001004 <main+0x2e0>)
 8000f72:	2209      	movs	r2, #9
 8000f74:	601a      	str	r2, [r3, #0]

		calculateConv_CMSIS(inputArray, outputArray, convArray, len);
 8000f76:	f107 001c 	add.w	r0, r7, #28
 8000f7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f7e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8000f82:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8000f86:	f000 fa77 	bl	8001478 <calculateConv_CMSIS>
		ITM_Port32(31) = 10;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <main+0x2e0>)
 8000f8c:	220a      	movs	r2, #10
 8000f8e:	601a      	str	r2, [r3, #0]

		corr = calculateCorr(inputArray, outputArray, len);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8000f98:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fa7f 	bl	80014a0 <calculateCorr>
 8000fa2:	ed87 0a73 	vstr	s0, [r7, #460]	; 0x1cc
		ITM_Port32(31) = 11;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <main+0x2e0>)
 8000fa8:	220b      	movs	r2, #11
 8000faa:	601a      	str	r2, [r3, #0]

		corr_CMSIS = calculateCorr_CMSIS(inputArray, outputArray, len);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8000fb4:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fad4 	bl	8001566 <calculateCorr_CMSIS>
 8000fbe:	ed87 0a72 	vstr	s0, [r7, #456]	; 0x1c8
		ITM_Port32(31) = 12;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <main+0x2e0>)
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	601a      	str	r2, [r3, #0]

		print_csv_SWV(inputArray, len);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8000fd0:	4694      	mov	ip, r2
 8000fd2:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f816 	bl	8001008 <print_csv_SWV.0>

		print_csv_SWV(outputArray, len);
 8000fdc:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000fe0:	469c      	mov	ip, r3
 8000fe2:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000fe6:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8000fea:	f000 f80d 	bl	8001008 <print_csv_SWV.0>

		HAL_Delay(1000);
 8000fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff2:	f000 fdaf 	bl	8001b54 <HAL_Delay>
		ITM_Port32(31) = 1;
 8000ff6:	e75b      	b.n	8000eb0 <main+0x18c>
 8000ff8:	3dcccccd 	.word	0x3dcccccd
 8000ffc:	40a00000 	.word	0x40a00000
 8001000:	08006f60 	.word	0x08006f60
 8001004:	e000007c 	.word	0xe000007c

08001008 <print_csv_SWV.0>:
	void print_csv_SWV(float* arr,int len){
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	f8c7 c004 	str.w	ip, [r7, #4]
		for(int i=0; i<len; i++){
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e00f      	b.n	800103c <print_csv_SWV.0+0x34>
			printf("%f,",arr[i]);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff face 	bl	80005c8 <__aeabi_f2d>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <print_csv_SWV.0+0x48>)
 8001032:	f003 f859 	bl	80040e8 <iprintf>
		for(int i=0; i<len; i++){
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbeb      	blt.n	800101c <print_csv_SWV.0+0x14>
	}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	080070f4 	.word	0x080070f4

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b096      	sub	sp, #88	; 0x58
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2244      	movs	r2, #68	; 0x44
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f003 f895 	bl	8004192 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001076:	f44f 7000 	mov.w	r0, #512	; 0x200
 800107a:	f001 f83d 	bl	80020f8 <HAL_PWREx_ControlVoltageScaling>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001084:	f000 f8a2 	bl	80011cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001088:	f001 f818 	bl	80020bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <SystemClock_Config+0xcc>)
 800108e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001092:	4a23      	ldr	r2, [pc, #140]	; (8001120 <SystemClock_Config+0xcc>)
 8001094:	f023 0318 	bic.w	r3, r3, #24
 8001098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800109c:	2314      	movs	r3, #20
 800109e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010ac:	2360      	movs	r3, #96	; 0x60
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b0:	2302      	movs	r3, #2
 80010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010b4:	2301      	movs	r3, #1
 80010b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010bc:	2328      	movs	r3, #40	; 0x28
 80010be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 f867 	bl	80021a4 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010dc:	f000 f876 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2303      	movs	r3, #3
 80010e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	2104      	movs	r1, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fc2f 	bl	800295c <HAL_RCC_ClockConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001104:	f000 f862 	bl	80011cc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8001108:	2200      	movs	r2, #0
 800110a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800110e:	2000      	movs	r0, #0
 8001110:	f001 fd24 	bl	8002b5c <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001114:	f001 fe42 	bl	8002d9c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001118:	bf00      	nop
 800111a:	3758      	adds	r7, #88	; 0x58
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <MX_GPIO_Init+0xa4>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <MX_GPIO_Init+0xa4>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_GPIO_Init+0xa4>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_GPIO_Init+0xa4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <MX_GPIO_Init+0xa4>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_GPIO_Init+0xa4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_GPIO_Init+0xa4>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <MX_GPIO_Init+0xa4>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_GPIO_Init+0xa4>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_GPIO_Init+0xa4>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <MX_GPIO_Init+0xa4>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_GPIO_Init+0xa4>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800119a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f000 fdd5 	bl	8001d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>

080011d6 <calculateDiff>:
#include <math.h>
#include "arm_math.h"

void calculateDiff(float *original, float *tracked, float *diff, int len) {
 80011d6:	b480      	push	{r7}
 80011d8:	b087      	sub	sp, #28
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < len; i++){
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	e016      	b.n	8001218 <calculateDiff+0x42>
		diff[i] = original[i] - tracked[i];
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	ed93 7a00 	vldr	s14, [r3]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	4413      	add	r3, r2
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < len; i++){
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3301      	adds	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	dbe4      	blt.n	80011ea <calculateDiff+0x14>
	}
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <calculateDiff_CMSIS>:

void calculateDiff_CMSIS(float *original, float* tracked, float* diff, int len) {
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	603b      	str	r3, [r7, #0]
	arm_sub_f32(original,tracked,diff,len);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f002 f91c 	bl	8003480 <arm_sub_f32>
};
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <calculateAverage>:

float calculateAverage(float* diff, int len) {
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	float sum = 0.0;
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < len; i++){
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	e00e      	b.n	8001284 <calculateAverage+0x34>
		sum += diff[i];
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	edd3 7a00 	vldr	s15, [r3]
 8001272:	ed97 7a03 	vldr	s14, [r7, #12]
 8001276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127a:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < len; i++){
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3301      	adds	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbec      	blt.n	8001266 <calculateAverage+0x16>
	}
	return sum / len;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	ed97 7a03 	vldr	s14, [r7, #12]
 800129a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800129e:	eef0 7a66 	vmov.f32	s15, s13
}
 80012a2:	eeb0 0a67 	vmov.f32	s0, s15
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <calculateAverage_CMSIS>:
float calculateAverage_CMSIS(float* diff, int len) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
	float32_t mean;
	arm_mean_f32(diff,len,&mean);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	f107 020c 	add.w	r2, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f001 fe04 	bl	8002ed0 <arm_mean_f32>
	return mean;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	ee07 3a90 	vmov	s15, r3
};
 80012ce:	eeb0 0a67 	vmov.f32	s0, s15
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <calculateStd>:

float calculateStd(float* input, int len) {
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	float avg = calculateAverage(input, len);
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffb3 	bl	8001250 <calculateAverage>
 80012ea:	ed87 0a03 	vstr	s0, [r7, #12]
	float var = 0.0;
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
	for (int i=0; i< len; i++) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	e02b      	b.n	8001352 <calculateStd+0x7a>
		var += pow(input[i] - avg, 2);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	ed93 7a00 	vldr	s14, [r3]
 8001306:	edd7 7a03 	vldr	s15, [r7, #12]
 800130a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130e:	ee17 0a90 	vmov	r0, s15
 8001312:	f7ff f959 	bl	80005c8 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80013a0 <calculateStd+0xc8>
 800131e:	ec43 2b10 	vmov	d0, r2, r3
 8001322:	f004 fe89 	bl	8006038 <pow>
 8001326:	ec55 4b10 	vmov	r4, r5, d0
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff f94c 	bl	80005c8 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4620      	mov	r0, r4
 8001336:	4629      	mov	r1, r5
 8001338:	f7fe ffe8 	bl	800030c <__adddf3>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fc70 	bl	8000c28 <__aeabi_d2f>
 8001348:	4603      	mov	r3, r0
 800134a:	617b      	str	r3, [r7, #20]
	for (int i=0; i< len; i++) {
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	3301      	adds	r3, #1
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	dbcf      	blt.n	80012fa <calculateStd+0x22>
	}
	return sqrt(var / len);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	ed97 7a05 	vldr	s14, [r7, #20]
 8001368:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800136c:	ee16 0a90 	vmov	r0, s13
 8001370:	f7ff f92a 	bl	80005c8 <__aeabi_f2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	ec43 2b10 	vmov	d0, r2, r3
 800137c:	f004 fecc 	bl	8006118 <sqrt>
 8001380:	ec53 2b10 	vmov	r2, r3, d0
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fc4e 	bl	8000c28 <__aeabi_d2f>
 800138c:	4603      	mov	r3, r0
 800138e:	ee07 3a90 	vmov	s15, r3
}
 8001392:	eeb0 0a67 	vmov.f32	s0, s15
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bdb0      	pop	{r4, r5, r7, pc}
 800139c:	f3af 8000 	nop.w
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40000000 	.word	0x40000000

080013a8 <calculateStd_CMSIS>:

float calculateStd_CMSIS(float* input, int len) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
	float std;
	arm_std_f32(input,len, &std);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f107 020c 	add.w	r2, r7, #12
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f001 fcfe 	bl	8002dbc <arm_std_f32>
	return std;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	ee07 3a90 	vmov	s15, r3
};
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <calculateConv>:

void calculateConv(float* original, float* tracked, float* result, int len) {
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < len + len - 1; i ++){
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e03c      	b.n	800145e <calculateConv+0x8e>
		result[i] = 0.0;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < len; j++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	e02b      	b.n	8001450 <calculateConv+0x80>
			if(i - j >= 0 && i - j < len) {
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db23      	blt.n	800144a <calculateConv+0x7a>
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	dd1d      	ble.n	800144a <calculateConv+0x7a>
				result[i] += original[j] * tracked[i - j];
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	ed93 7a00 	vldr	s14, [r3]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	edd3 6a00 	vldr	s13, [r3]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001446:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < len; j++) {
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	3301      	adds	r3, #1
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	dbcf      	blt.n	80013f8 <calculateConv+0x28>
	for (int i = 0; i < len + len - 1; i ++){
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	3b01      	subs	r3, #1
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	429a      	cmp	r2, r3
 8001468:	dbbc      	blt.n	80013e4 <calculateConv+0x14>
			}
		}
	}
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <calculateConv_CMSIS>:

void calculateConv_CMSIS(float *A, float* B, float* result, int len) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af02      	add	r7, sp, #8
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
	arm_conv_f32(A,len,B,len,result);
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	4613      	mov	r3, r2
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f001 fd5a 	bl	8002f4c <arm_conv_f32>
};
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <calculateCorr>:

float calculateCorr(float* A, float* B, int len) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	float ave_A = calculateAverage(A, len);
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f7ff fece 	bl	8001250 <calculateAverage>
 80014b4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float ave_B = calculateAverage(B, len);
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	68b8      	ldr	r0, [r7, #8]
 80014bc:	f7ff fec8 	bl	8001250 <calculateAverage>
 80014c0:	ed87 0a08 	vstr	s0, [r7, #32]
	float std_A = calculateStd(A, len);
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff ff06 	bl	80012d8 <calculateStd>
 80014cc:	ed87 0a07 	vstr	s0, [r7, #28]
	float std_B = calculateStd(B, len);
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff ff00 	bl	80012d8 <calculateStd>
 80014d8:	ed87 0a06 	vstr	s0, [r7, #24]
	float temp = 0;
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=0; i<len; i++){
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014e6:	e01e      	b.n	8001526 <calculateCorr+0x86>
		temp += (A[i]-ave_A)*(B[i]-ave_B);
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	ed93 7a00 	vldr	s14, [r3]
 80014f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	4413      	add	r3, r2
 8001504:	edd3 6a00 	vldr	s13, [r3]
 8001508:	edd7 7a08 	vldr	s15, [r7, #32]
 800150c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001514:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i=0; i<len; i++){
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	3301      	adds	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
 8001526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	429a      	cmp	r2, r3
 800152c:	dbdc      	blt.n	80014e8 <calculateCorr+0x48>
	}
	float cov = temp/len;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001538:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800153c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001540:	edc7 7a05 	vstr	s15, [r7, #20]
	return cov/(std_A*std_B);
 8001544:	ed97 7a07 	vldr	s14, [r7, #28]
 8001548:	edd7 7a06 	vldr	s15, [r7, #24]
 800154c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001550:	ed97 7a05 	vldr	s14, [r7, #20]
 8001554:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001558:	eef0 7a66 	vmov.f32	s15, s13
}
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	3730      	adds	r7, #48	; 0x30
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <calculateCorr_CMSIS>:

float calculateCorr_CMSIS(float* A, float* B, int len){
 8001566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800156a:	b09f      	sub	sp, #124	; 0x7c
 800156c:	af00      	add	r7, sp, #0
 800156e:	6378      	str	r0, [r7, #52]	; 0x34
 8001570:	6339      	str	r1, [r7, #48]	; 0x30
 8001572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001574:	466b      	mov	r3, sp
 8001576:	461e      	mov	r6, r3
	float meanA = calculateAverage_CMSIS(A,len);
 8001578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800157a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800157c:	f7ff fe98 	bl	80012b0 <calculateAverage_CMSIS>
 8001580:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	float meanB = calculateAverage_CMSIS(B,len);
 8001584:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001588:	f7ff fe92 	bl	80012b0 <calculateAverage_CMSIS>
 800158c:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	float meanA_Arr[len];
 8001590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001592:	1e4b      	subs	r3, r1, #1
 8001594:	66bb      	str	r3, [r7, #104]	; 0x68
 8001596:	460a      	mov	r2, r1
 8001598:	2300      	movs	r3, #0
 800159a:	4614      	mov	r4, r2
 800159c:	461d      	mov	r5, r3
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	016b      	lsls	r3, r5, #5
 80015a8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80015ac:	0162      	lsls	r2, r4, #5
 80015ae:	460a      	mov	r2, r1
 80015b0:	2300      	movs	r3, #0
 80015b2:	4690      	mov	r8, r2
 80015b4:	4699      	mov	r9, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80015c2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80015c6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80015ca:	460b      	mov	r3, r1
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	3307      	adds	r3, #7
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	ebad 0d03 	sub.w	sp, sp, r3
 80015d8:	466b      	mov	r3, sp
 80015da:	3303      	adds	r3, #3
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	667b      	str	r3, [r7, #100]	; 0x64
	float meanB_Arr[len];
 80015e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015e4:	1e4b      	subs	r3, r1, #1
 80015e6:	663b      	str	r3, [r7, #96]	; 0x60
 80015e8:	460a      	mov	r2, r1
 80015ea:	2300      	movs	r3, #0
 80015ec:	4692      	mov	sl, r2
 80015ee:	469b      	mov	fp, r3
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80015fc:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001600:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001604:	460a      	mov	r2, r1
 8001606:	2300      	movs	r3, #0
 8001608:	623a      	str	r2, [r7, #32]
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001618:	4628      	mov	r0, r5
 800161a:	0143      	lsls	r3, r0, #5
 800161c:	4620      	mov	r0, r4
 800161e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001622:	4620      	mov	r0, r4
 8001624:	0142      	lsls	r2, r0, #5
 8001626:	460b      	mov	r3, r1
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	3307      	adds	r3, #7
 800162c:	08db      	lsrs	r3, r3, #3
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	ebad 0d03 	sub.w	sp, sp, r3
 8001634:	466b      	mov	r3, sp
 8001636:	3303      	adds	r3, #3
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	65fb      	str	r3, [r7, #92]	; 0x5c
	float stdA = calculateStd_CMSIS(A,len);
 800163e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001640:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001642:	f7ff feb1 	bl	80013a8 <calculateStd_CMSIS>
 8001646:	eef0 7a40 	vmov.f32	s15, s0
 800164a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float stdB = calculateStd_CMSIS(B,len);
 800164e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001652:	f7ff fea9 	bl	80013a8 <calculateStd_CMSIS>
 8001656:	eef0 7a40 	vmov.f32	s15, s0
 800165a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float stdMul;
	float diffMean_A[len];
 800165e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001660:	1e4b      	subs	r3, r1, #1
 8001662:	65bb      	str	r3, [r7, #88]	; 0x58
 8001664:	460a      	mov	r2, r1
 8001666:	2300      	movs	r3, #0
 8001668:	61ba      	str	r2, [r7, #24]
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001678:	4628      	mov	r0, r5
 800167a:	0143      	lsls	r3, r0, #5
 800167c:	4620      	mov	r0, r4
 800167e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001682:	4620      	mov	r0, r4
 8001684:	0142      	lsls	r2, r0, #5
 8001686:	460a      	mov	r2, r1
 8001688:	2300      	movs	r3, #0
 800168a:	613a      	str	r2, [r7, #16]
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800169a:	4628      	mov	r0, r5
 800169c:	0143      	lsls	r3, r0, #5
 800169e:	4620      	mov	r0, r4
 80016a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016a4:	4620      	mov	r0, r4
 80016a6:	0142      	lsls	r2, r0, #5
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	3307      	adds	r3, #7
 80016ae:	08db      	lsrs	r3, r3, #3
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	ebad 0d03 	sub.w	sp, sp, r3
 80016b6:	466b      	mov	r3, sp
 80016b8:	3303      	adds	r3, #3
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	657b      	str	r3, [r7, #84]	; 0x54
	float diffMean_B[len];
 80016c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016c2:	1e4b      	subs	r3, r1, #1
 80016c4:	653b      	str	r3, [r7, #80]	; 0x50
 80016c6:	460a      	mov	r2, r1
 80016c8:	2300      	movs	r3, #0
 80016ca:	60ba      	str	r2, [r7, #8]
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016da:	4628      	mov	r0, r5
 80016dc:	0143      	lsls	r3, r0, #5
 80016de:	4620      	mov	r0, r4
 80016e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016e4:	4620      	mov	r0, r4
 80016e6:	0142      	lsls	r2, r0, #5
 80016e8:	460a      	mov	r2, r1
 80016ea:	2300      	movs	r3, #0
 80016ec:	603a      	str	r2, [r7, #0]
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016fc:	4628      	mov	r0, r5
 80016fe:	0143      	lsls	r3, r0, #5
 8001700:	4620      	mov	r0, r4
 8001702:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001706:	4620      	mov	r0, r4
 8001708:	0142      	lsls	r2, r0, #5
 800170a:	460b      	mov	r3, r1
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	3307      	adds	r3, #7
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	ebad 0d03 	sub.w	sp, sp, r3
 8001718:	466b      	mov	r3, sp
 800171a:	3303      	adds	r3, #3
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
	float cov;

	calculateAverage_CMSIS(A,len);
 8001722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001724:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001726:	f7ff fdc3 	bl	80012b0 <calculateAverage_CMSIS>
	calculateAverage_CMSIS(B,len);
 800172a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800172c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800172e:	f7ff fdbf 	bl	80012b0 <calculateAverage_CMSIS>
	for(int i=0; i<len; i++){
 8001732:	2300      	movs	r3, #0
 8001734:	677b      	str	r3, [r7, #116]	; 0x74
 8001736:	e00e      	b.n	8001756 <calculateCorr_CMSIS+0x1f0>
		meanA_Arr[i] = meanA;
 8001738:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800173a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001742:	601a      	str	r2, [r3, #0]
		meanB_Arr[i] = meanB;
 8001744:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800174e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<len; i++){
 8001750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001752:	3301      	adds	r3, #1
 8001754:	677b      	str	r3, [r7, #116]	; 0x74
 8001756:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175a:	429a      	cmp	r2, r3
 800175c:	dbec      	blt.n	8001738 <calculateCorr_CMSIS+0x1d2>
	}
	calculateDiff_CMSIS(A, meanA_Arr,diffMean_A,len);
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001762:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001764:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001766:	f7ff fd62 	bl	800122e <calculateDiff_CMSIS>
	calculateDiff_CMSIS(B, meanB_Arr,diffMean_B,len);
 800176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800176e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001772:	f7ff fd5c 	bl	800122e <calculateDiff_CMSIS>
	arm_dot_prod_f32(diffMean_A,diffMean_B,len,&cov);
 8001776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001778:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800177c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800177e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001780:	f001 ff32 	bl	80035e8 <arm_dot_prod_f32>
	cov = cov/len;
 8001784:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001796:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	arm_mult_f32(&stdA,&stdB,&stdMul,1);
 800179a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800179e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80017a2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80017a6:	2301      	movs	r3, #1
 80017a8:	f001 fec4 	bl	8003534 <arm_mult_f32>
	return cov/stdMul;
 80017ac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80017b0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80017b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017b8:	46b5      	mov	sp, r6
 80017ba:	eef0 7a66 	vmov.f32	s15, s13

}
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	377c      	adds	r7, #124	; 0x7c
 80017c4:	46bd      	mov	sp, r7
 80017c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_MspInit+0x44>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_MspInit+0x44>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6613      	str	r3, [r2, #96]	; 0x60
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_MspInit+0x44>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_MspInit+0x44>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_MspInit+0x44>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6593      	str	r3, [r2, #88]	; 0x58
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_MspInit+0x44>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	e7fe      	b.n	8001818 <NMI_Handler+0x4>

0800181a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f000 f958 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_kill>:

int _kill(int pid, int sig)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001882:	f002 fcd9 	bl	8004238 <__errno>
 8001886:	4603      	mov	r3, r0
 8001888:	2216      	movs	r2, #22
 800188a:	601a      	str	r2, [r3, #0]
  return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_exit>:

void _exit (int status)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffe7 	bl	8001878 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018aa:	e7fe      	b.n	80018aa <_exit+0x12>

080018ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e00a      	b.n	80018d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	4601      	mov	r1, r0
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf0      	blt.n	80018be <_read+0x12>
  }

  return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e009      	b.n	800190c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf1      	blt.n	80018f8 <_write+0x12>
  }
  return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_close>:

int _close(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001946:	605a      	str	r2, [r3, #4]
  return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_isatty>:

int _isatty(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f002 fc3e 	bl	8004238 <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20018000 	.word	0x20018000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	20000204 	.word	0x20000204
 80019f0:	20000358 	.word	0x20000358

080019f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a1c:	f7ff ffea 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a22:	490d      	ldr	r1, [pc, #52]	; (8001a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <LoopForever+0xe>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a38:	4c0a      	ldr	r4, [pc, #40]	; (8001a64 <LoopForever+0x16>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a46:	f002 fbfd 	bl	8004244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a4a:	f7ff f96b 	bl	8000d24 <main>

08001a4e <LoopForever>:

LoopForever:
    b LoopForever
 8001a4e:	e7fe      	b.n	8001a4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001a5c:	080074e8 	.word	0x080074e8
  ldr r2, =_sbss
 8001a60:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001a64:	20000358 	.word	0x20000358

08001a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC1_2_IRQHandler>

08001a6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a74:	2003      	movs	r0, #3
 8001a76:	f000 f943 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 f80e 	bl	8001a9c <HAL_InitTick>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	e001      	b.n	8001a90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a8c:	f7ff fe9e 	bl	80017cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_InitTick+0x6c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d023      	beq.n	8001af8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_InitTick+0x70>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_InitTick+0x6c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f941 	bl	8001d4e <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10f      	bne.n	8001af2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d809      	bhi.n	8001aec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f000 f919 	bl	8001d16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_InitTick+0x74>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e007      	b.n	8001afc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e004      	b.n	8001afc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	e001      	b.n	8001afc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008
 8001b38:	20000208 	.word	0x20000208

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000208 	.word	0x20000208

08001b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff ffee 	bl	8001b3c <HAL_GetTick>
 8001b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d005      	beq.n	8001b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_Delay+0x44>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7a:	bf00      	nop
 8001b7c:	f7ff ffde 	bl	8001b3c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d8f7      	bhi.n	8001b7c <HAL_Delay+0x28>
  {
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000008 	.word	0x20000008

08001b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0a      	blt.n	8001c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	490c      	ldr	r1, [pc, #48]	; (8001c4c <__NVIC_SetPriority+0x4c>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c28:	e00a      	b.n	8001c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4908      	ldr	r1, [pc, #32]	; (8001c50 <__NVIC_SetPriority+0x50>)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	3b04      	subs	r3, #4
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f1c3 0307 	rsb	r3, r3, #7
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	bf28      	it	cs
 8001c72:	2304      	movcs	r3, #4
 8001c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d902      	bls.n	8001c84 <NVIC_EncodePriority+0x30>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3b03      	subs	r3, #3
 8001c82:	e000      	b.n	8001c86 <NVIC_EncodePriority+0x32>
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43d9      	mvns	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	4313      	orrs	r3, r2
         );
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ccc:	d301      	bcc.n	8001cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <SysTick_Config+0x40>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cda:	210f      	movs	r1, #15
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f7ff ff8e 	bl	8001c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <SysTick_Config+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SysTick_Config+0x40>)
 8001cec:	2207      	movs	r2, #7
 8001cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff47 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d28:	f7ff ff5c 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f7ff ff8e 	bl	8001c54 <NVIC_EncodePriority>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff5d 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffb0 	bl	8001cbc <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d76:	e17f      	b.n	8002078 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8171 	beq.w	8002072 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d005      	beq.n	8001da8 <HAL_GPIO_Init+0x40>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d130      	bne.n	8001e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dde:	2201      	movs	r2, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 0201 	and.w	r2, r3, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d118      	bne.n	8001e48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	f003 0201 	and.w	r2, r3, #1
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d017      	beq.n	8001e84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d123      	bne.n	8001ed8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	08da      	lsrs	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3208      	adds	r2, #8
 8001ed2:	6939      	ldr	r1, [r7, #16]
 8001ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0203 	and.w	r2, r3, #3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80ac 	beq.w	8002072 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	4b5f      	ldr	r3, [pc, #380]	; (8002098 <HAL_GPIO_Init+0x330>)
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	4a5e      	ldr	r2, [pc, #376]	; (8002098 <HAL_GPIO_Init+0x330>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6613      	str	r3, [r2, #96]	; 0x60
 8001f26:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <HAL_GPIO_Init+0x330>)
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f32:	4a5a      	ldr	r2, [pc, #360]	; (800209c <HAL_GPIO_Init+0x334>)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	220f      	movs	r2, #15
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f5c:	d025      	beq.n	8001faa <HAL_GPIO_Init+0x242>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4f      	ldr	r2, [pc, #316]	; (80020a0 <HAL_GPIO_Init+0x338>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <HAL_GPIO_Init+0x23e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4e      	ldr	r2, [pc, #312]	; (80020a4 <HAL_GPIO_Init+0x33c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_GPIO_Init+0x23a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a4d      	ldr	r2, [pc, #308]	; (80020a8 <HAL_GPIO_Init+0x340>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x236>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4c      	ldr	r2, [pc, #304]	; (80020ac <HAL_GPIO_Init+0x344>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_Init+0x232>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4b      	ldr	r2, [pc, #300]	; (80020b0 <HAL_GPIO_Init+0x348>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x22e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <HAL_GPIO_Init+0x34c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_Init+0x22a>
 8001f8e:	2306      	movs	r3, #6
 8001f90:	e00c      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001f92:	2307      	movs	r3, #7
 8001f94:	e00a      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001f96:	2305      	movs	r3, #5
 8001f98:	e008      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e004      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001faa:	2300      	movs	r3, #0
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	f002 0203 	and.w	r2, r2, #3
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	4093      	lsls	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fbc:	4937      	ldr	r1, [pc, #220]	; (800209c <HAL_GPIO_Init+0x334>)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fee:	4a32      	ldr	r2, [pc, #200]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <HAL_GPIO_Init+0x350>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_GPIO_Init+0x350>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800206c:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <HAL_GPIO_Init+0x350>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	f47f ae78 	bne.w	8001d78 <HAL_GPIO_Init+0x10>
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000
 80020a0:	48000400 	.word	0x48000400
 80020a4:	48000800 	.word	0x48000800
 80020a8:	48000c00 	.word	0x48000c00
 80020ac:	48001000 	.word	0x48001000
 80020b0:	48001400 	.word	0x48001400
 80020b4:	48001800 	.word	0x48001800
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40007000 	.word	0x40007000

080020dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40007000 	.word	0x40007000

080020f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002106:	d130      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002108:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002114:	d038      	beq.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800211e:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002120:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2232      	movs	r2, #50	; 0x32
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0c9b      	lsrs	r3, r3, #18
 8002138:	3301      	adds	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800213c:	e002      	b.n	8002144 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3b01      	subs	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002150:	d102      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f2      	bne.n	800213e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002164:	d110      	bne.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e00f      	b.n	800218a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d007      	beq.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002180:	4a05      	ldr	r2, [pc, #20]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002186:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40007000 	.word	0x40007000
 800219c:	20000000 	.word	0x20000000
 80021a0:	431bde83 	.word	0x431bde83

080021a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e3ca      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b6:	4b97      	ldr	r3, [pc, #604]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c0:	4b94      	ldr	r3, [pc, #592]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80e4 	beq.w	80023a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <HAL_RCC_OscConfig+0x4a>
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	f040 808b 	bne.w	80022fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	f040 8087 	bne.w	80022fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ee:	4b89      	ldr	r3, [pc, #548]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_RCC_OscConfig+0x62>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e3a2      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	4b82      	ldr	r3, [pc, #520]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <HAL_RCC_OscConfig+0x7c>
 8002216:	4b7f      	ldr	r3, [pc, #508]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800221e:	e005      	b.n	800222c <HAL_RCC_OscConfig+0x88>
 8002220:	4b7c      	ldr	r3, [pc, #496]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222c:	4293      	cmp	r3, r2
 800222e:	d223      	bcs.n	8002278 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fd51 	bl	8002cdc <RCC_SetFlashLatencyFromMSIRange>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e383      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002244:	4b73      	ldr	r3, [pc, #460]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a72      	ldr	r2, [pc, #456]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800224a:	f043 0308 	orr.w	r3, r3, #8
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b70      	ldr	r3, [pc, #448]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	496d      	ldr	r1, [pc, #436]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002262:	4b6c      	ldr	r3, [pc, #432]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	4968      	ldr	r1, [pc, #416]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
 8002276:	e025      	b.n	80022c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002278:	4b66      	ldr	r3, [pc, #408]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a65      	ldr	r2, [pc, #404]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800227e:	f043 0308 	orr.w	r3, r3, #8
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4960      	ldr	r1, [pc, #384]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002296:	4b5f      	ldr	r3, [pc, #380]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	495b      	ldr	r1, [pc, #364]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fd11 	bl	8002cdc <RCC_SetFlashLatencyFromMSIRange>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e343      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c4:	f000 fc7e 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b52      	ldr	r3, [pc, #328]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	4950      	ldr	r1, [pc, #320]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	4a4e      	ldr	r2, [pc, #312]	; (800241c <HAL_RCC_OscConfig+0x278>)
 80022e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022e4:	4b4e      	ldr	r3, [pc, #312]	; (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fbd7 	bl	8001a9c <HAL_InitTick>
 80022ee:	4603      	mov	r3, r0
 80022f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d052      	beq.n	800239e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	e327      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d032      	beq.n	800236a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002304:	4b43      	ldr	r3, [pc, #268]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a42      	ldr	r2, [pc, #264]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002310:	f7ff fc14 	bl	8001b3c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002318:	f7ff fc10 	bl	8001b3c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e310      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800232a:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002336:	4b37      	ldr	r3, [pc, #220]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a36      	ldr	r2, [pc, #216]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4931      	ldr	r1, [pc, #196]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002354:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	492c      	ldr	r1, [pc, #176]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
 8002368:	e01a      	b.n	80023a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800236a:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a29      	ldr	r2, [pc, #164]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002376:	f7ff fbe1 	bl	8001b3c <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800237e:	f7ff fbdd 	bl	8001b3c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e2dd      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x1da>
 800239c:	e000      	b.n	80023a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800239e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d074      	beq.n	8002496 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x21a>
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d10e      	bne.n	80023d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d10b      	bne.n	80023d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d064      	beq.n	8002494 <HAL_RCC_OscConfig+0x2f0>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d160      	bne.n	8002494 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e2ba      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x24a>
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	e026      	b.n	800243c <HAL_RCC_OscConfig+0x298>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f6:	d115      	bne.n	8002424 <HAL_RCC_OscConfig+0x280>
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a05      	ldr	r2, [pc, #20]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80023fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a02      	ldr	r2, [pc, #8]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e014      	b.n	800243c <HAL_RCC_OscConfig+0x298>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	080070f8 	.word	0x080070f8
 800241c:	20000000 	.word	0x20000000
 8002420:	20000004 	.word	0x20000004
 8002424:	4ba0      	ldr	r3, [pc, #640]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a9f      	ldr	r2, [pc, #636]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b9d      	ldr	r3, [pc, #628]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a9c      	ldr	r2, [pc, #624]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff fb7a 	bl	8001b3c <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff fb76 	bl	8001b3c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e276      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245e:	4b92      	ldr	r3, [pc, #584]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x2a8>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7ff fb66 	bl	8001b3c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff fb62 	bl	8001b3c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e262      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002486:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x2d0>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d060      	beq.n	8002564 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_OscConfig+0x310>
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d119      	bne.n	80024e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d116      	bne.n	80024e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b4:	4b7c      	ldr	r3, [pc, #496]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_OscConfig+0x328>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e23f      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b76      	ldr	r3, [pc, #472]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	4973      	ldr	r1, [pc, #460]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e0:	e040      	b.n	8002564 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d023      	beq.n	8002532 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ea:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6e      	ldr	r2, [pc, #440]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7ff fb21 	bl	8001b3c <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fe:	f7ff fb1d 	bl	8001b3c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e21d      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002510:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b62      	ldr	r3, [pc, #392]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	495f      	ldr	r1, [pc, #380]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	e018      	b.n	8002564 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b5d      	ldr	r3, [pc, #372]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a5c      	ldr	r2, [pc, #368]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7ff fafd 	bl	8001b3c <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002546:	f7ff faf9 	bl	8001b3c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1f9      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d03c      	beq.n	80025ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002578:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 800257a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257e:	4a4a      	ldr	r2, [pc, #296]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7ff fad8 	bl	8001b3c <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002590:	f7ff fad4 	bl	8001b3c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1d4      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a2:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 80025a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ef      	beq.n	8002590 <HAL_RCC_OscConfig+0x3ec>
 80025b0:	e01b      	b.n	80025ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b2:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 80025b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b8:	4a3b      	ldr	r2, [pc, #236]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7ff fabb 	bl	8001b3c <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ca:	f7ff fab7 	bl	8001b3c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e1b7      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025dc:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 80025de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ef      	bne.n	80025ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80a6 	beq.w	8002744 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f8:	2300      	movs	r3, #0
 80025fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025fc:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10d      	bne.n	8002624 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	6593      	str	r3, [r2, #88]	; 0x58
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002620:	2301      	movs	r3, #1
 8002622:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <HAL_RCC_OscConfig+0x508>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d118      	bne.n	8002662 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_RCC_OscConfig+0x508>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_RCC_OscConfig+0x508>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263c:	f7ff fa7e 	bl	8001b3c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7ff fa7a 	bl	8001b3c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e17a      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_RCC_OscConfig+0x508>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <HAL_RCC_OscConfig+0x4d8>
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267a:	e029      	b.n	80026d0 <HAL_RCC_OscConfig+0x52c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d115      	bne.n	80026b0 <HAL_RCC_OscConfig+0x50c>
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <HAL_RCC_OscConfig+0x504>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a4:	e014      	b.n	80026d0 <HAL_RCC_OscConfig+0x52c>
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40007000 	.word	0x40007000
 80026b0:	4b9c      	ldr	r3, [pc, #624]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b6:	4a9b      	ldr	r2, [pc, #620]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026c0:	4b98      	ldr	r3, [pc, #608]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	4a97      	ldr	r2, [pc, #604]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d016      	beq.n	8002706 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7ff fa30 	bl	8001b3c <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7ff fa2c 	bl	8001b3c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e12a      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f6:	4b8b      	ldr	r3, [pc, #556]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ed      	beq.n	80026e0 <HAL_RCC_OscConfig+0x53c>
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7ff fa19 	bl	8001b3c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7ff fa15 	bl	8001b3c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e113      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002724:	4b7f      	ldr	r3, [pc, #508]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ed      	bne.n	800270e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002732:	7ffb      	ldrb	r3, [r7, #31]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002738:	4b7a      	ldr	r3, [pc, #488]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	4a79      	ldr	r2, [pc, #484]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 800273e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002742:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80fe 	beq.w	800294a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	2b02      	cmp	r3, #2
 8002754:	f040 80d0 	bne.w	80028f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002758:	4b72      	ldr	r3, [pc, #456]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	429a      	cmp	r2, r3
 800276a:	d130      	bne.n	80027ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	3b01      	subs	r3, #1
 8002778:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d127      	bne.n	80027ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d11f      	bne.n	80027ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002798:	2a07      	cmp	r2, #7
 800279a:	bf14      	ite	ne
 800279c:	2201      	movne	r2, #1
 800279e:	2200      	moveq	r2, #0
 80027a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d113      	bne.n	80027ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	3b01      	subs	r3, #1
 80027b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	3b01      	subs	r3, #1
 80027c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d06e      	beq.n	80028ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	d069      	beq.n	80028a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027d4:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027e0:	4b50      	ldr	r3, [pc, #320]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0ad      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027f0:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4b      	ldr	r2, [pc, #300]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80027f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027fc:	f7ff f99e 	bl	8001b3c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7ff f99a 	bl	8001b3c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e09a      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002816:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_RCC_OscConfig+0x784>)
 8002828:	4013      	ands	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002832:	3a01      	subs	r2, #1
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	4311      	orrs	r1, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800283c:	0212      	lsls	r2, r2, #8
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002844:	0852      	lsrs	r2, r2, #1
 8002846:	3a01      	subs	r2, #1
 8002848:	0552      	lsls	r2, r2, #21
 800284a:	4311      	orrs	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002850:	0852      	lsrs	r2, r2, #1
 8002852:	3a01      	subs	r2, #1
 8002854:	0652      	lsls	r2, r2, #25
 8002856:	4311      	orrs	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800285c:	0912      	lsrs	r2, r2, #4
 800285e:	0452      	lsls	r2, r2, #17
 8002860:	430a      	orrs	r2, r1
 8002862:	4930      	ldr	r1, [pc, #192]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 8002864:	4313      	orrs	r3, r2
 8002866:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2d      	ldr	r2, [pc, #180]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 800286e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002872:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 800287a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800287e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002880:	f7ff f95c 	bl	8001b3c <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7ff f958 	bl	8001b3c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e058      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a6:	e050      	b.n	800294a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e04f      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d148      	bne.n	800294a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028b8:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80028be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c4:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028d0:	f7ff f934 	bl	8001b3c <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7ff f930 	bl	8001b3c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e030      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x734>
 80028f6:	e028      	b.n	800294a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d023      	beq.n	8002946 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a08      	ldr	r2, [pc, #32]	; (8002924 <HAL_RCC_OscConfig+0x780>)
 8002904:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7ff f917 	bl	8001b3c <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002910:	e00c      	b.n	800292c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7ff f913 	bl	8001b3c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d905      	bls.n	800292c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e013      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
 8002924:	40021000 	.word	0x40021000
 8002928:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_OscConfig+0x7b0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ec      	bne.n	8002912 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCC_OscConfig+0x7b0>)
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4905      	ldr	r1, [pc, #20]	; (8002954 <HAL_RCC_OscConfig+0x7b0>)
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCC_OscConfig+0x7b4>)
 8002940:	4013      	ands	r3, r2
 8002942:	60cb      	str	r3, [r1, #12]
 8002944:	e001      	b.n	800294a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	feeefffc 	.word	0xfeeefffc

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0e7      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b75      	ldr	r3, [pc, #468]	; (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d910      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b72      	ldr	r3, [pc, #456]	; (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 0207 	bic.w	r2, r3, #7
 8002986:	4970      	ldr	r1, [pc, #448]	; (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b6e      	ldr	r3, [pc, #440]	; (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0cf      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d010      	beq.n	80029ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	4b66      	ldr	r3, [pc, #408]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d908      	bls.n	80029ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4960      	ldr	r1, [pc, #384]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d04c      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e2:	4b5a      	ldr	r3, [pc, #360]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d121      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0a6      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d115      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e09a      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a12:	4b4e      	ldr	r3, [pc, #312]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e08e      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a22:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e086      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a32:	4b46      	ldr	r3, [pc, #280]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4943      	ldr	r1, [pc, #268]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a44:	f7ff f87a 	bl	8001b3c <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7ff f876 	bl	8001b3c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e06e      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 020c 	and.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1eb      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d010      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d208      	bcs.n	8002aa2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	492b      	ldr	r1, [pc, #172]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa2:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d210      	bcs.n	8002ad2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 0207 	bic.w	r2, r3, #7
 8002ab8:	4923      	ldr	r1, [pc, #140]	; (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e036      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4918      	ldr	r1, [pc, #96]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d009      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4910      	ldr	r1, [pc, #64]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b10:	f000 f858 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	490b      	ldr	r1, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1f4>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2c:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1fc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe ffb1 	bl	8001a9c <HAL_InitTick>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	080070f8 	.word	0x080070f8
 8002b54:	20000000 	.word	0x20000000
 8002b58:	20000004 	.word	0x20000004

08002b5c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_RCC_MCOConfig+0x64>)
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6c:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <HAL_RCC_MCOConfig+0x64>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_MCOConfig+0x64>)
 8002b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8002b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002b92:	2300      	movs	r3, #0
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba0:	f7ff f8e2 	bl	8001d68 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_RCC_MCOConfig+0x64>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <HAL_RCC_MCOConfig+0x64>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	3728      	adds	r7, #40	; 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d121      	bne.n	8002c36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d11e      	bne.n	8002c36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bf8:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c04:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	e005      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c14:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c20:	4a2b      	ldr	r2, [pc, #172]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	e004      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c48:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b0c      	cmp	r3, #12
 8002c50:	d134      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c52:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d003      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0xac>
 8002c68:	e005      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c6c:	617b      	str	r3, [r7, #20]
      break;
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c72:	617b      	str	r3, [r7, #20]
      break;
 8002c74:	e002      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	617b      	str	r3, [r7, #20]
      break;
 8002c7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	3301      	adds	r3, #1
 8002c88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	fb03 f202 	mul.w	r2, r3, r2
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	0e5b      	lsrs	r3, r3, #25
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	3301      	adds	r3, #1
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3724      	adds	r7, #36	; 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08007108 	.word	0x08007108
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	007a1200 	.word	0x007a1200

08002cdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ce8:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cf4:	f7ff f9f2 	bl	80020dc <HAL_PWREx_GetVoltageRange>
 8002cf8:	6178      	str	r0, [r7, #20]
 8002cfa:	e014      	b.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6593      	str	r3, [r2, #88]	; 0x58
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d14:	f7ff f9e2 	bl	80020dc <HAL_PWREx_GetVoltageRange>
 8002d18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d2c:	d10b      	bne.n	8002d46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d919      	bls.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2ba0      	cmp	r3, #160	; 0xa0
 8002d38:	d902      	bls.n	8002d40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	e013      	b.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d40:	2301      	movs	r3, #1
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e010      	b.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b80      	cmp	r3, #128	; 0x80
 8002d4a:	d902      	bls.n	8002d52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	e00a      	b.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d102      	bne.n	8002d5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d58:	2302      	movs	r3, #2
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	e004      	b.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b70      	cmp	r3, #112	; 0x70
 8002d62:	d101      	bne.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d64:	2301      	movs	r3, #1
 8002d66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 0207 	bic.w	r2, r3, #7
 8002d70:	4909      	ldr	r1, [pc, #36]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d78:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40022000 	.word	0x40022000

08002d9c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002da6:	f043 0304 	orr.w	r3, r3, #4
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <arm_std_f32>:
 8002dbc:	2901      	cmp	r1, #1
 8002dbe:	d97d      	bls.n	8002ebc <arm_std_f32+0x100>
 8002dc0:	b530      	push	{r4, r5, lr}
 8002dc2:	ed2d 8b02 	vpush	{d8}
 8002dc6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002ecc <arm_std_f32+0x110>
 8002dca:	088d      	lsrs	r5, r1, #2
 8002dcc:	b083      	sub	sp, #12
 8002dce:	eef0 4a47 	vmov.f32	s9, s14
 8002dd2:	d028      	beq.n	8002e26 <arm_std_f32+0x6a>
 8002dd4:	f100 0310 	add.w	r3, r0, #16
 8002dd8:	462c      	mov	r4, r5
 8002dda:	ed53 7a04 	vldr	s15, [r3, #-16]
 8002dde:	ed13 5a03 	vldr	s10, [r3, #-12]
 8002de2:	ed53 5a02 	vldr	s11, [r3, #-8]
 8002de6:	ed13 6a01 	vldr	s12, [r3, #-4]
 8002dea:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002dee:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8002df2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002df6:	ee65 6a05 	vmul.f32	s13, s10, s10
 8002dfa:	ee77 7a85 	vadd.f32	s15, s15, s10
 8002dfe:	ee76 6a87 	vadd.f32	s13, s13, s14
 8002e02:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8002e06:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002e0a:	ee77 6a26 	vadd.f32	s13, s14, s13
 8002e0e:	ee26 7a06 	vmul.f32	s14, s12, s12
 8002e12:	3c01      	subs	r4, #1
 8002e14:	ee77 4a86 	vadd.f32	s9, s15, s12
 8002e18:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002e1c:	f103 0310 	add.w	r3, r3, #16
 8002e20:	d1db      	bne.n	8002dda <arm_std_f32+0x1e>
 8002e22:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8002e26:	f011 0303 	ands.w	r3, r1, #3
 8002e2a:	d01b      	beq.n	8002e64 <arm_std_f32+0xa8>
 8002e2c:	edd0 7a00 	vldr	s15, [r0]
 8002e30:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002e34:	3b01      	subs	r3, #1
 8002e36:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002e3a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002e3e:	d011      	beq.n	8002e64 <arm_std_f32+0xa8>
 8002e40:	edd0 7a01 	vldr	s15, [r0, #4]
 8002e44:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002e4e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002e52:	d007      	beq.n	8002e64 <arm_std_f32+0xa8>
 8002e54:	edd0 7a02 	vldr	s15, [r0, #8]
 8002e58:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002e5c:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002e60:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002e64:	ee07 1a90 	vmov	s15, r1
 8002e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002e70:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8002e74:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8002e78:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8002e7c:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8002e80:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8002e84:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002e88:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002e8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e94:	db0c      	blt.n	8002eb0 <arm_std_f32+0xf4>
 8002e96:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8002ea2:	d40e      	bmi.n	8002ec2 <arm_std_f32+0x106>
 8002ea4:	ed82 8a00 	vstr	s16, [r2]
 8002ea8:	b003      	add	sp, #12
 8002eaa:	ecbd 8b02 	vpop	{d8}
 8002eae:	bd30      	pop	{r4, r5, pc}
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	b003      	add	sp, #12
 8002eb6:	ecbd 8b02 	vpop	{d8}
 8002eba:	bd30      	pop	{r4, r5, pc}
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4770      	bx	lr
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	f003 f954 	bl	8006170 <sqrtf>
 8002ec8:	9a01      	ldr	r2, [sp, #4]
 8002eca:	e7eb      	b.n	8002ea4 <arm_std_f32+0xe8>
 8002ecc:	00000000 	.word	0x00000000

08002ed0 <arm_mean_f32>:
 8002ed0:	b430      	push	{r4, r5}
 8002ed2:	088d      	lsrs	r5, r1, #2
 8002ed4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002f48 <arm_mean_f32+0x78>
 8002ed8:	d018      	beq.n	8002f0c <arm_mean_f32+0x3c>
 8002eda:	f100 0310 	add.w	r3, r0, #16
 8002ede:	462c      	mov	r4, r5
 8002ee0:	ed53 5a04 	vldr	s11, [r3, #-16]
 8002ee4:	ed13 6a03 	vldr	s12, [r3, #-12]
 8002ee8:	ed53 6a02 	vldr	s13, [r3, #-8]
 8002eec:	ed13 7a01 	vldr	s14, [r3, #-4]
 8002ef0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002ef4:	3c01      	subs	r4, #1
 8002ef6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002efa:	f103 0310 	add.w	r3, r3, #16
 8002efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f06:	d1eb      	bne.n	8002ee0 <arm_mean_f32+0x10>
 8002f08:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8002f0c:	f011 0303 	ands.w	r3, r1, #3
 8002f10:	d00f      	beq.n	8002f32 <arm_mean_f32+0x62>
 8002f12:	ed90 7a00 	vldr	s14, [r0]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f1c:	d009      	beq.n	8002f32 <arm_mean_f32+0x62>
 8002f1e:	ed90 7a01 	vldr	s14, [r0, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f28:	bf1c      	itt	ne
 8002f2a:	ed90 7a02 	vldrne	s14, [r0, #8]
 8002f2e:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8002f32:	ee07 1a10 	vmov	s14, r1
 8002f36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002f3a:	bc30      	pop	{r4, r5}
 8002f3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f40:	edc2 6a00 	vstr	s13, [r2]
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	00000000 	.word	0x00000000

08002f4c <arm_conv_f32>:
 8002f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f50:	b08b      	sub	sp, #44	; 0x2c
 8002f52:	4299      	cmp	r1, r3
 8002f54:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002f56:	d205      	bcs.n	8002f64 <arm_conv_f32+0x18>
 8002f58:	4606      	mov	r6, r0
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4632      	mov	r2, r6
 8002f62:	4623      	mov	r3, r4
 8002f64:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8002f68:	3101      	adds	r1, #1
 8002f6a:	1ac9      	subs	r1, r1, r3
 8002f6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f70:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002f74:	9101      	str	r1, [sp, #4]
 8002f76:	1e59      	subs	r1, r3, #1
 8002f78:	eb02 070b 	add.w	r7, r2, fp
 8002f7c:	f000 8277 	beq.w	800346e <arm_conv_f32+0x522>
 8002f80:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8003240 <arm_conv_f32+0x2f4>
 8002f84:	f102 0904 	add.w	r9, r2, #4
 8002f88:	46aa      	mov	sl, r5
 8002f8a:	4680      	mov	r8, r0
 8002f8c:	2401      	movs	r4, #1
 8002f8e:	f014 0603 	ands.w	r6, r4, #3
 8002f92:	d01b      	beq.n	8002fcc <arm_conv_f32+0x80>
 8002f94:	ed92 7a00 	vldr	s14, [r2]
 8002f98:	edd8 6a00 	vldr	s13, [r8]
 8002f9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002fa0:	3e01      	subs	r6, #1
 8002fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fa6:	d011      	beq.n	8002fcc <arm_conv_f32+0x80>
 8002fa8:	ed12 7a01 	vldr	s14, [r2, #-4]
 8002fac:	edd8 6a01 	vldr	s13, [r8, #4]
 8002fb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002fb4:	2e01      	cmp	r6, #1
 8002fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fba:	d007      	beq.n	8002fcc <arm_conv_f32+0x80>
 8002fbc:	ed98 7a02 	vldr	s14, [r8, #8]
 8002fc0:	ed52 6a02 	vldr	s13, [r2, #-8]
 8002fc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fcc:	3401      	adds	r4, #1
 8002fce:	42a3      	cmp	r3, r4
 8002fd0:	ecea 7a01 	vstmia	sl!, {s15}
 8002fd4:	464a      	mov	r2, r9
 8002fd6:	d03a      	beq.n	800304e <arm_conv_f32+0x102>
 8002fd8:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8002fdc:	f000 824c 	beq.w	8003478 <arm_conv_f32+0x52c>
 8002fe0:	f100 0210 	add.w	r2, r0, #16
 8002fe4:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8002fe8:	eddf 7a95 	vldr	s15, [pc, #596]	; 8003240 <arm_conv_f32+0x2f4>
 8002fec:	eb02 0c08 	add.w	ip, r2, r8
 8002ff0:	f1a9 0610 	sub.w	r6, r9, #16
 8002ff4:	ed12 7a04 	vldr	s14, [r2, #-16]
 8002ff8:	edd6 3a04 	vldr	s7, [r6, #16]
 8002ffc:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003000:	ed96 4a03 	vldr	s8, [r6, #12]
 8003004:	ed52 6a02 	vldr	s13, [r2, #-8]
 8003008:	edd6 4a02 	vldr	s9, [r6, #8]
 800300c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8003010:	ed96 5a01 	vldr	s10, [r6, #4]
 8003014:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003018:	ee26 6a04 	vmul.f32	s12, s12, s8
 800301c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003020:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8003024:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003028:	ee65 6a85 	vmul.f32	s13, s11, s10
 800302c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003030:	3210      	adds	r2, #16
 8003032:	4594      	cmp	ip, r2
 8003034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003038:	f1a6 0610 	sub.w	r6, r6, #16
 800303c:	d1da      	bne.n	8002ff4 <arm_conv_f32+0xa8>
 800303e:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8003042:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 8003046:	4480      	add	r8, r0
 8003048:	f109 0904 	add.w	r9, r9, #4
 800304c:	e79f      	b.n	8002f8e <arm_conv_f32+0x42>
 800304e:	2b03      	cmp	r3, #3
 8003050:	445d      	add	r5, fp
 8003052:	f240 80e9 	bls.w	8003228 <arm_conv_f32+0x2dc>
 8003056:	9b01      	ldr	r3, [sp, #4]
 8003058:	089a      	lsrs	r2, r3, #2
 800305a:	9202      	str	r2, [sp, #8]
 800305c:	f000 8203 	beq.w	8003466 <arm_conv_f32+0x51a>
 8003060:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8003064:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	f004 0603 	and.w	r6, r4, #3
 800306e:	9203      	str	r2, [sp, #12]
 8003070:	f1a3 0a10 	sub.w	sl, r3, #16
 8003074:	f1a3 020c 	sub.w	r2, r3, #12
 8003078:	3b08      	subs	r3, #8
 800307a:	9204      	str	r2, [sp, #16]
 800307c:	9305      	str	r3, [sp, #20]
 800307e:	f106 39ff 	add.w	r9, r6, #4294967295
 8003082:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8003086:	9a03      	ldr	r2, [sp, #12]
 8003088:	f100 0c1c 	add.w	ip, r0, #28
 800308c:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8003090:	464c      	mov	r4, r9
 8003092:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8003096:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800309a:	f1a7 0310 	sub.w	r3, r7, #16
 800309e:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80030a2:	eb05 0b02 	add.w	fp, r5, r2
 80030a6:	461f      	mov	r7, r3
 80030a8:	3510      	adds	r5, #16
 80030aa:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8003240 <arm_conv_f32+0x2f4>
 80030ae:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 80030b2:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 80030b6:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80030ba:	eeb0 5a46 	vmov.f32	s10, s12
 80030be:	eef0 4a46 	vmov.f32	s9, s12
 80030c2:	eef0 5a46 	vmov.f32	s11, s12
 80030c6:	463a      	mov	r2, r7
 80030c8:	4663      	mov	r3, ip
 80030ca:	4641      	mov	r1, r8
 80030cc:	edd2 6a04 	vldr	s13, [r2, #16]
 80030d0:	ed13 0a04 	vldr	s0, [r3, #-16]
 80030d4:	ed92 7a03 	vldr	s14, [r2, #12]
 80030d8:	edd2 7a02 	vldr	s15, [r2, #8]
 80030dc:	edd2 0a01 	vldr	s1, [r2, #4]
 80030e0:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80030e4:	ee62 3a26 	vmul.f32	s7, s4, s13
 80030e8:	ee61 2a26 	vmul.f32	s5, s2, s13
 80030ec:	ed13 1a03 	vldr	s2, [r3, #-12]
 80030f0:	ee66 6a80 	vmul.f32	s13, s13, s0
 80030f4:	ee21 4a87 	vmul.f32	s8, s3, s14
 80030f8:	ee73 4a24 	vadd.f32	s9, s6, s9
 80030fc:	ee33 5a85 	vadd.f32	s10, s7, s10
 8003100:	ee22 3a07 	vmul.f32	s6, s4, s14
 8003104:	ed53 1a02 	vldr	s3, [r3, #-8]
 8003108:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800310c:	ee36 6a86 	vadd.f32	s12, s13, s12
 8003110:	ee60 3a07 	vmul.f32	s7, s0, s14
 8003114:	ee27 7a01 	vmul.f32	s14, s14, s2
 8003118:	ee33 3a24 	vadd.f32	s6, s6, s9
 800311c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003120:	ee74 2a22 	vadd.f32	s5, s8, s5
 8003124:	ee60 4a27 	vmul.f32	s9, s0, s15
 8003128:	ee22 4a27 	vmul.f32	s8, s4, s15
 800312c:	ee73 3a85 	vadd.f32	s7, s7, s10
 8003130:	ed13 2a01 	vldr	s4, [r3, #-4]
 8003134:	ee21 5a27 	vmul.f32	s10, s2, s15
 8003138:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800313c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003140:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003144:	ee34 4a22 	vadd.f32	s8, s8, s5
 8003148:	ee60 5a20 	vmul.f32	s11, s0, s1
 800314c:	ee21 3a20 	vmul.f32	s6, s2, s1
 8003150:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003154:	ee21 7aa0 	vmul.f32	s14, s3, s1
 8003158:	ee20 6a82 	vmul.f32	s12, s1, s4
 800315c:	3901      	subs	r1, #1
 800315e:	f1a2 0210 	sub.w	r2, r2, #16
 8003162:	ee75 5a84 	vadd.f32	s11, s11, s8
 8003166:	ee73 4a24 	vadd.f32	s9, s6, s9
 800316a:	ee37 5a05 	vadd.f32	s10, s14, s10
 800316e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003172:	f103 0310 	add.w	r3, r3, #16
 8003176:	d1a9      	bne.n	80030cc <arm_conv_f32+0x180>
 8003178:	eb0a 030c 	add.w	r3, sl, ip
 800317c:	2e00      	cmp	r6, #0
 800317e:	d042      	beq.n	8003206 <arm_conv_f32+0x2ba>
 8003180:	edde 7a00 	vldr	s15, [lr]
 8003184:	ed93 4a00 	vldr	s8, [r3]
 8003188:	ee61 6a27 	vmul.f32	s13, s2, s15
 800318c:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8003190:	ee22 7a27 	vmul.f32	s14, s4, s15
 8003194:	ee64 7a27 	vmul.f32	s15, s8, s15
 8003198:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800319c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80031a0:	ee35 5a07 	vadd.f32	s10, s10, s14
 80031a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80031a8:	eb09 030c 	add.w	r3, r9, ip
 80031ac:	b35c      	cbz	r4, 8003206 <arm_conv_f32+0x2ba>
 80031ae:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80031b2:	edd3 6a00 	vldr	s13, [r3]
 80031b6:	ee21 7aa7 	vmul.f32	s14, s3, s15
 80031ba:	ee22 3a27 	vmul.f32	s6, s4, s15
 80031be:	ee67 3a84 	vmul.f32	s7, s15, s8
 80031c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031c6:	2c01      	cmp	r4, #1
 80031c8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80031cc:	ee74 4a83 	vadd.f32	s9, s9, s6
 80031d0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80031d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80031d8:	eb00 030c 	add.w	r3, r0, ip
 80031dc:	d013      	beq.n	8003206 <arm_conv_f32+0x2ba>
 80031de:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80031e2:	edd3 3a00 	vldr	s7, [r3]
 80031e6:	ee62 7a07 	vmul.f32	s15, s4, s14
 80031ea:	ee27 4a04 	vmul.f32	s8, s14, s8
 80031ee:	ee67 6a26 	vmul.f32	s13, s14, s13
 80031f2:	ee27 7a23 	vmul.f32	s14, s14, s7
 80031f6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80031fa:	ee74 4a84 	vadd.f32	s9, s9, s8
 80031fe:	ee35 5a26 	vadd.f32	s10, s10, s13
 8003202:	ee36 6a07 	vadd.f32	s12, s12, s14
 8003206:	45ab      	cmp	fp, r5
 8003208:	ed45 5a04 	vstr	s11, [r5, #-16]
 800320c:	ed45 4a03 	vstr	s9, [r5, #-12]
 8003210:	ed05 5a02 	vstr	s10, [r5, #-8]
 8003214:	ed05 6a01 	vstr	s12, [r5, #-4]
 8003218:	f10c 0c10 	add.w	ip, ip, #16
 800321c:	f105 0310 	add.w	r3, r5, #16
 8003220:	f000 809e 	beq.w	8003360 <arm_conv_f32+0x414>
 8003224:	461d      	mov	r5, r3
 8003226:	e740      	b.n	80030aa <arm_conv_f32+0x15e>
 8003228:	9a01      	ldr	r2, [sp, #4]
 800322a:	46ac      	mov	ip, r5
 800322c:	2a00      	cmp	r2, #0
 800322e:	d037      	beq.n	80032a0 <arm_conv_f32+0x354>
 8003230:	9a01      	ldr	r2, [sp, #4]
 8003232:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8003240 <arm_conv_f32+0x2f4>
 8003236:	0096      	lsls	r6, r2, #2
 8003238:	eb05 0c06 	add.w	ip, r5, r6
 800323c:	4604      	mov	r4, r0
 800323e:	e021      	b.n	8003284 <arm_conv_f32+0x338>
 8003240:	00000000 	.word	0x00000000
 8003244:	edd7 7a00 	vldr	s15, [r7]
 8003248:	ecb2 7a01 	vldmia	r2!, {s14}
 800324c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003250:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003254:	b189      	cbz	r1, 800327a <arm_conv_f32+0x32e>
 8003256:	ed17 7a01 	vldr	s14, [r7, #-4]
 800325a:	edd4 6a01 	vldr	s13, [r4, #4]
 800325e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003262:	2b02      	cmp	r3, #2
 8003264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003268:	d007      	beq.n	800327a <arm_conv_f32+0x32e>
 800326a:	ed94 7a02 	vldr	s14, [r4, #8]
 800326e:	ed57 6a02 	vldr	s13, [r7, #-8]
 8003272:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003276:	ee77 7a87 	vadd.f32	s15, s15, s14
 800327a:	ece5 7a01 	vstmia	r5!, {s15}
 800327e:	4565      	cmp	r5, ip
 8003280:	4614      	mov	r4, r2
 8003282:	d00a      	beq.n	800329a <arm_conv_f32+0x34e>
 8003284:	4622      	mov	r2, r4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1dc      	bne.n	8003244 <arm_conv_f32+0x2f8>
 800328a:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8003240 <arm_conv_f32+0x2f4>
 800328e:	ece5 7a01 	vstmia	r5!, {s15}
 8003292:	1d22      	adds	r2, r4, #4
 8003294:	4565      	cmp	r5, ip
 8003296:	4614      	mov	r4, r2
 8003298:	d1f4      	bne.n	8003284 <arm_conv_f32+0x338>
 800329a:	4430      	add	r0, r6
 800329c:	2900      	cmp	r1, #0
 800329e:	d059      	beq.n	8003354 <arm_conv_f32+0x408>
 80032a0:	088d      	lsrs	r5, r1, #2
 80032a2:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8003240 <arm_conv_f32+0x2f4>
 80032a6:	d058      	beq.n	800335a <arm_conv_f32+0x40e>
 80032a8:	f100 0210 	add.w	r2, r0, #16
 80032ac:	f1a7 0310 	sub.w	r3, r7, #16
 80032b0:	462c      	mov	r4, r5
 80032b2:	ed52 6a04 	vldr	s13, [r2, #-16]
 80032b6:	edd3 3a04 	vldr	s7, [r3, #16]
 80032ba:	ed12 7a03 	vldr	s14, [r2, #-12]
 80032be:	ed93 4a03 	vldr	s8, [r3, #12]
 80032c2:	ed52 7a02 	vldr	s15, [r2, #-8]
 80032c6:	edd3 4a02 	vldr	s9, [r3, #8]
 80032ca:	ed12 6a01 	vldr	s12, [r2, #-4]
 80032ce:	ed93 5a01 	vldr	s10, [r3, #4]
 80032d2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80032d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80032da:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80032de:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80032e2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80032e6:	ee66 6a05 	vmul.f32	s13, s12, s10
 80032ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032ee:	3c01      	subs	r4, #1
 80032f0:	f102 0210 	add.w	r2, r2, #16
 80032f4:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80032f8:	f1a3 0310 	sub.w	r3, r3, #16
 80032fc:	d1d9      	bne.n	80032b2 <arm_conv_f32+0x366>
 80032fe:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8003302:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8003306:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800330a:	f011 0203 	ands.w	r2, r1, #3
 800330e:	d01b      	beq.n	8003348 <arm_conv_f32+0x3fc>
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ed95 7a00 	vldr	s14, [r5]
 8003318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800331c:	3a01      	subs	r2, #1
 800331e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003322:	d011      	beq.n	8003348 <arm_conv_f32+0x3fc>
 8003324:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003328:	ed95 7a01 	vldr	s14, [r5, #4]
 800332c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003330:	2a01      	cmp	r2, #1
 8003332:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003336:	d007      	beq.n	8003348 <arm_conv_f32+0x3fc>
 8003338:	edd5 7a02 	vldr	s15, [r5, #8]
 800333c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8003340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003344:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003348:	3901      	subs	r1, #1
 800334a:	ecec 5a01 	vstmia	ip!, {s11}
 800334e:	f100 0004 	add.w	r0, r0, #4
 8003352:	d1a5      	bne.n	80032a0 <arm_conv_f32+0x354>
 8003354:	b00b      	add	sp, #44	; 0x2c
 8003356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800335a:	463b      	mov	r3, r7
 800335c:	4605      	mov	r5, r0
 800335e:	e7d4      	b.n	800330a <arm_conv_f32+0x3be>
 8003360:	9b02      	ldr	r3, [sp, #8]
 8003362:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	9302      	str	r3, [sp, #8]
 800336a:	9b03      	ldr	r3, [sp, #12]
 800336c:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8003370:	4403      	add	r3, r0
 8003372:	465d      	mov	r5, fp
 8003374:	469e      	mov	lr, r3
 8003376:	9b01      	ldr	r3, [sp, #4]
 8003378:	f013 0c03 	ands.w	ip, r3, #3
 800337c:	d075      	beq.n	800346a <arm_conv_f32+0x51e>
 800337e:	9b02      	ldr	r3, [sp, #8]
 8003380:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8003384:	f004 0403 	and.w	r4, r4, #3
 8003388:	f104 3bff 	add.w	fp, r4, #4294967295
 800338c:	f103 0801 	add.w	r8, r3, #1
 8003390:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8003394:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8003398:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800339c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80033a0:	f1a7 0210 	sub.w	r2, r7, #16
 80033a4:	4618      	mov	r0, r3
 80033a6:	465b      	mov	r3, fp
 80033a8:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80033ac:	468b      	mov	fp, r1
 80033ae:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80033b2:	4621      	mov	r1, r4
 80033b4:	4617      	mov	r7, r2
 80033b6:	461c      	mov	r4, r3
 80033b8:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8003240 <arm_conv_f32+0x2f4>
 80033bc:	f10e 0210 	add.w	r2, lr, #16
 80033c0:	463b      	mov	r3, r7
 80033c2:	4656      	mov	r6, sl
 80033c4:	ed12 7a04 	vldr	s14, [r2, #-16]
 80033c8:	edd3 3a04 	vldr	s7, [r3, #16]
 80033cc:	ed12 6a03 	vldr	s12, [r2, #-12]
 80033d0:	ed93 4a03 	vldr	s8, [r3, #12]
 80033d4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80033d8:	edd3 4a02 	vldr	s9, [r3, #8]
 80033dc:	ed52 5a01 	vldr	s11, [r2, #-4]
 80033e0:	ed93 5a01 	vldr	s10, [r3, #4]
 80033e4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80033e8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80033ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f0:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80033f4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80033f8:	ee65 6a85 	vmul.f32	s13, s11, s10
 80033fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003400:	3e01      	subs	r6, #1
 8003402:	f102 0210 	add.w	r2, r2, #16
 8003406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340a:	f1a3 0310 	sub.w	r3, r3, #16
 800340e:	d1d9      	bne.n	80033c4 <arm_conv_f32+0x478>
 8003410:	4486      	add	lr, r0
 8003412:	b1d1      	cbz	r1, 800344a <arm_conv_f32+0x4fe>
 8003414:	ed99 7a00 	vldr	s14, [r9]
 8003418:	edde 6a00 	vldr	s13, [lr]
 800341c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003424:	b18c      	cbz	r4, 800344a <arm_conv_f32+0x4fe>
 8003426:	ed19 7a01 	vldr	s14, [r9, #-4]
 800342a:	edde 6a01 	vldr	s13, [lr, #4]
 800342e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003432:	2c01      	cmp	r4, #1
 8003434:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003438:	d007      	beq.n	800344a <arm_conv_f32+0x4fe>
 800343a:	ed9e 7a02 	vldr	s14, [lr, #8]
 800343e:	ed59 6a02 	vldr	s13, [r9, #-8]
 8003442:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003446:	ee77 7a87 	vadd.f32	s15, s15, s14
 800344a:	ece5 7a01 	vstmia	r5!, {s15}
 800344e:	4565      	cmp	r5, ip
 8003450:	46c6      	mov	lr, r8
 8003452:	f108 0804 	add.w	r8, r8, #4
 8003456:	d1af      	bne.n	80033b8 <arm_conv_f32+0x46c>
 8003458:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800345c:	4659      	mov	r1, fp
 800345e:	9b01      	ldr	r3, [sp, #4]
 8003460:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003464:	e71c      	b.n	80032a0 <arm_conv_f32+0x354>
 8003466:	4686      	mov	lr, r0
 8003468:	e785      	b.n	8003376 <arm_conv_f32+0x42a>
 800346a:	46ac      	mov	ip, r5
 800346c:	e7f7      	b.n	800345e <arm_conv_f32+0x512>
 800346e:	9a01      	ldr	r2, [sp, #4]
 8003470:	2a00      	cmp	r2, #0
 8003472:	f47f aedd 	bne.w	8003230 <arm_conv_f32+0x2e4>
 8003476:	e76d      	b.n	8003354 <arm_conv_f32+0x408>
 8003478:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8003240 <arm_conv_f32+0x2f4>
 800347c:	4680      	mov	r8, r0
 800347e:	e5e3      	b.n	8003048 <arm_conv_f32+0xfc>

08003480 <arm_sub_f32>:
 8003480:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8003484:	b4f0      	push	{r4, r5, r6, r7}
 8003486:	d033      	beq.n	80034f0 <arm_sub_f32+0x70>
 8003488:	f100 0610 	add.w	r6, r0, #16
 800348c:	f101 0510 	add.w	r5, r1, #16
 8003490:	f102 0410 	add.w	r4, r2, #16
 8003494:	4667      	mov	r7, ip
 8003496:	ed15 7a04 	vldr	s14, [r5, #-16]
 800349a:	ed56 7a04 	vldr	s15, [r6, #-16]
 800349e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034a2:	3f01      	subs	r7, #1
 80034a4:	ed44 7a04 	vstr	s15, [r4, #-16]
 80034a8:	ed15 7a03 	vldr	s14, [r5, #-12]
 80034ac:	ed56 7a03 	vldr	s15, [r6, #-12]
 80034b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034b4:	f106 0610 	add.w	r6, r6, #16
 80034b8:	ed44 7a03 	vstr	s15, [r4, #-12]
 80034bc:	ed15 7a02 	vldr	s14, [r5, #-8]
 80034c0:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80034c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034c8:	f105 0510 	add.w	r5, r5, #16
 80034cc:	ed44 7a02 	vstr	s15, [r4, #-8]
 80034d0:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80034d4:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80034d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034dc:	f104 0410 	add.w	r4, r4, #16
 80034e0:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80034e4:	d1d7      	bne.n	8003496 <arm_sub_f32+0x16>
 80034e6:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80034ea:	4420      	add	r0, r4
 80034ec:	4421      	add	r1, r4
 80034ee:	4422      	add	r2, r4
 80034f0:	f013 0303 	ands.w	r3, r3, #3
 80034f4:	d01b      	beq.n	800352e <arm_sub_f32+0xae>
 80034f6:	edd0 7a00 	vldr	s15, [r0]
 80034fa:	ed91 7a00 	vldr	s14, [r1]
 80034fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003502:	3b01      	subs	r3, #1
 8003504:	edc2 7a00 	vstr	s15, [r2]
 8003508:	d011      	beq.n	800352e <arm_sub_f32+0xae>
 800350a:	edd0 7a01 	vldr	s15, [r0, #4]
 800350e:	ed91 7a01 	vldr	s14, [r1, #4]
 8003512:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003516:	2b01      	cmp	r3, #1
 8003518:	edc2 7a01 	vstr	s15, [r2, #4]
 800351c:	d007      	beq.n	800352e <arm_sub_f32+0xae>
 800351e:	edd0 7a02 	vldr	s15, [r0, #8]
 8003522:	ed91 7a02 	vldr	s14, [r1, #8]
 8003526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800352a:	edc2 7a02 	vstr	s15, [r2, #8]
 800352e:	bcf0      	pop	{r4, r5, r6, r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop

08003534 <arm_mult_f32>:
 8003534:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8003538:	b4f0      	push	{r4, r5, r6, r7}
 800353a:	d033      	beq.n	80035a4 <arm_mult_f32+0x70>
 800353c:	f100 0610 	add.w	r6, r0, #16
 8003540:	f101 0510 	add.w	r5, r1, #16
 8003544:	f102 0410 	add.w	r4, r2, #16
 8003548:	4667      	mov	r7, ip
 800354a:	ed15 7a04 	vldr	s14, [r5, #-16]
 800354e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8003552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003556:	3f01      	subs	r7, #1
 8003558:	ed44 7a04 	vstr	s15, [r4, #-16]
 800355c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003560:	ed56 7a03 	vldr	s15, [r6, #-12]
 8003564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003568:	f106 0610 	add.w	r6, r6, #16
 800356c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8003570:	ed15 7a02 	vldr	s14, [r5, #-8]
 8003574:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8003578:	ee67 7a87 	vmul.f32	s15, s15, s14
 800357c:	f105 0510 	add.w	r5, r5, #16
 8003580:	ed44 7a02 	vstr	s15, [r4, #-8]
 8003584:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8003588:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800358c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003590:	f104 0410 	add.w	r4, r4, #16
 8003594:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8003598:	d1d7      	bne.n	800354a <arm_mult_f32+0x16>
 800359a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800359e:	4420      	add	r0, r4
 80035a0:	4421      	add	r1, r4
 80035a2:	4422      	add	r2, r4
 80035a4:	f013 0303 	ands.w	r3, r3, #3
 80035a8:	d01b      	beq.n	80035e2 <arm_mult_f32+0xae>
 80035aa:	edd1 7a00 	vldr	s15, [r1]
 80035ae:	ed90 7a00 	vldr	s14, [r0]
 80035b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035b6:	3b01      	subs	r3, #1
 80035b8:	edc2 7a00 	vstr	s15, [r2]
 80035bc:	d011      	beq.n	80035e2 <arm_mult_f32+0xae>
 80035be:	edd0 7a01 	vldr	s15, [r0, #4]
 80035c2:	ed91 7a01 	vldr	s14, [r1, #4]
 80035c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	edc2 7a01 	vstr	s15, [r2, #4]
 80035d0:	d007      	beq.n	80035e2 <arm_mult_f32+0xae>
 80035d2:	edd0 7a02 	vldr	s15, [r0, #8]
 80035d6:	ed91 7a02 	vldr	s14, [r1, #8]
 80035da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035de:	edc2 7a02 	vstr	s15, [r2, #8]
 80035e2:	bcf0      	pop	{r4, r5, r6, r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <arm_dot_prod_f32>:
 80035e8:	b4f0      	push	{r4, r5, r6, r7}
 80035ea:	0897      	lsrs	r7, r2, #2
 80035ec:	eddf 5a29 	vldr	s11, [pc, #164]	; 8003694 <arm_dot_prod_f32+0xac>
 80035f0:	d02d      	beq.n	800364e <arm_dot_prod_f32+0x66>
 80035f2:	f100 0510 	add.w	r5, r0, #16
 80035f6:	f101 0410 	add.w	r4, r1, #16
 80035fa:	463e      	mov	r6, r7
 80035fc:	ed55 6a04 	vldr	s13, [r5, #-16]
 8003600:	ed54 3a04 	vldr	s7, [r4, #-16]
 8003604:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003608:	ed14 4a03 	vldr	s8, [r4, #-12]
 800360c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8003610:	ed54 4a02 	vldr	s9, [r4, #-8]
 8003614:	ed15 6a01 	vldr	s12, [r5, #-4]
 8003618:	ed14 5a01 	vldr	s10, [r4, #-4]
 800361c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003620:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003624:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003628:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800362c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003630:	ee66 6a05 	vmul.f32	s13, s12, s10
 8003634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003638:	3e01      	subs	r6, #1
 800363a:	f105 0510 	add.w	r5, r5, #16
 800363e:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8003642:	f104 0410 	add.w	r4, r4, #16
 8003646:	d1d9      	bne.n	80035fc <arm_dot_prod_f32+0x14>
 8003648:	013f      	lsls	r7, r7, #4
 800364a:	4438      	add	r0, r7
 800364c:	4439      	add	r1, r7
 800364e:	f012 0203 	ands.w	r2, r2, #3
 8003652:	d01b      	beq.n	800368c <arm_dot_prod_f32+0xa4>
 8003654:	edd1 7a00 	vldr	s15, [r1]
 8003658:	ed90 7a00 	vldr	s14, [r0]
 800365c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003660:	3a01      	subs	r2, #1
 8003662:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003666:	d011      	beq.n	800368c <arm_dot_prod_f32+0xa4>
 8003668:	edd1 7a01 	vldr	s15, [r1, #4]
 800366c:	ed90 7a01 	vldr	s14, [r0, #4]
 8003670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003674:	2a01      	cmp	r2, #1
 8003676:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800367a:	d007      	beq.n	800368c <arm_dot_prod_f32+0xa4>
 800367c:	edd0 7a02 	vldr	s15, [r0, #8]
 8003680:	ed91 7a02 	vldr	s14, [r1, #8]
 8003684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003688:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800368c:	edc3 5a00 	vstr	s11, [r3]
 8003690:	bcf0      	pop	{r4, r5, r6, r7}
 8003692:	4770      	bx	lr
 8003694:	00000000 	.word	0x00000000

08003698 <__cvt>:
 8003698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800369c:	ec55 4b10 	vmov	r4, r5, d0
 80036a0:	2d00      	cmp	r5, #0
 80036a2:	460e      	mov	r6, r1
 80036a4:	4619      	mov	r1, r3
 80036a6:	462b      	mov	r3, r5
 80036a8:	bfbb      	ittet	lt
 80036aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80036ae:	461d      	movlt	r5, r3
 80036b0:	2300      	movge	r3, #0
 80036b2:	232d      	movlt	r3, #45	; 0x2d
 80036b4:	700b      	strb	r3, [r1, #0]
 80036b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80036bc:	4691      	mov	r9, r2
 80036be:	f023 0820 	bic.w	r8, r3, #32
 80036c2:	bfbc      	itt	lt
 80036c4:	4622      	movlt	r2, r4
 80036c6:	4614      	movlt	r4, r2
 80036c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80036cc:	d005      	beq.n	80036da <__cvt+0x42>
 80036ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80036d2:	d100      	bne.n	80036d6 <__cvt+0x3e>
 80036d4:	3601      	adds	r6, #1
 80036d6:	2102      	movs	r1, #2
 80036d8:	e000      	b.n	80036dc <__cvt+0x44>
 80036da:	2103      	movs	r1, #3
 80036dc:	ab03      	add	r3, sp, #12
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	ab02      	add	r3, sp, #8
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	ec45 4b10 	vmov	d0, r4, r5
 80036e8:	4653      	mov	r3, sl
 80036ea:	4632      	mov	r2, r6
 80036ec:	f000 fe68 	bl	80043c0 <_dtoa_r>
 80036f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80036f4:	4607      	mov	r7, r0
 80036f6:	d102      	bne.n	80036fe <__cvt+0x66>
 80036f8:	f019 0f01 	tst.w	r9, #1
 80036fc:	d022      	beq.n	8003744 <__cvt+0xac>
 80036fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003702:	eb07 0906 	add.w	r9, r7, r6
 8003706:	d110      	bne.n	800372a <__cvt+0x92>
 8003708:	783b      	ldrb	r3, [r7, #0]
 800370a:	2b30      	cmp	r3, #48	; 0x30
 800370c:	d10a      	bne.n	8003724 <__cvt+0x8c>
 800370e:	2200      	movs	r2, #0
 8003710:	2300      	movs	r3, #0
 8003712:	4620      	mov	r0, r4
 8003714:	4629      	mov	r1, r5
 8003716:	f7fd fa17 	bl	8000b48 <__aeabi_dcmpeq>
 800371a:	b918      	cbnz	r0, 8003724 <__cvt+0x8c>
 800371c:	f1c6 0601 	rsb	r6, r6, #1
 8003720:	f8ca 6000 	str.w	r6, [sl]
 8003724:	f8da 3000 	ldr.w	r3, [sl]
 8003728:	4499      	add	r9, r3
 800372a:	2200      	movs	r2, #0
 800372c:	2300      	movs	r3, #0
 800372e:	4620      	mov	r0, r4
 8003730:	4629      	mov	r1, r5
 8003732:	f7fd fa09 	bl	8000b48 <__aeabi_dcmpeq>
 8003736:	b108      	cbz	r0, 800373c <__cvt+0xa4>
 8003738:	f8cd 900c 	str.w	r9, [sp, #12]
 800373c:	2230      	movs	r2, #48	; 0x30
 800373e:	9b03      	ldr	r3, [sp, #12]
 8003740:	454b      	cmp	r3, r9
 8003742:	d307      	bcc.n	8003754 <__cvt+0xbc>
 8003744:	9b03      	ldr	r3, [sp, #12]
 8003746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003748:	1bdb      	subs	r3, r3, r7
 800374a:	4638      	mov	r0, r7
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	b004      	add	sp, #16
 8003750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003754:	1c59      	adds	r1, r3, #1
 8003756:	9103      	str	r1, [sp, #12]
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e7f0      	b.n	800373e <__cvt+0xa6>

0800375c <__exponent>:
 800375c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800375e:	4603      	mov	r3, r0
 8003760:	2900      	cmp	r1, #0
 8003762:	bfb8      	it	lt
 8003764:	4249      	neglt	r1, r1
 8003766:	f803 2b02 	strb.w	r2, [r3], #2
 800376a:	bfb4      	ite	lt
 800376c:	222d      	movlt	r2, #45	; 0x2d
 800376e:	222b      	movge	r2, #43	; 0x2b
 8003770:	2909      	cmp	r1, #9
 8003772:	7042      	strb	r2, [r0, #1]
 8003774:	dd2a      	ble.n	80037cc <__exponent+0x70>
 8003776:	f10d 0207 	add.w	r2, sp, #7
 800377a:	4617      	mov	r7, r2
 800377c:	260a      	movs	r6, #10
 800377e:	4694      	mov	ip, r2
 8003780:	fb91 f5f6 	sdiv	r5, r1, r6
 8003784:	fb06 1415 	mls	r4, r6, r5, r1
 8003788:	3430      	adds	r4, #48	; 0x30
 800378a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800378e:	460c      	mov	r4, r1
 8003790:	2c63      	cmp	r4, #99	; 0x63
 8003792:	f102 32ff 	add.w	r2, r2, #4294967295
 8003796:	4629      	mov	r1, r5
 8003798:	dcf1      	bgt.n	800377e <__exponent+0x22>
 800379a:	3130      	adds	r1, #48	; 0x30
 800379c:	f1ac 0402 	sub.w	r4, ip, #2
 80037a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80037a4:	1c41      	adds	r1, r0, #1
 80037a6:	4622      	mov	r2, r4
 80037a8:	42ba      	cmp	r2, r7
 80037aa:	d30a      	bcc.n	80037c2 <__exponent+0x66>
 80037ac:	f10d 0209 	add.w	r2, sp, #9
 80037b0:	eba2 020c 	sub.w	r2, r2, ip
 80037b4:	42bc      	cmp	r4, r7
 80037b6:	bf88      	it	hi
 80037b8:	2200      	movhi	r2, #0
 80037ba:	4413      	add	r3, r2
 80037bc:	1a18      	subs	r0, r3, r0
 80037be:	b003      	add	sp, #12
 80037c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80037c6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80037ca:	e7ed      	b.n	80037a8 <__exponent+0x4c>
 80037cc:	2330      	movs	r3, #48	; 0x30
 80037ce:	3130      	adds	r1, #48	; 0x30
 80037d0:	7083      	strb	r3, [r0, #2]
 80037d2:	70c1      	strb	r1, [r0, #3]
 80037d4:	1d03      	adds	r3, r0, #4
 80037d6:	e7f1      	b.n	80037bc <__exponent+0x60>

080037d8 <_printf_float>:
 80037d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037dc:	ed2d 8b02 	vpush	{d8}
 80037e0:	b08d      	sub	sp, #52	; 0x34
 80037e2:	460c      	mov	r4, r1
 80037e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80037e8:	4616      	mov	r6, r2
 80037ea:	461f      	mov	r7, r3
 80037ec:	4605      	mov	r5, r0
 80037ee:	f000 fcd9 	bl	80041a4 <_localeconv_r>
 80037f2:	f8d0 a000 	ldr.w	sl, [r0]
 80037f6:	4650      	mov	r0, sl
 80037f8:	f7fc fd7a 	bl	80002f0 <strlen>
 80037fc:	2300      	movs	r3, #0
 80037fe:	930a      	str	r3, [sp, #40]	; 0x28
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	9305      	str	r3, [sp, #20]
 8003804:	f8d8 3000 	ldr.w	r3, [r8]
 8003808:	f894 b018 	ldrb.w	fp, [r4, #24]
 800380c:	3307      	adds	r3, #7
 800380e:	f023 0307 	bic.w	r3, r3, #7
 8003812:	f103 0208 	add.w	r2, r3, #8
 8003816:	f8c8 2000 	str.w	r2, [r8]
 800381a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800381e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003822:	9307      	str	r3, [sp, #28]
 8003824:	f8cd 8018 	str.w	r8, [sp, #24]
 8003828:	ee08 0a10 	vmov	s16, r0
 800382c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003834:	4b9e      	ldr	r3, [pc, #632]	; (8003ab0 <_printf_float+0x2d8>)
 8003836:	f04f 32ff 	mov.w	r2, #4294967295
 800383a:	f7fd f9b7 	bl	8000bac <__aeabi_dcmpun>
 800383e:	bb88      	cbnz	r0, 80038a4 <_printf_float+0xcc>
 8003840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003844:	4b9a      	ldr	r3, [pc, #616]	; (8003ab0 <_printf_float+0x2d8>)
 8003846:	f04f 32ff 	mov.w	r2, #4294967295
 800384a:	f7fd f991 	bl	8000b70 <__aeabi_dcmple>
 800384e:	bb48      	cbnz	r0, 80038a4 <_printf_float+0xcc>
 8003850:	2200      	movs	r2, #0
 8003852:	2300      	movs	r3, #0
 8003854:	4640      	mov	r0, r8
 8003856:	4649      	mov	r1, r9
 8003858:	f7fd f980 	bl	8000b5c <__aeabi_dcmplt>
 800385c:	b110      	cbz	r0, 8003864 <_printf_float+0x8c>
 800385e:	232d      	movs	r3, #45	; 0x2d
 8003860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003864:	4a93      	ldr	r2, [pc, #588]	; (8003ab4 <_printf_float+0x2dc>)
 8003866:	4b94      	ldr	r3, [pc, #592]	; (8003ab8 <_printf_float+0x2e0>)
 8003868:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800386c:	bf94      	ite	ls
 800386e:	4690      	movls	r8, r2
 8003870:	4698      	movhi	r8, r3
 8003872:	2303      	movs	r3, #3
 8003874:	6123      	str	r3, [r4, #16]
 8003876:	9b05      	ldr	r3, [sp, #20]
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	f04f 0900 	mov.w	r9, #0
 8003882:	9700      	str	r7, [sp, #0]
 8003884:	4633      	mov	r3, r6
 8003886:	aa0b      	add	r2, sp, #44	; 0x2c
 8003888:	4621      	mov	r1, r4
 800388a:	4628      	mov	r0, r5
 800388c:	f000 f9da 	bl	8003c44 <_printf_common>
 8003890:	3001      	adds	r0, #1
 8003892:	f040 8090 	bne.w	80039b6 <_printf_float+0x1de>
 8003896:	f04f 30ff 	mov.w	r0, #4294967295
 800389a:	b00d      	add	sp, #52	; 0x34
 800389c:	ecbd 8b02 	vpop	{d8}
 80038a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	4640      	mov	r0, r8
 80038aa:	4649      	mov	r1, r9
 80038ac:	f7fd f97e 	bl	8000bac <__aeabi_dcmpun>
 80038b0:	b140      	cbz	r0, 80038c4 <_printf_float+0xec>
 80038b2:	464b      	mov	r3, r9
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bfbc      	itt	lt
 80038b8:	232d      	movlt	r3, #45	; 0x2d
 80038ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80038be:	4a7f      	ldr	r2, [pc, #508]	; (8003abc <_printf_float+0x2e4>)
 80038c0:	4b7f      	ldr	r3, [pc, #508]	; (8003ac0 <_printf_float+0x2e8>)
 80038c2:	e7d1      	b.n	8003868 <_printf_float+0x90>
 80038c4:	6863      	ldr	r3, [r4, #4]
 80038c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80038ca:	9206      	str	r2, [sp, #24]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	d13f      	bne.n	8003950 <_printf_float+0x178>
 80038d0:	2306      	movs	r3, #6
 80038d2:	6063      	str	r3, [r4, #4]
 80038d4:	9b05      	ldr	r3, [sp, #20]
 80038d6:	6861      	ldr	r1, [r4, #4]
 80038d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80038dc:	2300      	movs	r3, #0
 80038de:	9303      	str	r3, [sp, #12]
 80038e0:	ab0a      	add	r3, sp, #40	; 0x28
 80038e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80038e6:	ab09      	add	r3, sp, #36	; 0x24
 80038e8:	ec49 8b10 	vmov	d0, r8, r9
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	6022      	str	r2, [r4, #0]
 80038f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80038f4:	4628      	mov	r0, r5
 80038f6:	f7ff fecf 	bl	8003698 <__cvt>
 80038fa:	9b06      	ldr	r3, [sp, #24]
 80038fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038fe:	2b47      	cmp	r3, #71	; 0x47
 8003900:	4680      	mov	r8, r0
 8003902:	d108      	bne.n	8003916 <_printf_float+0x13e>
 8003904:	1cc8      	adds	r0, r1, #3
 8003906:	db02      	blt.n	800390e <_printf_float+0x136>
 8003908:	6863      	ldr	r3, [r4, #4]
 800390a:	4299      	cmp	r1, r3
 800390c:	dd41      	ble.n	8003992 <_printf_float+0x1ba>
 800390e:	f1ab 0302 	sub.w	r3, fp, #2
 8003912:	fa5f fb83 	uxtb.w	fp, r3
 8003916:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800391a:	d820      	bhi.n	800395e <_printf_float+0x186>
 800391c:	3901      	subs	r1, #1
 800391e:	465a      	mov	r2, fp
 8003920:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003924:	9109      	str	r1, [sp, #36]	; 0x24
 8003926:	f7ff ff19 	bl	800375c <__exponent>
 800392a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800392c:	1813      	adds	r3, r2, r0
 800392e:	2a01      	cmp	r2, #1
 8003930:	4681      	mov	r9, r0
 8003932:	6123      	str	r3, [r4, #16]
 8003934:	dc02      	bgt.n	800393c <_printf_float+0x164>
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	07d2      	lsls	r2, r2, #31
 800393a:	d501      	bpl.n	8003940 <_printf_float+0x168>
 800393c:	3301      	adds	r3, #1
 800393e:	6123      	str	r3, [r4, #16]
 8003940:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003944:	2b00      	cmp	r3, #0
 8003946:	d09c      	beq.n	8003882 <_printf_float+0xaa>
 8003948:	232d      	movs	r3, #45	; 0x2d
 800394a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800394e:	e798      	b.n	8003882 <_printf_float+0xaa>
 8003950:	9a06      	ldr	r2, [sp, #24]
 8003952:	2a47      	cmp	r2, #71	; 0x47
 8003954:	d1be      	bne.n	80038d4 <_printf_float+0xfc>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1bc      	bne.n	80038d4 <_printf_float+0xfc>
 800395a:	2301      	movs	r3, #1
 800395c:	e7b9      	b.n	80038d2 <_printf_float+0xfa>
 800395e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003962:	d118      	bne.n	8003996 <_printf_float+0x1be>
 8003964:	2900      	cmp	r1, #0
 8003966:	6863      	ldr	r3, [r4, #4]
 8003968:	dd0b      	ble.n	8003982 <_printf_float+0x1aa>
 800396a:	6121      	str	r1, [r4, #16]
 800396c:	b913      	cbnz	r3, 8003974 <_printf_float+0x19c>
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	07d0      	lsls	r0, r2, #31
 8003972:	d502      	bpl.n	800397a <_printf_float+0x1a2>
 8003974:	3301      	adds	r3, #1
 8003976:	440b      	add	r3, r1
 8003978:	6123      	str	r3, [r4, #16]
 800397a:	65a1      	str	r1, [r4, #88]	; 0x58
 800397c:	f04f 0900 	mov.w	r9, #0
 8003980:	e7de      	b.n	8003940 <_printf_float+0x168>
 8003982:	b913      	cbnz	r3, 800398a <_printf_float+0x1b2>
 8003984:	6822      	ldr	r2, [r4, #0]
 8003986:	07d2      	lsls	r2, r2, #31
 8003988:	d501      	bpl.n	800398e <_printf_float+0x1b6>
 800398a:	3302      	adds	r3, #2
 800398c:	e7f4      	b.n	8003978 <_printf_float+0x1a0>
 800398e:	2301      	movs	r3, #1
 8003990:	e7f2      	b.n	8003978 <_printf_float+0x1a0>
 8003992:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003998:	4299      	cmp	r1, r3
 800399a:	db05      	blt.n	80039a8 <_printf_float+0x1d0>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	6121      	str	r1, [r4, #16]
 80039a0:	07d8      	lsls	r0, r3, #31
 80039a2:	d5ea      	bpl.n	800397a <_printf_float+0x1a2>
 80039a4:	1c4b      	adds	r3, r1, #1
 80039a6:	e7e7      	b.n	8003978 <_printf_float+0x1a0>
 80039a8:	2900      	cmp	r1, #0
 80039aa:	bfd4      	ite	le
 80039ac:	f1c1 0202 	rsble	r2, r1, #2
 80039b0:	2201      	movgt	r2, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	e7e0      	b.n	8003978 <_printf_float+0x1a0>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	055a      	lsls	r2, r3, #21
 80039ba:	d407      	bmi.n	80039cc <_printf_float+0x1f4>
 80039bc:	6923      	ldr	r3, [r4, #16]
 80039be:	4642      	mov	r2, r8
 80039c0:	4631      	mov	r1, r6
 80039c2:	4628      	mov	r0, r5
 80039c4:	47b8      	blx	r7
 80039c6:	3001      	adds	r0, #1
 80039c8:	d12c      	bne.n	8003a24 <_printf_float+0x24c>
 80039ca:	e764      	b.n	8003896 <_printf_float+0xbe>
 80039cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80039d0:	f240 80e0 	bls.w	8003b94 <_printf_float+0x3bc>
 80039d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039d8:	2200      	movs	r2, #0
 80039da:	2300      	movs	r3, #0
 80039dc:	f7fd f8b4 	bl	8000b48 <__aeabi_dcmpeq>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d034      	beq.n	8003a4e <_printf_float+0x276>
 80039e4:	4a37      	ldr	r2, [pc, #220]	; (8003ac4 <_printf_float+0x2ec>)
 80039e6:	2301      	movs	r3, #1
 80039e8:	4631      	mov	r1, r6
 80039ea:	4628      	mov	r0, r5
 80039ec:	47b8      	blx	r7
 80039ee:	3001      	adds	r0, #1
 80039f0:	f43f af51 	beq.w	8003896 <_printf_float+0xbe>
 80039f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039f8:	429a      	cmp	r2, r3
 80039fa:	db02      	blt.n	8003a02 <_printf_float+0x22a>
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	07d8      	lsls	r0, r3, #31
 8003a00:	d510      	bpl.n	8003a24 <_printf_float+0x24c>
 8003a02:	ee18 3a10 	vmov	r3, s16
 8003a06:	4652      	mov	r2, sl
 8003a08:	4631      	mov	r1, r6
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	47b8      	blx	r7
 8003a0e:	3001      	adds	r0, #1
 8003a10:	f43f af41 	beq.w	8003896 <_printf_float+0xbe>
 8003a14:	f04f 0800 	mov.w	r8, #0
 8003a18:	f104 091a 	add.w	r9, r4, #26
 8003a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4543      	cmp	r3, r8
 8003a22:	dc09      	bgt.n	8003a38 <_printf_float+0x260>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	079b      	lsls	r3, r3, #30
 8003a28:	f100 8107 	bmi.w	8003c3a <_printf_float+0x462>
 8003a2c:	68e0      	ldr	r0, [r4, #12]
 8003a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a30:	4298      	cmp	r0, r3
 8003a32:	bfb8      	it	lt
 8003a34:	4618      	movlt	r0, r3
 8003a36:	e730      	b.n	800389a <_printf_float+0xc2>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	464a      	mov	r2, r9
 8003a3c:	4631      	mov	r1, r6
 8003a3e:	4628      	mov	r0, r5
 8003a40:	47b8      	blx	r7
 8003a42:	3001      	adds	r0, #1
 8003a44:	f43f af27 	beq.w	8003896 <_printf_float+0xbe>
 8003a48:	f108 0801 	add.w	r8, r8, #1
 8003a4c:	e7e6      	b.n	8003a1c <_printf_float+0x244>
 8003a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	dc39      	bgt.n	8003ac8 <_printf_float+0x2f0>
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <_printf_float+0x2ec>)
 8003a56:	2301      	movs	r3, #1
 8003a58:	4631      	mov	r1, r6
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	47b8      	blx	r7
 8003a5e:	3001      	adds	r0, #1
 8003a60:	f43f af19 	beq.w	8003896 <_printf_float+0xbe>
 8003a64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	d102      	bne.n	8003a72 <_printf_float+0x29a>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	07d9      	lsls	r1, r3, #31
 8003a70:	d5d8      	bpl.n	8003a24 <_printf_float+0x24c>
 8003a72:	ee18 3a10 	vmov	r3, s16
 8003a76:	4652      	mov	r2, sl
 8003a78:	4631      	mov	r1, r6
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	47b8      	blx	r7
 8003a7e:	3001      	adds	r0, #1
 8003a80:	f43f af09 	beq.w	8003896 <_printf_float+0xbe>
 8003a84:	f04f 0900 	mov.w	r9, #0
 8003a88:	f104 0a1a 	add.w	sl, r4, #26
 8003a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a8e:	425b      	negs	r3, r3
 8003a90:	454b      	cmp	r3, r9
 8003a92:	dc01      	bgt.n	8003a98 <_printf_float+0x2c0>
 8003a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a96:	e792      	b.n	80039be <_printf_float+0x1e6>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	4652      	mov	r2, sl
 8003a9c:	4631      	mov	r1, r6
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	47b8      	blx	r7
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	f43f aef7 	beq.w	8003896 <_printf_float+0xbe>
 8003aa8:	f109 0901 	add.w	r9, r9, #1
 8003aac:	e7ee      	b.n	8003a8c <_printf_float+0x2b4>
 8003aae:	bf00      	nop
 8003ab0:	7fefffff 	.word	0x7fefffff
 8003ab4:	08007138 	.word	0x08007138
 8003ab8:	0800713c 	.word	0x0800713c
 8003abc:	08007140 	.word	0x08007140
 8003ac0:	08007144 	.word	0x08007144
 8003ac4:	08007148 	.word	0x08007148
 8003ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003aca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003acc:	429a      	cmp	r2, r3
 8003ace:	bfa8      	it	ge
 8003ad0:	461a      	movge	r2, r3
 8003ad2:	2a00      	cmp	r2, #0
 8003ad4:	4691      	mov	r9, r2
 8003ad6:	dc37      	bgt.n	8003b48 <_printf_float+0x370>
 8003ad8:	f04f 0b00 	mov.w	fp, #0
 8003adc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ae0:	f104 021a 	add.w	r2, r4, #26
 8003ae4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ae6:	9305      	str	r3, [sp, #20]
 8003ae8:	eba3 0309 	sub.w	r3, r3, r9
 8003aec:	455b      	cmp	r3, fp
 8003aee:	dc33      	bgt.n	8003b58 <_printf_float+0x380>
 8003af0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003af4:	429a      	cmp	r2, r3
 8003af6:	db3b      	blt.n	8003b70 <_printf_float+0x398>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	07da      	lsls	r2, r3, #31
 8003afc:	d438      	bmi.n	8003b70 <_printf_float+0x398>
 8003afe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003b02:	eba2 0903 	sub.w	r9, r2, r3
 8003b06:	9b05      	ldr	r3, [sp, #20]
 8003b08:	1ad2      	subs	r2, r2, r3
 8003b0a:	4591      	cmp	r9, r2
 8003b0c:	bfa8      	it	ge
 8003b0e:	4691      	movge	r9, r2
 8003b10:	f1b9 0f00 	cmp.w	r9, #0
 8003b14:	dc35      	bgt.n	8003b82 <_printf_float+0x3aa>
 8003b16:	f04f 0800 	mov.w	r8, #0
 8003b1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b1e:	f104 0a1a 	add.w	sl, r4, #26
 8003b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	eba3 0309 	sub.w	r3, r3, r9
 8003b2c:	4543      	cmp	r3, r8
 8003b2e:	f77f af79 	ble.w	8003a24 <_printf_float+0x24c>
 8003b32:	2301      	movs	r3, #1
 8003b34:	4652      	mov	r2, sl
 8003b36:	4631      	mov	r1, r6
 8003b38:	4628      	mov	r0, r5
 8003b3a:	47b8      	blx	r7
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	f43f aeaa 	beq.w	8003896 <_printf_float+0xbe>
 8003b42:	f108 0801 	add.w	r8, r8, #1
 8003b46:	e7ec      	b.n	8003b22 <_printf_float+0x34a>
 8003b48:	4613      	mov	r3, r2
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	4628      	mov	r0, r5
 8003b50:	47b8      	blx	r7
 8003b52:	3001      	adds	r0, #1
 8003b54:	d1c0      	bne.n	8003ad8 <_printf_float+0x300>
 8003b56:	e69e      	b.n	8003896 <_printf_float+0xbe>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	9205      	str	r2, [sp, #20]
 8003b60:	47b8      	blx	r7
 8003b62:	3001      	adds	r0, #1
 8003b64:	f43f ae97 	beq.w	8003896 <_printf_float+0xbe>
 8003b68:	9a05      	ldr	r2, [sp, #20]
 8003b6a:	f10b 0b01 	add.w	fp, fp, #1
 8003b6e:	e7b9      	b.n	8003ae4 <_printf_float+0x30c>
 8003b70:	ee18 3a10 	vmov	r3, s16
 8003b74:	4652      	mov	r2, sl
 8003b76:	4631      	mov	r1, r6
 8003b78:	4628      	mov	r0, r5
 8003b7a:	47b8      	blx	r7
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d1be      	bne.n	8003afe <_printf_float+0x326>
 8003b80:	e689      	b.n	8003896 <_printf_float+0xbe>
 8003b82:	9a05      	ldr	r2, [sp, #20]
 8003b84:	464b      	mov	r3, r9
 8003b86:	4442      	add	r2, r8
 8003b88:	4631      	mov	r1, r6
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	47b8      	blx	r7
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d1c1      	bne.n	8003b16 <_printf_float+0x33e>
 8003b92:	e680      	b.n	8003896 <_printf_float+0xbe>
 8003b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b96:	2a01      	cmp	r2, #1
 8003b98:	dc01      	bgt.n	8003b9e <_printf_float+0x3c6>
 8003b9a:	07db      	lsls	r3, r3, #31
 8003b9c:	d53a      	bpl.n	8003c14 <_printf_float+0x43c>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	4631      	mov	r1, r6
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	47b8      	blx	r7
 8003ba8:	3001      	adds	r0, #1
 8003baa:	f43f ae74 	beq.w	8003896 <_printf_float+0xbe>
 8003bae:	ee18 3a10 	vmov	r3, s16
 8003bb2:	4652      	mov	r2, sl
 8003bb4:	4631      	mov	r1, r6
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	47b8      	blx	r7
 8003bba:	3001      	adds	r0, #1
 8003bbc:	f43f ae6b 	beq.w	8003896 <_printf_float+0xbe>
 8003bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003bcc:	f7fc ffbc 	bl	8000b48 <__aeabi_dcmpeq>
 8003bd0:	b9d8      	cbnz	r0, 8003c0a <_printf_float+0x432>
 8003bd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003bd6:	f108 0201 	add.w	r2, r8, #1
 8003bda:	4631      	mov	r1, r6
 8003bdc:	4628      	mov	r0, r5
 8003bde:	47b8      	blx	r7
 8003be0:	3001      	adds	r0, #1
 8003be2:	d10e      	bne.n	8003c02 <_printf_float+0x42a>
 8003be4:	e657      	b.n	8003896 <_printf_float+0xbe>
 8003be6:	2301      	movs	r3, #1
 8003be8:	4652      	mov	r2, sl
 8003bea:	4631      	mov	r1, r6
 8003bec:	4628      	mov	r0, r5
 8003bee:	47b8      	blx	r7
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	f43f ae50 	beq.w	8003896 <_printf_float+0xbe>
 8003bf6:	f108 0801 	add.w	r8, r8, #1
 8003bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	4543      	cmp	r3, r8
 8003c00:	dcf1      	bgt.n	8003be6 <_printf_float+0x40e>
 8003c02:	464b      	mov	r3, r9
 8003c04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c08:	e6da      	b.n	80039c0 <_printf_float+0x1e8>
 8003c0a:	f04f 0800 	mov.w	r8, #0
 8003c0e:	f104 0a1a 	add.w	sl, r4, #26
 8003c12:	e7f2      	b.n	8003bfa <_printf_float+0x422>
 8003c14:	2301      	movs	r3, #1
 8003c16:	4642      	mov	r2, r8
 8003c18:	e7df      	b.n	8003bda <_printf_float+0x402>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	464a      	mov	r2, r9
 8003c1e:	4631      	mov	r1, r6
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b8      	blx	r7
 8003c24:	3001      	adds	r0, #1
 8003c26:	f43f ae36 	beq.w	8003896 <_printf_float+0xbe>
 8003c2a:	f108 0801 	add.w	r8, r8, #1
 8003c2e:	68e3      	ldr	r3, [r4, #12]
 8003c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c32:	1a5b      	subs	r3, r3, r1
 8003c34:	4543      	cmp	r3, r8
 8003c36:	dcf0      	bgt.n	8003c1a <_printf_float+0x442>
 8003c38:	e6f8      	b.n	8003a2c <_printf_float+0x254>
 8003c3a:	f04f 0800 	mov.w	r8, #0
 8003c3e:	f104 0919 	add.w	r9, r4, #25
 8003c42:	e7f4      	b.n	8003c2e <_printf_float+0x456>

08003c44 <_printf_common>:
 8003c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	4616      	mov	r6, r2
 8003c4a:	4699      	mov	r9, r3
 8003c4c:	688a      	ldr	r2, [r1, #8]
 8003c4e:	690b      	ldr	r3, [r1, #16]
 8003c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c54:	4293      	cmp	r3, r2
 8003c56:	bfb8      	it	lt
 8003c58:	4613      	movlt	r3, r2
 8003c5a:	6033      	str	r3, [r6, #0]
 8003c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c60:	4607      	mov	r7, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	b10a      	cbz	r2, 8003c6a <_printf_common+0x26>
 8003c66:	3301      	adds	r3, #1
 8003c68:	6033      	str	r3, [r6, #0]
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	0699      	lsls	r1, r3, #26
 8003c6e:	bf42      	ittt	mi
 8003c70:	6833      	ldrmi	r3, [r6, #0]
 8003c72:	3302      	addmi	r3, #2
 8003c74:	6033      	strmi	r3, [r6, #0]
 8003c76:	6825      	ldr	r5, [r4, #0]
 8003c78:	f015 0506 	ands.w	r5, r5, #6
 8003c7c:	d106      	bne.n	8003c8c <_printf_common+0x48>
 8003c7e:	f104 0a19 	add.w	sl, r4, #25
 8003c82:	68e3      	ldr	r3, [r4, #12]
 8003c84:	6832      	ldr	r2, [r6, #0]
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	42ab      	cmp	r3, r5
 8003c8a:	dc26      	bgt.n	8003cda <_printf_common+0x96>
 8003c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c90:	1e13      	subs	r3, r2, #0
 8003c92:	6822      	ldr	r2, [r4, #0]
 8003c94:	bf18      	it	ne
 8003c96:	2301      	movne	r3, #1
 8003c98:	0692      	lsls	r2, r2, #26
 8003c9a:	d42b      	bmi.n	8003cf4 <_printf_common+0xb0>
 8003c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	47c0      	blx	r8
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d01e      	beq.n	8003ce8 <_printf_common+0xa4>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	6922      	ldr	r2, [r4, #16]
 8003cae:	f003 0306 	and.w	r3, r3, #6
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	bf02      	ittt	eq
 8003cb6:	68e5      	ldreq	r5, [r4, #12]
 8003cb8:	6833      	ldreq	r3, [r6, #0]
 8003cba:	1aed      	subeq	r5, r5, r3
 8003cbc:	68a3      	ldr	r3, [r4, #8]
 8003cbe:	bf0c      	ite	eq
 8003cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cc4:	2500      	movne	r5, #0
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	bfc4      	itt	gt
 8003cca:	1a9b      	subgt	r3, r3, r2
 8003ccc:	18ed      	addgt	r5, r5, r3
 8003cce:	2600      	movs	r6, #0
 8003cd0:	341a      	adds	r4, #26
 8003cd2:	42b5      	cmp	r5, r6
 8003cd4:	d11a      	bne.n	8003d0c <_printf_common+0xc8>
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	e008      	b.n	8003cec <_printf_common+0xa8>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4652      	mov	r2, sl
 8003cde:	4649      	mov	r1, r9
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	47c0      	blx	r8
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d103      	bne.n	8003cf0 <_printf_common+0xac>
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf0:	3501      	adds	r5, #1
 8003cf2:	e7c6      	b.n	8003c82 <_printf_common+0x3e>
 8003cf4:	18e1      	adds	r1, r4, r3
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	2030      	movs	r0, #48	; 0x30
 8003cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cfe:	4422      	add	r2, r4
 8003d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d08:	3302      	adds	r3, #2
 8003d0a:	e7c7      	b.n	8003c9c <_printf_common+0x58>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	4622      	mov	r2, r4
 8003d10:	4649      	mov	r1, r9
 8003d12:	4638      	mov	r0, r7
 8003d14:	47c0      	blx	r8
 8003d16:	3001      	adds	r0, #1
 8003d18:	d0e6      	beq.n	8003ce8 <_printf_common+0xa4>
 8003d1a:	3601      	adds	r6, #1
 8003d1c:	e7d9      	b.n	8003cd2 <_printf_common+0x8e>
	...

08003d20 <_printf_i>:
 8003d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d24:	7e0f      	ldrb	r7, [r1, #24]
 8003d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d28:	2f78      	cmp	r7, #120	; 0x78
 8003d2a:	4691      	mov	r9, r2
 8003d2c:	4680      	mov	r8, r0
 8003d2e:	460c      	mov	r4, r1
 8003d30:	469a      	mov	sl, r3
 8003d32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d36:	d807      	bhi.n	8003d48 <_printf_i+0x28>
 8003d38:	2f62      	cmp	r7, #98	; 0x62
 8003d3a:	d80a      	bhi.n	8003d52 <_printf_i+0x32>
 8003d3c:	2f00      	cmp	r7, #0
 8003d3e:	f000 80d4 	beq.w	8003eea <_printf_i+0x1ca>
 8003d42:	2f58      	cmp	r7, #88	; 0x58
 8003d44:	f000 80c0 	beq.w	8003ec8 <_printf_i+0x1a8>
 8003d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d50:	e03a      	b.n	8003dc8 <_printf_i+0xa8>
 8003d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d56:	2b15      	cmp	r3, #21
 8003d58:	d8f6      	bhi.n	8003d48 <_printf_i+0x28>
 8003d5a:	a101      	add	r1, pc, #4	; (adr r1, 8003d60 <_printf_i+0x40>)
 8003d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d60:	08003db9 	.word	0x08003db9
 8003d64:	08003dcd 	.word	0x08003dcd
 8003d68:	08003d49 	.word	0x08003d49
 8003d6c:	08003d49 	.word	0x08003d49
 8003d70:	08003d49 	.word	0x08003d49
 8003d74:	08003d49 	.word	0x08003d49
 8003d78:	08003dcd 	.word	0x08003dcd
 8003d7c:	08003d49 	.word	0x08003d49
 8003d80:	08003d49 	.word	0x08003d49
 8003d84:	08003d49 	.word	0x08003d49
 8003d88:	08003d49 	.word	0x08003d49
 8003d8c:	08003ed1 	.word	0x08003ed1
 8003d90:	08003df9 	.word	0x08003df9
 8003d94:	08003e8b 	.word	0x08003e8b
 8003d98:	08003d49 	.word	0x08003d49
 8003d9c:	08003d49 	.word	0x08003d49
 8003da0:	08003ef3 	.word	0x08003ef3
 8003da4:	08003d49 	.word	0x08003d49
 8003da8:	08003df9 	.word	0x08003df9
 8003dac:	08003d49 	.word	0x08003d49
 8003db0:	08003d49 	.word	0x08003d49
 8003db4:	08003e93 	.word	0x08003e93
 8003db8:	682b      	ldr	r3, [r5, #0]
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	602a      	str	r2, [r5, #0]
 8003dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e09f      	b.n	8003f0c <_printf_i+0x1ec>
 8003dcc:	6820      	ldr	r0, [r4, #0]
 8003dce:	682b      	ldr	r3, [r5, #0]
 8003dd0:	0607      	lsls	r7, r0, #24
 8003dd2:	f103 0104 	add.w	r1, r3, #4
 8003dd6:	6029      	str	r1, [r5, #0]
 8003dd8:	d501      	bpl.n	8003dde <_printf_i+0xbe>
 8003dda:	681e      	ldr	r6, [r3, #0]
 8003ddc:	e003      	b.n	8003de6 <_printf_i+0xc6>
 8003dde:	0646      	lsls	r6, r0, #25
 8003de0:	d5fb      	bpl.n	8003dda <_printf_i+0xba>
 8003de2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	da03      	bge.n	8003df2 <_printf_i+0xd2>
 8003dea:	232d      	movs	r3, #45	; 0x2d
 8003dec:	4276      	negs	r6, r6
 8003dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df2:	485a      	ldr	r0, [pc, #360]	; (8003f5c <_printf_i+0x23c>)
 8003df4:	230a      	movs	r3, #10
 8003df6:	e012      	b.n	8003e1e <_printf_i+0xfe>
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	6820      	ldr	r0, [r4, #0]
 8003dfc:	1d19      	adds	r1, r3, #4
 8003dfe:	6029      	str	r1, [r5, #0]
 8003e00:	0605      	lsls	r5, r0, #24
 8003e02:	d501      	bpl.n	8003e08 <_printf_i+0xe8>
 8003e04:	681e      	ldr	r6, [r3, #0]
 8003e06:	e002      	b.n	8003e0e <_printf_i+0xee>
 8003e08:	0641      	lsls	r1, r0, #25
 8003e0a:	d5fb      	bpl.n	8003e04 <_printf_i+0xe4>
 8003e0c:	881e      	ldrh	r6, [r3, #0]
 8003e0e:	4853      	ldr	r0, [pc, #332]	; (8003f5c <_printf_i+0x23c>)
 8003e10:	2f6f      	cmp	r7, #111	; 0x6f
 8003e12:	bf0c      	ite	eq
 8003e14:	2308      	moveq	r3, #8
 8003e16:	230a      	movne	r3, #10
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e1e:	6865      	ldr	r5, [r4, #4]
 8003e20:	60a5      	str	r5, [r4, #8]
 8003e22:	2d00      	cmp	r5, #0
 8003e24:	bfa2      	ittt	ge
 8003e26:	6821      	ldrge	r1, [r4, #0]
 8003e28:	f021 0104 	bicge.w	r1, r1, #4
 8003e2c:	6021      	strge	r1, [r4, #0]
 8003e2e:	b90e      	cbnz	r6, 8003e34 <_printf_i+0x114>
 8003e30:	2d00      	cmp	r5, #0
 8003e32:	d04b      	beq.n	8003ecc <_printf_i+0x1ac>
 8003e34:	4615      	mov	r5, r2
 8003e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8003e3e:	5dc7      	ldrb	r7, [r0, r7]
 8003e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e44:	4637      	mov	r7, r6
 8003e46:	42bb      	cmp	r3, r7
 8003e48:	460e      	mov	r6, r1
 8003e4a:	d9f4      	bls.n	8003e36 <_printf_i+0x116>
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d10b      	bne.n	8003e68 <_printf_i+0x148>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	07de      	lsls	r6, r3, #31
 8003e54:	d508      	bpl.n	8003e68 <_printf_i+0x148>
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	6861      	ldr	r1, [r4, #4]
 8003e5a:	4299      	cmp	r1, r3
 8003e5c:	bfde      	ittt	le
 8003e5e:	2330      	movle	r3, #48	; 0x30
 8003e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e68:	1b52      	subs	r2, r2, r5
 8003e6a:	6122      	str	r2, [r4, #16]
 8003e6c:	f8cd a000 	str.w	sl, [sp]
 8003e70:	464b      	mov	r3, r9
 8003e72:	aa03      	add	r2, sp, #12
 8003e74:	4621      	mov	r1, r4
 8003e76:	4640      	mov	r0, r8
 8003e78:	f7ff fee4 	bl	8003c44 <_printf_common>
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d14a      	bne.n	8003f16 <_printf_i+0x1f6>
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	b004      	add	sp, #16
 8003e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	f043 0320 	orr.w	r3, r3, #32
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	4833      	ldr	r0, [pc, #204]	; (8003f60 <_printf_i+0x240>)
 8003e94:	2778      	movs	r7, #120	; 0x78
 8003e96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	6829      	ldr	r1, [r5, #0]
 8003e9e:	061f      	lsls	r7, r3, #24
 8003ea0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ea4:	d402      	bmi.n	8003eac <_printf_i+0x18c>
 8003ea6:	065f      	lsls	r7, r3, #25
 8003ea8:	bf48      	it	mi
 8003eaa:	b2b6      	uxthmi	r6, r6
 8003eac:	07df      	lsls	r7, r3, #31
 8003eae:	bf48      	it	mi
 8003eb0:	f043 0320 	orrmi.w	r3, r3, #32
 8003eb4:	6029      	str	r1, [r5, #0]
 8003eb6:	bf48      	it	mi
 8003eb8:	6023      	strmi	r3, [r4, #0]
 8003eba:	b91e      	cbnz	r6, 8003ec4 <_printf_i+0x1a4>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	e7a7      	b.n	8003e18 <_printf_i+0xf8>
 8003ec8:	4824      	ldr	r0, [pc, #144]	; (8003f5c <_printf_i+0x23c>)
 8003eca:	e7e4      	b.n	8003e96 <_printf_i+0x176>
 8003ecc:	4615      	mov	r5, r2
 8003ece:	e7bd      	b.n	8003e4c <_printf_i+0x12c>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	6826      	ldr	r6, [r4, #0]
 8003ed4:	6961      	ldr	r1, [r4, #20]
 8003ed6:	1d18      	adds	r0, r3, #4
 8003ed8:	6028      	str	r0, [r5, #0]
 8003eda:	0635      	lsls	r5, r6, #24
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	d501      	bpl.n	8003ee4 <_printf_i+0x1c4>
 8003ee0:	6019      	str	r1, [r3, #0]
 8003ee2:	e002      	b.n	8003eea <_printf_i+0x1ca>
 8003ee4:	0670      	lsls	r0, r6, #25
 8003ee6:	d5fb      	bpl.n	8003ee0 <_printf_i+0x1c0>
 8003ee8:	8019      	strh	r1, [r3, #0]
 8003eea:	2300      	movs	r3, #0
 8003eec:	6123      	str	r3, [r4, #16]
 8003eee:	4615      	mov	r5, r2
 8003ef0:	e7bc      	b.n	8003e6c <_printf_i+0x14c>
 8003ef2:	682b      	ldr	r3, [r5, #0]
 8003ef4:	1d1a      	adds	r2, r3, #4
 8003ef6:	602a      	str	r2, [r5, #0]
 8003ef8:	681d      	ldr	r5, [r3, #0]
 8003efa:	6862      	ldr	r2, [r4, #4]
 8003efc:	2100      	movs	r1, #0
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7fc f9a6 	bl	8000250 <memchr>
 8003f04:	b108      	cbz	r0, 8003f0a <_printf_i+0x1ea>
 8003f06:	1b40      	subs	r0, r0, r5
 8003f08:	6060      	str	r0, [r4, #4]
 8003f0a:	6863      	ldr	r3, [r4, #4]
 8003f0c:	6123      	str	r3, [r4, #16]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f14:	e7aa      	b.n	8003e6c <_printf_i+0x14c>
 8003f16:	6923      	ldr	r3, [r4, #16]
 8003f18:	462a      	mov	r2, r5
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	47d0      	blx	sl
 8003f20:	3001      	adds	r0, #1
 8003f22:	d0ad      	beq.n	8003e80 <_printf_i+0x160>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	079b      	lsls	r3, r3, #30
 8003f28:	d413      	bmi.n	8003f52 <_printf_i+0x232>
 8003f2a:	68e0      	ldr	r0, [r4, #12]
 8003f2c:	9b03      	ldr	r3, [sp, #12]
 8003f2e:	4298      	cmp	r0, r3
 8003f30:	bfb8      	it	lt
 8003f32:	4618      	movlt	r0, r3
 8003f34:	e7a6      	b.n	8003e84 <_printf_i+0x164>
 8003f36:	2301      	movs	r3, #1
 8003f38:	4632      	mov	r2, r6
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	47d0      	blx	sl
 8003f40:	3001      	adds	r0, #1
 8003f42:	d09d      	beq.n	8003e80 <_printf_i+0x160>
 8003f44:	3501      	adds	r5, #1
 8003f46:	68e3      	ldr	r3, [r4, #12]
 8003f48:	9903      	ldr	r1, [sp, #12]
 8003f4a:	1a5b      	subs	r3, r3, r1
 8003f4c:	42ab      	cmp	r3, r5
 8003f4e:	dcf2      	bgt.n	8003f36 <_printf_i+0x216>
 8003f50:	e7eb      	b.n	8003f2a <_printf_i+0x20a>
 8003f52:	2500      	movs	r5, #0
 8003f54:	f104 0619 	add.w	r6, r4, #25
 8003f58:	e7f5      	b.n	8003f46 <_printf_i+0x226>
 8003f5a:	bf00      	nop
 8003f5c:	0800714a 	.word	0x0800714a
 8003f60:	0800715b 	.word	0x0800715b

08003f64 <std>:
 8003f64:	2300      	movs	r3, #0
 8003f66:	b510      	push	{r4, lr}
 8003f68:	4604      	mov	r4, r0
 8003f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8003f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f72:	6083      	str	r3, [r0, #8]
 8003f74:	8181      	strh	r1, [r0, #12]
 8003f76:	6643      	str	r3, [r0, #100]	; 0x64
 8003f78:	81c2      	strh	r2, [r0, #14]
 8003f7a:	6183      	str	r3, [r0, #24]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	2208      	movs	r2, #8
 8003f80:	305c      	adds	r0, #92	; 0x5c
 8003f82:	f000 f906 	bl	8004192 <memset>
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <std+0x58>)
 8003f88:	6263      	str	r3, [r4, #36]	; 0x24
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <std+0x5c>)
 8003f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <std+0x60>)
 8003f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <std+0x64>)
 8003f94:	6323      	str	r3, [r4, #48]	; 0x30
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <std+0x68>)
 8003f98:	6224      	str	r4, [r4, #32]
 8003f9a:	429c      	cmp	r4, r3
 8003f9c:	d006      	beq.n	8003fac <std+0x48>
 8003f9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003fa2:	4294      	cmp	r4, r2
 8003fa4:	d002      	beq.n	8003fac <std+0x48>
 8003fa6:	33d0      	adds	r3, #208	; 0xd0
 8003fa8:	429c      	cmp	r4, r3
 8003faa:	d105      	bne.n	8003fb8 <std+0x54>
 8003fac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb4:	f000 b96a 	b.w	800428c <__retarget_lock_init_recursive>
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	bf00      	nop
 8003fbc:	0800410d 	.word	0x0800410d
 8003fc0:	0800412f 	.word	0x0800412f
 8003fc4:	08004167 	.word	0x08004167
 8003fc8:	0800418b 	.word	0x0800418b
 8003fcc:	2000020c 	.word	0x2000020c

08003fd0 <stdio_exit_handler>:
 8003fd0:	4a02      	ldr	r2, [pc, #8]	; (8003fdc <stdio_exit_handler+0xc>)
 8003fd2:	4903      	ldr	r1, [pc, #12]	; (8003fe0 <stdio_exit_handler+0x10>)
 8003fd4:	4803      	ldr	r0, [pc, #12]	; (8003fe4 <stdio_exit_handler+0x14>)
 8003fd6:	f000 b869 	b.w	80040ac <_fwalk_sglue>
 8003fda:	bf00      	nop
 8003fdc:	2000000c 	.word	0x2000000c
 8003fe0:	08005c31 	.word	0x08005c31
 8003fe4:	20000018 	.word	0x20000018

08003fe8 <cleanup_stdio>:
 8003fe8:	6841      	ldr	r1, [r0, #4]
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <cleanup_stdio+0x34>)
 8003fec:	4299      	cmp	r1, r3
 8003fee:	b510      	push	{r4, lr}
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	d001      	beq.n	8003ff8 <cleanup_stdio+0x10>
 8003ff4:	f001 fe1c 	bl	8005c30 <_fflush_r>
 8003ff8:	68a1      	ldr	r1, [r4, #8]
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <cleanup_stdio+0x38>)
 8003ffc:	4299      	cmp	r1, r3
 8003ffe:	d002      	beq.n	8004006 <cleanup_stdio+0x1e>
 8004000:	4620      	mov	r0, r4
 8004002:	f001 fe15 	bl	8005c30 <_fflush_r>
 8004006:	68e1      	ldr	r1, [r4, #12]
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <cleanup_stdio+0x3c>)
 800400a:	4299      	cmp	r1, r3
 800400c:	d004      	beq.n	8004018 <cleanup_stdio+0x30>
 800400e:	4620      	mov	r0, r4
 8004010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004014:	f001 be0c 	b.w	8005c30 <_fflush_r>
 8004018:	bd10      	pop	{r4, pc}
 800401a:	bf00      	nop
 800401c:	2000020c 	.word	0x2000020c
 8004020:	20000274 	.word	0x20000274
 8004024:	200002dc 	.word	0x200002dc

08004028 <global_stdio_init.part.0>:
 8004028:	b510      	push	{r4, lr}
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <global_stdio_init.part.0+0x30>)
 800402c:	4c0b      	ldr	r4, [pc, #44]	; (800405c <global_stdio_init.part.0+0x34>)
 800402e:	4a0c      	ldr	r2, [pc, #48]	; (8004060 <global_stdio_init.part.0+0x38>)
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	4620      	mov	r0, r4
 8004034:	2200      	movs	r2, #0
 8004036:	2104      	movs	r1, #4
 8004038:	f7ff ff94 	bl	8003f64 <std>
 800403c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004040:	2201      	movs	r2, #1
 8004042:	2109      	movs	r1, #9
 8004044:	f7ff ff8e 	bl	8003f64 <std>
 8004048:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800404c:	2202      	movs	r2, #2
 800404e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004052:	2112      	movs	r1, #18
 8004054:	f7ff bf86 	b.w	8003f64 <std>
 8004058:	20000344 	.word	0x20000344
 800405c:	2000020c 	.word	0x2000020c
 8004060:	08003fd1 	.word	0x08003fd1

08004064 <__sfp_lock_acquire>:
 8004064:	4801      	ldr	r0, [pc, #4]	; (800406c <__sfp_lock_acquire+0x8>)
 8004066:	f000 b912 	b.w	800428e <__retarget_lock_acquire_recursive>
 800406a:	bf00      	nop
 800406c:	2000034d 	.word	0x2000034d

08004070 <__sfp_lock_release>:
 8004070:	4801      	ldr	r0, [pc, #4]	; (8004078 <__sfp_lock_release+0x8>)
 8004072:	f000 b90d 	b.w	8004290 <__retarget_lock_release_recursive>
 8004076:	bf00      	nop
 8004078:	2000034d 	.word	0x2000034d

0800407c <__sinit>:
 800407c:	b510      	push	{r4, lr}
 800407e:	4604      	mov	r4, r0
 8004080:	f7ff fff0 	bl	8004064 <__sfp_lock_acquire>
 8004084:	6a23      	ldr	r3, [r4, #32]
 8004086:	b11b      	cbz	r3, 8004090 <__sinit+0x14>
 8004088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800408c:	f7ff bff0 	b.w	8004070 <__sfp_lock_release>
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <__sinit+0x28>)
 8004092:	6223      	str	r3, [r4, #32]
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <__sinit+0x2c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f5      	bne.n	8004088 <__sinit+0xc>
 800409c:	f7ff ffc4 	bl	8004028 <global_stdio_init.part.0>
 80040a0:	e7f2      	b.n	8004088 <__sinit+0xc>
 80040a2:	bf00      	nop
 80040a4:	08003fe9 	.word	0x08003fe9
 80040a8:	20000344 	.word	0x20000344

080040ac <_fwalk_sglue>:
 80040ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b0:	4607      	mov	r7, r0
 80040b2:	4688      	mov	r8, r1
 80040b4:	4614      	mov	r4, r2
 80040b6:	2600      	movs	r6, #0
 80040b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040bc:	f1b9 0901 	subs.w	r9, r9, #1
 80040c0:	d505      	bpl.n	80040ce <_fwalk_sglue+0x22>
 80040c2:	6824      	ldr	r4, [r4, #0]
 80040c4:	2c00      	cmp	r4, #0
 80040c6:	d1f7      	bne.n	80040b8 <_fwalk_sglue+0xc>
 80040c8:	4630      	mov	r0, r6
 80040ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ce:	89ab      	ldrh	r3, [r5, #12]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d907      	bls.n	80040e4 <_fwalk_sglue+0x38>
 80040d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040d8:	3301      	adds	r3, #1
 80040da:	d003      	beq.n	80040e4 <_fwalk_sglue+0x38>
 80040dc:	4629      	mov	r1, r5
 80040de:	4638      	mov	r0, r7
 80040e0:	47c0      	blx	r8
 80040e2:	4306      	orrs	r6, r0
 80040e4:	3568      	adds	r5, #104	; 0x68
 80040e6:	e7e9      	b.n	80040bc <_fwalk_sglue+0x10>

080040e8 <iprintf>:
 80040e8:	b40f      	push	{r0, r1, r2, r3}
 80040ea:	b507      	push	{r0, r1, r2, lr}
 80040ec:	4906      	ldr	r1, [pc, #24]	; (8004108 <iprintf+0x20>)
 80040ee:	ab04      	add	r3, sp, #16
 80040f0:	6808      	ldr	r0, [r1, #0]
 80040f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80040f6:	6881      	ldr	r1, [r0, #8]
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	f001 fbf9 	bl	80058f0 <_vfiprintf_r>
 80040fe:	b003      	add	sp, #12
 8004100:	f85d eb04 	ldr.w	lr, [sp], #4
 8004104:	b004      	add	sp, #16
 8004106:	4770      	bx	lr
 8004108:	20000064 	.word	0x20000064

0800410c <__sread>:
 800410c:	b510      	push	{r4, lr}
 800410e:	460c      	mov	r4, r1
 8004110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004114:	f000 f86c 	bl	80041f0 <_read_r>
 8004118:	2800      	cmp	r0, #0
 800411a:	bfab      	itete	ge
 800411c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800411e:	89a3      	ldrhlt	r3, [r4, #12]
 8004120:	181b      	addge	r3, r3, r0
 8004122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004126:	bfac      	ite	ge
 8004128:	6563      	strge	r3, [r4, #84]	; 0x54
 800412a:	81a3      	strhlt	r3, [r4, #12]
 800412c:	bd10      	pop	{r4, pc}

0800412e <__swrite>:
 800412e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004132:	461f      	mov	r7, r3
 8004134:	898b      	ldrh	r3, [r1, #12]
 8004136:	05db      	lsls	r3, r3, #23
 8004138:	4605      	mov	r5, r0
 800413a:	460c      	mov	r4, r1
 800413c:	4616      	mov	r6, r2
 800413e:	d505      	bpl.n	800414c <__swrite+0x1e>
 8004140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004144:	2302      	movs	r3, #2
 8004146:	2200      	movs	r2, #0
 8004148:	f000 f840 	bl	80041cc <_lseek_r>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004156:	81a3      	strh	r3, [r4, #12]
 8004158:	4632      	mov	r2, r6
 800415a:	463b      	mov	r3, r7
 800415c:	4628      	mov	r0, r5
 800415e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004162:	f000 b857 	b.w	8004214 <_write_r>

08004166 <__sseek>:
 8004166:	b510      	push	{r4, lr}
 8004168:	460c      	mov	r4, r1
 800416a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800416e:	f000 f82d 	bl	80041cc <_lseek_r>
 8004172:	1c43      	adds	r3, r0, #1
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	bf15      	itete	ne
 8004178:	6560      	strne	r0, [r4, #84]	; 0x54
 800417a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800417e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004182:	81a3      	strheq	r3, [r4, #12]
 8004184:	bf18      	it	ne
 8004186:	81a3      	strhne	r3, [r4, #12]
 8004188:	bd10      	pop	{r4, pc}

0800418a <__sclose>:
 800418a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418e:	f000 b80d 	b.w	80041ac <_close_r>

08004192 <memset>:
 8004192:	4402      	add	r2, r0
 8004194:	4603      	mov	r3, r0
 8004196:	4293      	cmp	r3, r2
 8004198:	d100      	bne.n	800419c <memset+0xa>
 800419a:	4770      	bx	lr
 800419c:	f803 1b01 	strb.w	r1, [r3], #1
 80041a0:	e7f9      	b.n	8004196 <memset+0x4>
	...

080041a4 <_localeconv_r>:
 80041a4:	4800      	ldr	r0, [pc, #0]	; (80041a8 <_localeconv_r+0x4>)
 80041a6:	4770      	bx	lr
 80041a8:	20000158 	.word	0x20000158

080041ac <_close_r>:
 80041ac:	b538      	push	{r3, r4, r5, lr}
 80041ae:	4d06      	ldr	r5, [pc, #24]	; (80041c8 <_close_r+0x1c>)
 80041b0:	2300      	movs	r3, #0
 80041b2:	4604      	mov	r4, r0
 80041b4:	4608      	mov	r0, r1
 80041b6:	602b      	str	r3, [r5, #0]
 80041b8:	f7fd fbb1 	bl	800191e <_close>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d102      	bne.n	80041c6 <_close_r+0x1a>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	b103      	cbz	r3, 80041c6 <_close_r+0x1a>
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	20000348 	.word	0x20000348

080041cc <_lseek_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d07      	ldr	r5, [pc, #28]	; (80041ec <_lseek_r+0x20>)
 80041d0:	4604      	mov	r4, r0
 80041d2:	4608      	mov	r0, r1
 80041d4:	4611      	mov	r1, r2
 80041d6:	2200      	movs	r2, #0
 80041d8:	602a      	str	r2, [r5, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	f7fd fbc6 	bl	800196c <_lseek>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <_lseek_r+0x1e>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	b103      	cbz	r3, 80041ea <_lseek_r+0x1e>
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	20000348 	.word	0x20000348

080041f0 <_read_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4d07      	ldr	r5, [pc, #28]	; (8004210 <_read_r+0x20>)
 80041f4:	4604      	mov	r4, r0
 80041f6:	4608      	mov	r0, r1
 80041f8:	4611      	mov	r1, r2
 80041fa:	2200      	movs	r2, #0
 80041fc:	602a      	str	r2, [r5, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	f7fd fb54 	bl	80018ac <_read>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_read_r+0x1e>
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	b103      	cbz	r3, 800420e <_read_r+0x1e>
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	20000348 	.word	0x20000348

08004214 <_write_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4d07      	ldr	r5, [pc, #28]	; (8004234 <_write_r+0x20>)
 8004218:	4604      	mov	r4, r0
 800421a:	4608      	mov	r0, r1
 800421c:	4611      	mov	r1, r2
 800421e:	2200      	movs	r2, #0
 8004220:	602a      	str	r2, [r5, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f7fd fb5f 	bl	80018e6 <_write>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_write_r+0x1e>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	b103      	cbz	r3, 8004232 <_write_r+0x1e>
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	20000348 	.word	0x20000348

08004238 <__errno>:
 8004238:	4b01      	ldr	r3, [pc, #4]	; (8004240 <__errno+0x8>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000064 	.word	0x20000064

08004244 <__libc_init_array>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4d0d      	ldr	r5, [pc, #52]	; (800427c <__libc_init_array+0x38>)
 8004248:	4c0d      	ldr	r4, [pc, #52]	; (8004280 <__libc_init_array+0x3c>)
 800424a:	1b64      	subs	r4, r4, r5
 800424c:	10a4      	asrs	r4, r4, #2
 800424e:	2600      	movs	r6, #0
 8004250:	42a6      	cmp	r6, r4
 8004252:	d109      	bne.n	8004268 <__libc_init_array+0x24>
 8004254:	4d0b      	ldr	r5, [pc, #44]	; (8004284 <__libc_init_array+0x40>)
 8004256:	4c0c      	ldr	r4, [pc, #48]	; (8004288 <__libc_init_array+0x44>)
 8004258:	f002 fe74 	bl	8006f44 <_init>
 800425c:	1b64      	subs	r4, r4, r5
 800425e:	10a4      	asrs	r4, r4, #2
 8004260:	2600      	movs	r6, #0
 8004262:	42a6      	cmp	r6, r4
 8004264:	d105      	bne.n	8004272 <__libc_init_array+0x2e>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	f855 3b04 	ldr.w	r3, [r5], #4
 800426c:	4798      	blx	r3
 800426e:	3601      	adds	r6, #1
 8004270:	e7ee      	b.n	8004250 <__libc_init_array+0xc>
 8004272:	f855 3b04 	ldr.w	r3, [r5], #4
 8004276:	4798      	blx	r3
 8004278:	3601      	adds	r6, #1
 800427a:	e7f2      	b.n	8004262 <__libc_init_array+0x1e>
 800427c:	080074e0 	.word	0x080074e0
 8004280:	080074e0 	.word	0x080074e0
 8004284:	080074e0 	.word	0x080074e0
 8004288:	080074e4 	.word	0x080074e4

0800428c <__retarget_lock_init_recursive>:
 800428c:	4770      	bx	lr

0800428e <__retarget_lock_acquire_recursive>:
 800428e:	4770      	bx	lr

08004290 <__retarget_lock_release_recursive>:
 8004290:	4770      	bx	lr

08004292 <memcpy>:
 8004292:	440a      	add	r2, r1
 8004294:	4291      	cmp	r1, r2
 8004296:	f100 33ff 	add.w	r3, r0, #4294967295
 800429a:	d100      	bne.n	800429e <memcpy+0xc>
 800429c:	4770      	bx	lr
 800429e:	b510      	push	{r4, lr}
 80042a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042a8:	4291      	cmp	r1, r2
 80042aa:	d1f9      	bne.n	80042a0 <memcpy+0xe>
 80042ac:	bd10      	pop	{r4, pc}

080042ae <quorem>:
 80042ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b2:	6903      	ldr	r3, [r0, #16]
 80042b4:	690c      	ldr	r4, [r1, #16]
 80042b6:	42a3      	cmp	r3, r4
 80042b8:	4607      	mov	r7, r0
 80042ba:	db7e      	blt.n	80043ba <quorem+0x10c>
 80042bc:	3c01      	subs	r4, #1
 80042be:	f101 0814 	add.w	r8, r1, #20
 80042c2:	f100 0514 	add.w	r5, r0, #20
 80042c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042d4:	3301      	adds	r3, #1
 80042d6:	429a      	cmp	r2, r3
 80042d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80042e4:	d331      	bcc.n	800434a <quorem+0x9c>
 80042e6:	f04f 0e00 	mov.w	lr, #0
 80042ea:	4640      	mov	r0, r8
 80042ec:	46ac      	mov	ip, r5
 80042ee:	46f2      	mov	sl, lr
 80042f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80042f4:	b293      	uxth	r3, r2
 80042f6:	fb06 e303 	mla	r3, r6, r3, lr
 80042fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042fe:	0c1a      	lsrs	r2, r3, #16
 8004300:	b29b      	uxth	r3, r3
 8004302:	ebaa 0303 	sub.w	r3, sl, r3
 8004306:	f8dc a000 	ldr.w	sl, [ip]
 800430a:	fa13 f38a 	uxtah	r3, r3, sl
 800430e:	fb06 220e 	mla	r2, r6, lr, r2
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	9b00      	ldr	r3, [sp, #0]
 8004316:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800431a:	b292      	uxth	r2, r2
 800431c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004324:	f8bd 3000 	ldrh.w	r3, [sp]
 8004328:	4581      	cmp	r9, r0
 800432a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800432e:	f84c 3b04 	str.w	r3, [ip], #4
 8004332:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004336:	d2db      	bcs.n	80042f0 <quorem+0x42>
 8004338:	f855 300b 	ldr.w	r3, [r5, fp]
 800433c:	b92b      	cbnz	r3, 800434a <quorem+0x9c>
 800433e:	9b01      	ldr	r3, [sp, #4]
 8004340:	3b04      	subs	r3, #4
 8004342:	429d      	cmp	r5, r3
 8004344:	461a      	mov	r2, r3
 8004346:	d32c      	bcc.n	80043a2 <quorem+0xf4>
 8004348:	613c      	str	r4, [r7, #16]
 800434a:	4638      	mov	r0, r7
 800434c:	f001 f9a6 	bl	800569c <__mcmp>
 8004350:	2800      	cmp	r0, #0
 8004352:	db22      	blt.n	800439a <quorem+0xec>
 8004354:	3601      	adds	r6, #1
 8004356:	4629      	mov	r1, r5
 8004358:	2000      	movs	r0, #0
 800435a:	f858 2b04 	ldr.w	r2, [r8], #4
 800435e:	f8d1 c000 	ldr.w	ip, [r1]
 8004362:	b293      	uxth	r3, r2
 8004364:	1ac3      	subs	r3, r0, r3
 8004366:	0c12      	lsrs	r2, r2, #16
 8004368:	fa13 f38c 	uxtah	r3, r3, ip
 800436c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004370:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004374:	b29b      	uxth	r3, r3
 8004376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800437a:	45c1      	cmp	r9, r8
 800437c:	f841 3b04 	str.w	r3, [r1], #4
 8004380:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004384:	d2e9      	bcs.n	800435a <quorem+0xac>
 8004386:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800438a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800438e:	b922      	cbnz	r2, 800439a <quorem+0xec>
 8004390:	3b04      	subs	r3, #4
 8004392:	429d      	cmp	r5, r3
 8004394:	461a      	mov	r2, r3
 8004396:	d30a      	bcc.n	80043ae <quorem+0x100>
 8004398:	613c      	str	r4, [r7, #16]
 800439a:	4630      	mov	r0, r6
 800439c:	b003      	add	sp, #12
 800439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	3b04      	subs	r3, #4
 80043a6:	2a00      	cmp	r2, #0
 80043a8:	d1ce      	bne.n	8004348 <quorem+0x9a>
 80043aa:	3c01      	subs	r4, #1
 80043ac:	e7c9      	b.n	8004342 <quorem+0x94>
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	3b04      	subs	r3, #4
 80043b2:	2a00      	cmp	r2, #0
 80043b4:	d1f0      	bne.n	8004398 <quorem+0xea>
 80043b6:	3c01      	subs	r4, #1
 80043b8:	e7eb      	b.n	8004392 <quorem+0xe4>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e7ee      	b.n	800439c <quorem+0xee>
	...

080043c0 <_dtoa_r>:
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	ed2d 8b04 	vpush	{d8-d9}
 80043c8:	69c5      	ldr	r5, [r0, #28]
 80043ca:	b093      	sub	sp, #76	; 0x4c
 80043cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80043d0:	ec57 6b10 	vmov	r6, r7, d0
 80043d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80043d8:	9107      	str	r1, [sp, #28]
 80043da:	4604      	mov	r4, r0
 80043dc:	920a      	str	r2, [sp, #40]	; 0x28
 80043de:	930d      	str	r3, [sp, #52]	; 0x34
 80043e0:	b975      	cbnz	r5, 8004400 <_dtoa_r+0x40>
 80043e2:	2010      	movs	r0, #16
 80043e4:	f000 fe2a 	bl	800503c <malloc>
 80043e8:	4602      	mov	r2, r0
 80043ea:	61e0      	str	r0, [r4, #28]
 80043ec:	b920      	cbnz	r0, 80043f8 <_dtoa_r+0x38>
 80043ee:	4bae      	ldr	r3, [pc, #696]	; (80046a8 <_dtoa_r+0x2e8>)
 80043f0:	21ef      	movs	r1, #239	; 0xef
 80043f2:	48ae      	ldr	r0, [pc, #696]	; (80046ac <_dtoa_r+0x2ec>)
 80043f4:	f001 fcea 	bl	8005dcc <__assert_func>
 80043f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043fc:	6005      	str	r5, [r0, #0]
 80043fe:	60c5      	str	r5, [r0, #12]
 8004400:	69e3      	ldr	r3, [r4, #28]
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	b151      	cbz	r1, 800441c <_dtoa_r+0x5c>
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	604a      	str	r2, [r1, #4]
 800440a:	2301      	movs	r3, #1
 800440c:	4093      	lsls	r3, r2
 800440e:	608b      	str	r3, [r1, #8]
 8004410:	4620      	mov	r0, r4
 8004412:	f000 ff07 	bl	8005224 <_Bfree>
 8004416:	69e3      	ldr	r3, [r4, #28]
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	1e3b      	subs	r3, r7, #0
 800441e:	bfbb      	ittet	lt
 8004420:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004424:	9303      	strlt	r3, [sp, #12]
 8004426:	2300      	movge	r3, #0
 8004428:	2201      	movlt	r2, #1
 800442a:	bfac      	ite	ge
 800442c:	f8c8 3000 	strge.w	r3, [r8]
 8004430:	f8c8 2000 	strlt.w	r2, [r8]
 8004434:	4b9e      	ldr	r3, [pc, #632]	; (80046b0 <_dtoa_r+0x2f0>)
 8004436:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800443a:	ea33 0308 	bics.w	r3, r3, r8
 800443e:	d11b      	bne.n	8004478 <_dtoa_r+0xb8>
 8004440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004442:	f242 730f 	movw	r3, #9999	; 0x270f
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800444c:	4333      	orrs	r3, r6
 800444e:	f000 8593 	beq.w	8004f78 <_dtoa_r+0xbb8>
 8004452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004454:	b963      	cbnz	r3, 8004470 <_dtoa_r+0xb0>
 8004456:	4b97      	ldr	r3, [pc, #604]	; (80046b4 <_dtoa_r+0x2f4>)
 8004458:	e027      	b.n	80044aa <_dtoa_r+0xea>
 800445a:	4b97      	ldr	r3, [pc, #604]	; (80046b8 <_dtoa_r+0x2f8>)
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	3308      	adds	r3, #8
 8004460:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	9800      	ldr	r0, [sp, #0]
 8004466:	b013      	add	sp, #76	; 0x4c
 8004468:	ecbd 8b04 	vpop	{d8-d9}
 800446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004470:	4b90      	ldr	r3, [pc, #576]	; (80046b4 <_dtoa_r+0x2f4>)
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	3303      	adds	r3, #3
 8004476:	e7f3      	b.n	8004460 <_dtoa_r+0xa0>
 8004478:	ed9d 7b02 	vldr	d7, [sp, #8]
 800447c:	2200      	movs	r2, #0
 800447e:	ec51 0b17 	vmov	r0, r1, d7
 8004482:	eeb0 8a47 	vmov.f32	s16, s14
 8004486:	eef0 8a67 	vmov.f32	s17, s15
 800448a:	2300      	movs	r3, #0
 800448c:	f7fc fb5c 	bl	8000b48 <__aeabi_dcmpeq>
 8004490:	4681      	mov	r9, r0
 8004492:	b160      	cbz	r0, 80044ae <_dtoa_r+0xee>
 8004494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004496:	2301      	movs	r3, #1
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8568 	beq.w	8004f72 <_dtoa_r+0xbb2>
 80044a2:	4b86      	ldr	r3, [pc, #536]	; (80046bc <_dtoa_r+0x2fc>)
 80044a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	e7da      	b.n	8004464 <_dtoa_r+0xa4>
 80044ae:	aa10      	add	r2, sp, #64	; 0x40
 80044b0:	a911      	add	r1, sp, #68	; 0x44
 80044b2:	4620      	mov	r0, r4
 80044b4:	eeb0 0a48 	vmov.f32	s0, s16
 80044b8:	eef0 0a68 	vmov.f32	s1, s17
 80044bc:	f001 f994 	bl	80057e8 <__d2b>
 80044c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80044c4:	4682      	mov	sl, r0
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	d07f      	beq.n	80045ca <_dtoa_r+0x20a>
 80044ca:	ee18 3a90 	vmov	r3, s17
 80044ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80044d6:	ec51 0b18 	vmov	r0, r1, d8
 80044da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80044de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80044e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80044e6:	4619      	mov	r1, r3
 80044e8:	2200      	movs	r2, #0
 80044ea:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <_dtoa_r+0x300>)
 80044ec:	f7fb ff0c 	bl	8000308 <__aeabi_dsub>
 80044f0:	a367      	add	r3, pc, #412	; (adr r3, 8004690 <_dtoa_r+0x2d0>)
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f7fc f8bf 	bl	8000678 <__aeabi_dmul>
 80044fa:	a367      	add	r3, pc, #412	; (adr r3, 8004698 <_dtoa_r+0x2d8>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fb ff04 	bl	800030c <__adddf3>
 8004504:	4606      	mov	r6, r0
 8004506:	4628      	mov	r0, r5
 8004508:	460f      	mov	r7, r1
 800450a:	f7fc f84b 	bl	80005a4 <__aeabi_i2d>
 800450e:	a364      	add	r3, pc, #400	; (adr r3, 80046a0 <_dtoa_r+0x2e0>)
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f7fc f8b0 	bl	8000678 <__aeabi_dmul>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4630      	mov	r0, r6
 800451e:	4639      	mov	r1, r7
 8004520:	f7fb fef4 	bl	800030c <__adddf3>
 8004524:	4606      	mov	r6, r0
 8004526:	460f      	mov	r7, r1
 8004528:	f7fc fb56 	bl	8000bd8 <__aeabi_d2iz>
 800452c:	2200      	movs	r2, #0
 800452e:	4683      	mov	fp, r0
 8004530:	2300      	movs	r3, #0
 8004532:	4630      	mov	r0, r6
 8004534:	4639      	mov	r1, r7
 8004536:	f7fc fb11 	bl	8000b5c <__aeabi_dcmplt>
 800453a:	b148      	cbz	r0, 8004550 <_dtoa_r+0x190>
 800453c:	4658      	mov	r0, fp
 800453e:	f7fc f831 	bl	80005a4 <__aeabi_i2d>
 8004542:	4632      	mov	r2, r6
 8004544:	463b      	mov	r3, r7
 8004546:	f7fc faff 	bl	8000b48 <__aeabi_dcmpeq>
 800454a:	b908      	cbnz	r0, 8004550 <_dtoa_r+0x190>
 800454c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004550:	f1bb 0f16 	cmp.w	fp, #22
 8004554:	d857      	bhi.n	8004606 <_dtoa_r+0x246>
 8004556:	4b5b      	ldr	r3, [pc, #364]	; (80046c4 <_dtoa_r+0x304>)
 8004558:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	ec51 0b18 	vmov	r0, r1, d8
 8004564:	f7fc fafa 	bl	8000b5c <__aeabi_dcmplt>
 8004568:	2800      	cmp	r0, #0
 800456a:	d04e      	beq.n	800460a <_dtoa_r+0x24a>
 800456c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004570:	2300      	movs	r3, #0
 8004572:	930c      	str	r3, [sp, #48]	; 0x30
 8004574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004576:	1b5b      	subs	r3, r3, r5
 8004578:	1e5a      	subs	r2, r3, #1
 800457a:	bf45      	ittet	mi
 800457c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004580:	9305      	strmi	r3, [sp, #20]
 8004582:	2300      	movpl	r3, #0
 8004584:	2300      	movmi	r3, #0
 8004586:	9206      	str	r2, [sp, #24]
 8004588:	bf54      	ite	pl
 800458a:	9305      	strpl	r3, [sp, #20]
 800458c:	9306      	strmi	r3, [sp, #24]
 800458e:	f1bb 0f00 	cmp.w	fp, #0
 8004592:	db3c      	blt.n	800460e <_dtoa_r+0x24e>
 8004594:	9b06      	ldr	r3, [sp, #24]
 8004596:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800459a:	445b      	add	r3, fp
 800459c:	9306      	str	r3, [sp, #24]
 800459e:	2300      	movs	r3, #0
 80045a0:	9308      	str	r3, [sp, #32]
 80045a2:	9b07      	ldr	r3, [sp, #28]
 80045a4:	2b09      	cmp	r3, #9
 80045a6:	d868      	bhi.n	800467a <_dtoa_r+0x2ba>
 80045a8:	2b05      	cmp	r3, #5
 80045aa:	bfc4      	itt	gt
 80045ac:	3b04      	subgt	r3, #4
 80045ae:	9307      	strgt	r3, [sp, #28]
 80045b0:	9b07      	ldr	r3, [sp, #28]
 80045b2:	f1a3 0302 	sub.w	r3, r3, #2
 80045b6:	bfcc      	ite	gt
 80045b8:	2500      	movgt	r5, #0
 80045ba:	2501      	movle	r5, #1
 80045bc:	2b03      	cmp	r3, #3
 80045be:	f200 8085 	bhi.w	80046cc <_dtoa_r+0x30c>
 80045c2:	e8df f003 	tbb	[pc, r3]
 80045c6:	3b2e      	.short	0x3b2e
 80045c8:	5839      	.short	0x5839
 80045ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80045ce:	441d      	add	r5, r3
 80045d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	bfc1      	itttt	gt
 80045d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80045dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80045e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80045e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80045e8:	bfd6      	itet	le
 80045ea:	f1c3 0320 	rsble	r3, r3, #32
 80045ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80045f2:	fa06 f003 	lslle.w	r0, r6, r3
 80045f6:	f7fb ffc5 	bl	8000584 <__aeabi_ui2d>
 80045fa:	2201      	movs	r2, #1
 80045fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004600:	3d01      	subs	r5, #1
 8004602:	920e      	str	r2, [sp, #56]	; 0x38
 8004604:	e76f      	b.n	80044e6 <_dtoa_r+0x126>
 8004606:	2301      	movs	r3, #1
 8004608:	e7b3      	b.n	8004572 <_dtoa_r+0x1b2>
 800460a:	900c      	str	r0, [sp, #48]	; 0x30
 800460c:	e7b2      	b.n	8004574 <_dtoa_r+0x1b4>
 800460e:	9b05      	ldr	r3, [sp, #20]
 8004610:	eba3 030b 	sub.w	r3, r3, fp
 8004614:	9305      	str	r3, [sp, #20]
 8004616:	f1cb 0300 	rsb	r3, fp, #0
 800461a:	9308      	str	r3, [sp, #32]
 800461c:	2300      	movs	r3, #0
 800461e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004620:	e7bf      	b.n	80045a2 <_dtoa_r+0x1e2>
 8004622:	2300      	movs	r3, #0
 8004624:	9309      	str	r3, [sp, #36]	; 0x24
 8004626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	dc52      	bgt.n	80046d2 <_dtoa_r+0x312>
 800462c:	2301      	movs	r3, #1
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	9304      	str	r3, [sp, #16]
 8004632:	461a      	mov	r2, r3
 8004634:	920a      	str	r2, [sp, #40]	; 0x28
 8004636:	e00b      	b.n	8004650 <_dtoa_r+0x290>
 8004638:	2301      	movs	r3, #1
 800463a:	e7f3      	b.n	8004624 <_dtoa_r+0x264>
 800463c:	2300      	movs	r3, #0
 800463e:	9309      	str	r3, [sp, #36]	; 0x24
 8004640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004642:	445b      	add	r3, fp
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	3301      	adds	r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	9304      	str	r3, [sp, #16]
 800464c:	bfb8      	it	lt
 800464e:	2301      	movlt	r3, #1
 8004650:	69e0      	ldr	r0, [r4, #28]
 8004652:	2100      	movs	r1, #0
 8004654:	2204      	movs	r2, #4
 8004656:	f102 0614 	add.w	r6, r2, #20
 800465a:	429e      	cmp	r6, r3
 800465c:	d93d      	bls.n	80046da <_dtoa_r+0x31a>
 800465e:	6041      	str	r1, [r0, #4]
 8004660:	4620      	mov	r0, r4
 8004662:	f000 fd9f 	bl	80051a4 <_Balloc>
 8004666:	9000      	str	r0, [sp, #0]
 8004668:	2800      	cmp	r0, #0
 800466a:	d139      	bne.n	80046e0 <_dtoa_r+0x320>
 800466c:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <_dtoa_r+0x308>)
 800466e:	4602      	mov	r2, r0
 8004670:	f240 11af 	movw	r1, #431	; 0x1af
 8004674:	e6bd      	b.n	80043f2 <_dtoa_r+0x32>
 8004676:	2301      	movs	r3, #1
 8004678:	e7e1      	b.n	800463e <_dtoa_r+0x27e>
 800467a:	2501      	movs	r5, #1
 800467c:	2300      	movs	r3, #0
 800467e:	9307      	str	r3, [sp, #28]
 8004680:	9509      	str	r5, [sp, #36]	; 0x24
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	2200      	movs	r2, #0
 800468c:	2312      	movs	r3, #18
 800468e:	e7d1      	b.n	8004634 <_dtoa_r+0x274>
 8004690:	636f4361 	.word	0x636f4361
 8004694:	3fd287a7 	.word	0x3fd287a7
 8004698:	8b60c8b3 	.word	0x8b60c8b3
 800469c:	3fc68a28 	.word	0x3fc68a28
 80046a0:	509f79fb 	.word	0x509f79fb
 80046a4:	3fd34413 	.word	0x3fd34413
 80046a8:	08007179 	.word	0x08007179
 80046ac:	08007190 	.word	0x08007190
 80046b0:	7ff00000 	.word	0x7ff00000
 80046b4:	08007175 	.word	0x08007175
 80046b8:	0800716c 	.word	0x0800716c
 80046bc:	08007149 	.word	0x08007149
 80046c0:	3ff80000 	.word	0x3ff80000
 80046c4:	08007280 	.word	0x08007280
 80046c8:	080071e8 	.word	0x080071e8
 80046cc:	2301      	movs	r3, #1
 80046ce:	9309      	str	r3, [sp, #36]	; 0x24
 80046d0:	e7d7      	b.n	8004682 <_dtoa_r+0x2c2>
 80046d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	9304      	str	r3, [sp, #16]
 80046d8:	e7ba      	b.n	8004650 <_dtoa_r+0x290>
 80046da:	3101      	adds	r1, #1
 80046dc:	0052      	lsls	r2, r2, #1
 80046de:	e7ba      	b.n	8004656 <_dtoa_r+0x296>
 80046e0:	69e3      	ldr	r3, [r4, #28]
 80046e2:	9a00      	ldr	r2, [sp, #0]
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	9b04      	ldr	r3, [sp, #16]
 80046e8:	2b0e      	cmp	r3, #14
 80046ea:	f200 80a8 	bhi.w	800483e <_dtoa_r+0x47e>
 80046ee:	2d00      	cmp	r5, #0
 80046f0:	f000 80a5 	beq.w	800483e <_dtoa_r+0x47e>
 80046f4:	f1bb 0f00 	cmp.w	fp, #0
 80046f8:	dd38      	ble.n	800476c <_dtoa_r+0x3ac>
 80046fa:	4bc0      	ldr	r3, [pc, #768]	; (80049fc <_dtoa_r+0x63c>)
 80046fc:	f00b 020f 	and.w	r2, fp, #15
 8004700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004704:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004708:	e9d3 6700 	ldrd	r6, r7, [r3]
 800470c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004710:	d019      	beq.n	8004746 <_dtoa_r+0x386>
 8004712:	4bbb      	ldr	r3, [pc, #748]	; (8004a00 <_dtoa_r+0x640>)
 8004714:	ec51 0b18 	vmov	r0, r1, d8
 8004718:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800471c:	f7fc f8d6 	bl	80008cc <__aeabi_ddiv>
 8004720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004724:	f008 080f 	and.w	r8, r8, #15
 8004728:	2503      	movs	r5, #3
 800472a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004a00 <_dtoa_r+0x640>
 800472e:	f1b8 0f00 	cmp.w	r8, #0
 8004732:	d10a      	bne.n	800474a <_dtoa_r+0x38a>
 8004734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004738:	4632      	mov	r2, r6
 800473a:	463b      	mov	r3, r7
 800473c:	f7fc f8c6 	bl	80008cc <__aeabi_ddiv>
 8004740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004744:	e02b      	b.n	800479e <_dtoa_r+0x3de>
 8004746:	2502      	movs	r5, #2
 8004748:	e7ef      	b.n	800472a <_dtoa_r+0x36a>
 800474a:	f018 0f01 	tst.w	r8, #1
 800474e:	d008      	beq.n	8004762 <_dtoa_r+0x3a2>
 8004750:	4630      	mov	r0, r6
 8004752:	4639      	mov	r1, r7
 8004754:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004758:	f7fb ff8e 	bl	8000678 <__aeabi_dmul>
 800475c:	3501      	adds	r5, #1
 800475e:	4606      	mov	r6, r0
 8004760:	460f      	mov	r7, r1
 8004762:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004766:	f109 0908 	add.w	r9, r9, #8
 800476a:	e7e0      	b.n	800472e <_dtoa_r+0x36e>
 800476c:	f000 809f 	beq.w	80048ae <_dtoa_r+0x4ee>
 8004770:	f1cb 0600 	rsb	r6, fp, #0
 8004774:	4ba1      	ldr	r3, [pc, #644]	; (80049fc <_dtoa_r+0x63c>)
 8004776:	4fa2      	ldr	r7, [pc, #648]	; (8004a00 <_dtoa_r+0x640>)
 8004778:	f006 020f 	and.w	r2, r6, #15
 800477c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	ec51 0b18 	vmov	r0, r1, d8
 8004788:	f7fb ff76 	bl	8000678 <__aeabi_dmul>
 800478c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004790:	1136      	asrs	r6, r6, #4
 8004792:	2300      	movs	r3, #0
 8004794:	2502      	movs	r5, #2
 8004796:	2e00      	cmp	r6, #0
 8004798:	d17e      	bne.n	8004898 <_dtoa_r+0x4d8>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1d0      	bne.n	8004740 <_dtoa_r+0x380>
 800479e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8084 	beq.w	80048b2 <_dtoa_r+0x4f2>
 80047aa:	4b96      	ldr	r3, [pc, #600]	; (8004a04 <_dtoa_r+0x644>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	4640      	mov	r0, r8
 80047b0:	4649      	mov	r1, r9
 80047b2:	f7fc f9d3 	bl	8000b5c <__aeabi_dcmplt>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d07b      	beq.n	80048b2 <_dtoa_r+0x4f2>
 80047ba:	9b04      	ldr	r3, [sp, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d078      	beq.n	80048b2 <_dtoa_r+0x4f2>
 80047c0:	9b01      	ldr	r3, [sp, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	dd39      	ble.n	800483a <_dtoa_r+0x47a>
 80047c6:	4b90      	ldr	r3, [pc, #576]	; (8004a08 <_dtoa_r+0x648>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	4640      	mov	r0, r8
 80047cc:	4649      	mov	r1, r9
 80047ce:	f7fb ff53 	bl	8000678 <__aeabi_dmul>
 80047d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047d6:	9e01      	ldr	r6, [sp, #4]
 80047d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80047dc:	3501      	adds	r5, #1
 80047de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80047e2:	4628      	mov	r0, r5
 80047e4:	f7fb fede 	bl	80005a4 <__aeabi_i2d>
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	f7fb ff44 	bl	8000678 <__aeabi_dmul>
 80047f0:	4b86      	ldr	r3, [pc, #536]	; (8004a0c <_dtoa_r+0x64c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	f7fb fd8a 	bl	800030c <__adddf3>
 80047f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80047fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004800:	9303      	str	r3, [sp, #12]
 8004802:	2e00      	cmp	r6, #0
 8004804:	d158      	bne.n	80048b8 <_dtoa_r+0x4f8>
 8004806:	4b82      	ldr	r3, [pc, #520]	; (8004a10 <_dtoa_r+0x650>)
 8004808:	2200      	movs	r2, #0
 800480a:	4640      	mov	r0, r8
 800480c:	4649      	mov	r1, r9
 800480e:	f7fb fd7b 	bl	8000308 <__aeabi_dsub>
 8004812:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004816:	4680      	mov	r8, r0
 8004818:	4689      	mov	r9, r1
 800481a:	f7fc f9bd 	bl	8000b98 <__aeabi_dcmpgt>
 800481e:	2800      	cmp	r0, #0
 8004820:	f040 8296 	bne.w	8004d50 <_dtoa_r+0x990>
 8004824:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004828:	4640      	mov	r0, r8
 800482a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800482e:	4649      	mov	r1, r9
 8004830:	f7fc f994 	bl	8000b5c <__aeabi_dcmplt>
 8004834:	2800      	cmp	r0, #0
 8004836:	f040 8289 	bne.w	8004d4c <_dtoa_r+0x98c>
 800483a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800483e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004840:	2b00      	cmp	r3, #0
 8004842:	f2c0 814e 	blt.w	8004ae2 <_dtoa_r+0x722>
 8004846:	f1bb 0f0e 	cmp.w	fp, #14
 800484a:	f300 814a 	bgt.w	8004ae2 <_dtoa_r+0x722>
 800484e:	4b6b      	ldr	r3, [pc, #428]	; (80049fc <_dtoa_r+0x63c>)
 8004850:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004854:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	f280 80dc 	bge.w	8004a18 <_dtoa_r+0x658>
 8004860:	9b04      	ldr	r3, [sp, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f300 80d8 	bgt.w	8004a18 <_dtoa_r+0x658>
 8004868:	f040 826f 	bne.w	8004d4a <_dtoa_r+0x98a>
 800486c:	4b68      	ldr	r3, [pc, #416]	; (8004a10 <_dtoa_r+0x650>)
 800486e:	2200      	movs	r2, #0
 8004870:	4640      	mov	r0, r8
 8004872:	4649      	mov	r1, r9
 8004874:	f7fb ff00 	bl	8000678 <__aeabi_dmul>
 8004878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800487c:	f7fc f982 	bl	8000b84 <__aeabi_dcmpge>
 8004880:	9e04      	ldr	r6, [sp, #16]
 8004882:	4637      	mov	r7, r6
 8004884:	2800      	cmp	r0, #0
 8004886:	f040 8245 	bne.w	8004d14 <_dtoa_r+0x954>
 800488a:	9d00      	ldr	r5, [sp, #0]
 800488c:	2331      	movs	r3, #49	; 0x31
 800488e:	f805 3b01 	strb.w	r3, [r5], #1
 8004892:	f10b 0b01 	add.w	fp, fp, #1
 8004896:	e241      	b.n	8004d1c <_dtoa_r+0x95c>
 8004898:	07f2      	lsls	r2, r6, #31
 800489a:	d505      	bpl.n	80048a8 <_dtoa_r+0x4e8>
 800489c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a0:	f7fb feea 	bl	8000678 <__aeabi_dmul>
 80048a4:	3501      	adds	r5, #1
 80048a6:	2301      	movs	r3, #1
 80048a8:	1076      	asrs	r6, r6, #1
 80048aa:	3708      	adds	r7, #8
 80048ac:	e773      	b.n	8004796 <_dtoa_r+0x3d6>
 80048ae:	2502      	movs	r5, #2
 80048b0:	e775      	b.n	800479e <_dtoa_r+0x3de>
 80048b2:	9e04      	ldr	r6, [sp, #16]
 80048b4:	465f      	mov	r7, fp
 80048b6:	e792      	b.n	80047de <_dtoa_r+0x41e>
 80048b8:	9900      	ldr	r1, [sp, #0]
 80048ba:	4b50      	ldr	r3, [pc, #320]	; (80049fc <_dtoa_r+0x63c>)
 80048bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048c0:	4431      	add	r1, r6
 80048c2:	9102      	str	r1, [sp, #8]
 80048c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048c6:	eeb0 9a47 	vmov.f32	s18, s14
 80048ca:	eef0 9a67 	vmov.f32	s19, s15
 80048ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80048d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048d6:	2900      	cmp	r1, #0
 80048d8:	d044      	beq.n	8004964 <_dtoa_r+0x5a4>
 80048da:	494e      	ldr	r1, [pc, #312]	; (8004a14 <_dtoa_r+0x654>)
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fb fff5 	bl	80008cc <__aeabi_ddiv>
 80048e2:	ec53 2b19 	vmov	r2, r3, d9
 80048e6:	f7fb fd0f 	bl	8000308 <__aeabi_dsub>
 80048ea:	9d00      	ldr	r5, [sp, #0]
 80048ec:	ec41 0b19 	vmov	d9, r0, r1
 80048f0:	4649      	mov	r1, r9
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7fc f970 	bl	8000bd8 <__aeabi_d2iz>
 80048f8:	4606      	mov	r6, r0
 80048fa:	f7fb fe53 	bl	80005a4 <__aeabi_i2d>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4640      	mov	r0, r8
 8004904:	4649      	mov	r1, r9
 8004906:	f7fb fcff 	bl	8000308 <__aeabi_dsub>
 800490a:	3630      	adds	r6, #48	; 0x30
 800490c:	f805 6b01 	strb.w	r6, [r5], #1
 8004910:	ec53 2b19 	vmov	r2, r3, d9
 8004914:	4680      	mov	r8, r0
 8004916:	4689      	mov	r9, r1
 8004918:	f7fc f920 	bl	8000b5c <__aeabi_dcmplt>
 800491c:	2800      	cmp	r0, #0
 800491e:	d164      	bne.n	80049ea <_dtoa_r+0x62a>
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	4937      	ldr	r1, [pc, #220]	; (8004a04 <_dtoa_r+0x644>)
 8004926:	2000      	movs	r0, #0
 8004928:	f7fb fcee 	bl	8000308 <__aeabi_dsub>
 800492c:	ec53 2b19 	vmov	r2, r3, d9
 8004930:	f7fc f914 	bl	8000b5c <__aeabi_dcmplt>
 8004934:	2800      	cmp	r0, #0
 8004936:	f040 80b6 	bne.w	8004aa6 <_dtoa_r+0x6e6>
 800493a:	9b02      	ldr	r3, [sp, #8]
 800493c:	429d      	cmp	r5, r3
 800493e:	f43f af7c 	beq.w	800483a <_dtoa_r+0x47a>
 8004942:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <_dtoa_r+0x648>)
 8004944:	ec51 0b19 	vmov	r0, r1, d9
 8004948:	2200      	movs	r2, #0
 800494a:	f7fb fe95 	bl	8000678 <__aeabi_dmul>
 800494e:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <_dtoa_r+0x648>)
 8004950:	ec41 0b19 	vmov	d9, r0, r1
 8004954:	2200      	movs	r2, #0
 8004956:	4640      	mov	r0, r8
 8004958:	4649      	mov	r1, r9
 800495a:	f7fb fe8d 	bl	8000678 <__aeabi_dmul>
 800495e:	4680      	mov	r8, r0
 8004960:	4689      	mov	r9, r1
 8004962:	e7c5      	b.n	80048f0 <_dtoa_r+0x530>
 8004964:	ec51 0b17 	vmov	r0, r1, d7
 8004968:	f7fb fe86 	bl	8000678 <__aeabi_dmul>
 800496c:	9b02      	ldr	r3, [sp, #8]
 800496e:	9d00      	ldr	r5, [sp, #0]
 8004970:	930f      	str	r3, [sp, #60]	; 0x3c
 8004972:	ec41 0b19 	vmov	d9, r0, r1
 8004976:	4649      	mov	r1, r9
 8004978:	4640      	mov	r0, r8
 800497a:	f7fc f92d 	bl	8000bd8 <__aeabi_d2iz>
 800497e:	4606      	mov	r6, r0
 8004980:	f7fb fe10 	bl	80005a4 <__aeabi_i2d>
 8004984:	3630      	adds	r6, #48	; 0x30
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4640      	mov	r0, r8
 800498c:	4649      	mov	r1, r9
 800498e:	f7fb fcbb 	bl	8000308 <__aeabi_dsub>
 8004992:	f805 6b01 	strb.w	r6, [r5], #1
 8004996:	9b02      	ldr	r3, [sp, #8]
 8004998:	429d      	cmp	r5, r3
 800499a:	4680      	mov	r8, r0
 800499c:	4689      	mov	r9, r1
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	d124      	bne.n	80049ee <_dtoa_r+0x62e>
 80049a4:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <_dtoa_r+0x654>)
 80049a6:	ec51 0b19 	vmov	r0, r1, d9
 80049aa:	f7fb fcaf 	bl	800030c <__adddf3>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4640      	mov	r0, r8
 80049b4:	4649      	mov	r1, r9
 80049b6:	f7fc f8ef 	bl	8000b98 <__aeabi_dcmpgt>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d173      	bne.n	8004aa6 <_dtoa_r+0x6e6>
 80049be:	ec53 2b19 	vmov	r2, r3, d9
 80049c2:	4914      	ldr	r1, [pc, #80]	; (8004a14 <_dtoa_r+0x654>)
 80049c4:	2000      	movs	r0, #0
 80049c6:	f7fb fc9f 	bl	8000308 <__aeabi_dsub>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4640      	mov	r0, r8
 80049d0:	4649      	mov	r1, r9
 80049d2:	f7fc f8c3 	bl	8000b5c <__aeabi_dcmplt>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f43f af2f 	beq.w	800483a <_dtoa_r+0x47a>
 80049dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80049de:	1e6b      	subs	r3, r5, #1
 80049e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80049e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049e6:	2b30      	cmp	r3, #48	; 0x30
 80049e8:	d0f8      	beq.n	80049dc <_dtoa_r+0x61c>
 80049ea:	46bb      	mov	fp, r7
 80049ec:	e04a      	b.n	8004a84 <_dtoa_r+0x6c4>
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <_dtoa_r+0x648>)
 80049f0:	f7fb fe42 	bl	8000678 <__aeabi_dmul>
 80049f4:	4680      	mov	r8, r0
 80049f6:	4689      	mov	r9, r1
 80049f8:	e7bd      	b.n	8004976 <_dtoa_r+0x5b6>
 80049fa:	bf00      	nop
 80049fc:	08007280 	.word	0x08007280
 8004a00:	08007258 	.word	0x08007258
 8004a04:	3ff00000 	.word	0x3ff00000
 8004a08:	40240000 	.word	0x40240000
 8004a0c:	401c0000 	.word	0x401c0000
 8004a10:	40140000 	.word	0x40140000
 8004a14:	3fe00000 	.word	0x3fe00000
 8004a18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a1c:	9d00      	ldr	r5, [sp, #0]
 8004a1e:	4642      	mov	r2, r8
 8004a20:	464b      	mov	r3, r9
 8004a22:	4630      	mov	r0, r6
 8004a24:	4639      	mov	r1, r7
 8004a26:	f7fb ff51 	bl	80008cc <__aeabi_ddiv>
 8004a2a:	f7fc f8d5 	bl	8000bd8 <__aeabi_d2iz>
 8004a2e:	9001      	str	r0, [sp, #4]
 8004a30:	f7fb fdb8 	bl	80005a4 <__aeabi_i2d>
 8004a34:	4642      	mov	r2, r8
 8004a36:	464b      	mov	r3, r9
 8004a38:	f7fb fe1e 	bl	8000678 <__aeabi_dmul>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4630      	mov	r0, r6
 8004a42:	4639      	mov	r1, r7
 8004a44:	f7fb fc60 	bl	8000308 <__aeabi_dsub>
 8004a48:	9e01      	ldr	r6, [sp, #4]
 8004a4a:	9f04      	ldr	r7, [sp, #16]
 8004a4c:	3630      	adds	r6, #48	; 0x30
 8004a4e:	f805 6b01 	strb.w	r6, [r5], #1
 8004a52:	9e00      	ldr	r6, [sp, #0]
 8004a54:	1bae      	subs	r6, r5, r6
 8004a56:	42b7      	cmp	r7, r6
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	d134      	bne.n	8004ac8 <_dtoa_r+0x708>
 8004a5e:	f7fb fc55 	bl	800030c <__adddf3>
 8004a62:	4642      	mov	r2, r8
 8004a64:	464b      	mov	r3, r9
 8004a66:	4606      	mov	r6, r0
 8004a68:	460f      	mov	r7, r1
 8004a6a:	f7fc f895 	bl	8000b98 <__aeabi_dcmpgt>
 8004a6e:	b9c8      	cbnz	r0, 8004aa4 <_dtoa_r+0x6e4>
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	4630      	mov	r0, r6
 8004a76:	4639      	mov	r1, r7
 8004a78:	f7fc f866 	bl	8000b48 <__aeabi_dcmpeq>
 8004a7c:	b110      	cbz	r0, 8004a84 <_dtoa_r+0x6c4>
 8004a7e:	9b01      	ldr	r3, [sp, #4]
 8004a80:	07db      	lsls	r3, r3, #31
 8004a82:	d40f      	bmi.n	8004aa4 <_dtoa_r+0x6e4>
 8004a84:	4651      	mov	r1, sl
 8004a86:	4620      	mov	r0, r4
 8004a88:	f000 fbcc 	bl	8005224 <_Bfree>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a90:	702b      	strb	r3, [r5, #0]
 8004a92:	f10b 0301 	add.w	r3, fp, #1
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f43f ace2 	beq.w	8004464 <_dtoa_r+0xa4>
 8004aa0:	601d      	str	r5, [r3, #0]
 8004aa2:	e4df      	b.n	8004464 <_dtoa_r+0xa4>
 8004aa4:	465f      	mov	r7, fp
 8004aa6:	462b      	mov	r3, r5
 8004aa8:	461d      	mov	r5, r3
 8004aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004aae:	2a39      	cmp	r2, #57	; 0x39
 8004ab0:	d106      	bne.n	8004ac0 <_dtoa_r+0x700>
 8004ab2:	9a00      	ldr	r2, [sp, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1f7      	bne.n	8004aa8 <_dtoa_r+0x6e8>
 8004ab8:	9900      	ldr	r1, [sp, #0]
 8004aba:	2230      	movs	r2, #48	; 0x30
 8004abc:	3701      	adds	r7, #1
 8004abe:	700a      	strb	r2, [r1, #0]
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	3201      	adds	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	e790      	b.n	80049ea <_dtoa_r+0x62a>
 8004ac8:	4ba3      	ldr	r3, [pc, #652]	; (8004d58 <_dtoa_r+0x998>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	f7fb fdd4 	bl	8000678 <__aeabi_dmul>
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	460f      	mov	r7, r1
 8004ad8:	f7fc f836 	bl	8000b48 <__aeabi_dcmpeq>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d09e      	beq.n	8004a1e <_dtoa_r+0x65e>
 8004ae0:	e7d0      	b.n	8004a84 <_dtoa_r+0x6c4>
 8004ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ae4:	2a00      	cmp	r2, #0
 8004ae6:	f000 80ca 	beq.w	8004c7e <_dtoa_r+0x8be>
 8004aea:	9a07      	ldr	r2, [sp, #28]
 8004aec:	2a01      	cmp	r2, #1
 8004aee:	f300 80ad 	bgt.w	8004c4c <_dtoa_r+0x88c>
 8004af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004af4:	2a00      	cmp	r2, #0
 8004af6:	f000 80a5 	beq.w	8004c44 <_dtoa_r+0x884>
 8004afa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004afe:	9e08      	ldr	r6, [sp, #32]
 8004b00:	9d05      	ldr	r5, [sp, #20]
 8004b02:	9a05      	ldr	r2, [sp, #20]
 8004b04:	441a      	add	r2, r3
 8004b06:	9205      	str	r2, [sp, #20]
 8004b08:	9a06      	ldr	r2, [sp, #24]
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	441a      	add	r2, r3
 8004b0e:	4620      	mov	r0, r4
 8004b10:	9206      	str	r2, [sp, #24]
 8004b12:	f000 fc3d 	bl	8005390 <__i2b>
 8004b16:	4607      	mov	r7, r0
 8004b18:	b165      	cbz	r5, 8004b34 <_dtoa_r+0x774>
 8004b1a:	9b06      	ldr	r3, [sp, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	dd09      	ble.n	8004b34 <_dtoa_r+0x774>
 8004b20:	42ab      	cmp	r3, r5
 8004b22:	9a05      	ldr	r2, [sp, #20]
 8004b24:	bfa8      	it	ge
 8004b26:	462b      	movge	r3, r5
 8004b28:	1ad2      	subs	r2, r2, r3
 8004b2a:	9205      	str	r2, [sp, #20]
 8004b2c:	9a06      	ldr	r2, [sp, #24]
 8004b2e:	1aed      	subs	r5, r5, r3
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	9306      	str	r3, [sp, #24]
 8004b34:	9b08      	ldr	r3, [sp, #32]
 8004b36:	b1f3      	cbz	r3, 8004b76 <_dtoa_r+0x7b6>
 8004b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80a3 	beq.w	8004c86 <_dtoa_r+0x8c6>
 8004b40:	2e00      	cmp	r6, #0
 8004b42:	dd10      	ble.n	8004b66 <_dtoa_r+0x7a6>
 8004b44:	4639      	mov	r1, r7
 8004b46:	4632      	mov	r2, r6
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 fce1 	bl	8005510 <__pow5mult>
 8004b4e:	4652      	mov	r2, sl
 8004b50:	4601      	mov	r1, r0
 8004b52:	4607      	mov	r7, r0
 8004b54:	4620      	mov	r0, r4
 8004b56:	f000 fc31 	bl	80053bc <__multiply>
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f000 fb60 	bl	8005224 <_Bfree>
 8004b64:	46c2      	mov	sl, r8
 8004b66:	9b08      	ldr	r3, [sp, #32]
 8004b68:	1b9a      	subs	r2, r3, r6
 8004b6a:	d004      	beq.n	8004b76 <_dtoa_r+0x7b6>
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f000 fcce 	bl	8005510 <__pow5mult>
 8004b74:	4682      	mov	sl, r0
 8004b76:	2101      	movs	r1, #1
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f000 fc09 	bl	8005390 <__i2b>
 8004b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	4606      	mov	r6, r0
 8004b84:	f340 8081 	ble.w	8004c8a <_dtoa_r+0x8ca>
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f000 fcbf 	bl	8005510 <__pow5mult>
 8004b92:	9b07      	ldr	r3, [sp, #28]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	4606      	mov	r6, r0
 8004b98:	dd7a      	ble.n	8004c90 <_dtoa_r+0x8d0>
 8004b9a:	f04f 0800 	mov.w	r8, #0
 8004b9e:	6933      	ldr	r3, [r6, #16]
 8004ba0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ba4:	6918      	ldr	r0, [r3, #16]
 8004ba6:	f000 fba5 	bl	80052f4 <__hi0bits>
 8004baa:	f1c0 0020 	rsb	r0, r0, #32
 8004bae:	9b06      	ldr	r3, [sp, #24]
 8004bb0:	4418      	add	r0, r3
 8004bb2:	f010 001f 	ands.w	r0, r0, #31
 8004bb6:	f000 8094 	beq.w	8004ce2 <_dtoa_r+0x922>
 8004bba:	f1c0 0320 	rsb	r3, r0, #32
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	f340 8085 	ble.w	8004cce <_dtoa_r+0x90e>
 8004bc4:	9b05      	ldr	r3, [sp, #20]
 8004bc6:	f1c0 001c 	rsb	r0, r0, #28
 8004bca:	4403      	add	r3, r0
 8004bcc:	9305      	str	r3, [sp, #20]
 8004bce:	9b06      	ldr	r3, [sp, #24]
 8004bd0:	4403      	add	r3, r0
 8004bd2:	4405      	add	r5, r0
 8004bd4:	9306      	str	r3, [sp, #24]
 8004bd6:	9b05      	ldr	r3, [sp, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	dd05      	ble.n	8004be8 <_dtoa_r+0x828>
 8004bdc:	4651      	mov	r1, sl
 8004bde:	461a      	mov	r2, r3
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 fcef 	bl	80055c4 <__lshift>
 8004be6:	4682      	mov	sl, r0
 8004be8:	9b06      	ldr	r3, [sp, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	dd05      	ble.n	8004bfa <_dtoa_r+0x83a>
 8004bee:	4631      	mov	r1, r6
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 fce6 	bl	80055c4 <__lshift>
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d072      	beq.n	8004ce6 <_dtoa_r+0x926>
 8004c00:	4631      	mov	r1, r6
 8004c02:	4650      	mov	r0, sl
 8004c04:	f000 fd4a 	bl	800569c <__mcmp>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	da6c      	bge.n	8004ce6 <_dtoa_r+0x926>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4651      	mov	r1, sl
 8004c10:	220a      	movs	r2, #10
 8004c12:	4620      	mov	r0, r4
 8004c14:	f000 fb28 	bl	8005268 <__multadd>
 8004c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c1e:	4682      	mov	sl, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 81b0 	beq.w	8004f86 <_dtoa_r+0xbc6>
 8004c26:	2300      	movs	r3, #0
 8004c28:	4639      	mov	r1, r7
 8004c2a:	220a      	movs	r2, #10
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f000 fb1b 	bl	8005268 <__multadd>
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	4607      	mov	r7, r0
 8004c38:	f300 8096 	bgt.w	8004d68 <_dtoa_r+0x9a8>
 8004c3c:	9b07      	ldr	r3, [sp, #28]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	dc59      	bgt.n	8004cf6 <_dtoa_r+0x936>
 8004c42:	e091      	b.n	8004d68 <_dtoa_r+0x9a8>
 8004c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c4a:	e758      	b.n	8004afe <_dtoa_r+0x73e>
 8004c4c:	9b04      	ldr	r3, [sp, #16]
 8004c4e:	1e5e      	subs	r6, r3, #1
 8004c50:	9b08      	ldr	r3, [sp, #32]
 8004c52:	42b3      	cmp	r3, r6
 8004c54:	bfbf      	itttt	lt
 8004c56:	9b08      	ldrlt	r3, [sp, #32]
 8004c58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004c5a:	9608      	strlt	r6, [sp, #32]
 8004c5c:	1af3      	sublt	r3, r6, r3
 8004c5e:	bfb4      	ite	lt
 8004c60:	18d2      	addlt	r2, r2, r3
 8004c62:	1b9e      	subge	r6, r3, r6
 8004c64:	9b04      	ldr	r3, [sp, #16]
 8004c66:	bfbc      	itt	lt
 8004c68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004c6a:	2600      	movlt	r6, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bfb7      	itett	lt
 8004c70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004c74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004c78:	1a9d      	sublt	r5, r3, r2
 8004c7a:	2300      	movlt	r3, #0
 8004c7c:	e741      	b.n	8004b02 <_dtoa_r+0x742>
 8004c7e:	9e08      	ldr	r6, [sp, #32]
 8004c80:	9d05      	ldr	r5, [sp, #20]
 8004c82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004c84:	e748      	b.n	8004b18 <_dtoa_r+0x758>
 8004c86:	9a08      	ldr	r2, [sp, #32]
 8004c88:	e770      	b.n	8004b6c <_dtoa_r+0x7ac>
 8004c8a:	9b07      	ldr	r3, [sp, #28]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	dc19      	bgt.n	8004cc4 <_dtoa_r+0x904>
 8004c90:	9b02      	ldr	r3, [sp, #8]
 8004c92:	b9bb      	cbnz	r3, 8004cc4 <_dtoa_r+0x904>
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c9a:	b99b      	cbnz	r3, 8004cc4 <_dtoa_r+0x904>
 8004c9c:	9b03      	ldr	r3, [sp, #12]
 8004c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ca2:	0d1b      	lsrs	r3, r3, #20
 8004ca4:	051b      	lsls	r3, r3, #20
 8004ca6:	b183      	cbz	r3, 8004cca <_dtoa_r+0x90a>
 8004ca8:	9b05      	ldr	r3, [sp, #20]
 8004caa:	3301      	adds	r3, #1
 8004cac:	9305      	str	r3, [sp, #20]
 8004cae:	9b06      	ldr	r3, [sp, #24]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	9306      	str	r3, [sp, #24]
 8004cb4:	f04f 0801 	mov.w	r8, #1
 8004cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f47f af6f 	bne.w	8004b9e <_dtoa_r+0x7de>
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	e774      	b.n	8004bae <_dtoa_r+0x7ee>
 8004cc4:	f04f 0800 	mov.w	r8, #0
 8004cc8:	e7f6      	b.n	8004cb8 <_dtoa_r+0x8f8>
 8004cca:	4698      	mov	r8, r3
 8004ccc:	e7f4      	b.n	8004cb8 <_dtoa_r+0x8f8>
 8004cce:	d082      	beq.n	8004bd6 <_dtoa_r+0x816>
 8004cd0:	9a05      	ldr	r2, [sp, #20]
 8004cd2:	331c      	adds	r3, #28
 8004cd4:	441a      	add	r2, r3
 8004cd6:	9205      	str	r2, [sp, #20]
 8004cd8:	9a06      	ldr	r2, [sp, #24]
 8004cda:	441a      	add	r2, r3
 8004cdc:	441d      	add	r5, r3
 8004cde:	9206      	str	r2, [sp, #24]
 8004ce0:	e779      	b.n	8004bd6 <_dtoa_r+0x816>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	e7f4      	b.n	8004cd0 <_dtoa_r+0x910>
 8004ce6:	9b04      	ldr	r3, [sp, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	dc37      	bgt.n	8004d5c <_dtoa_r+0x99c>
 8004cec:	9b07      	ldr	r3, [sp, #28]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	dd34      	ble.n	8004d5c <_dtoa_r+0x99c>
 8004cf2:	9b04      	ldr	r3, [sp, #16]
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	9b01      	ldr	r3, [sp, #4]
 8004cf8:	b963      	cbnz	r3, 8004d14 <_dtoa_r+0x954>
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	2205      	movs	r2, #5
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f000 fab2 	bl	8005268 <__multadd>
 8004d04:	4601      	mov	r1, r0
 8004d06:	4606      	mov	r6, r0
 8004d08:	4650      	mov	r0, sl
 8004d0a:	f000 fcc7 	bl	800569c <__mcmp>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	f73f adbb 	bgt.w	800488a <_dtoa_r+0x4ca>
 8004d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d16:	9d00      	ldr	r5, [sp, #0]
 8004d18:	ea6f 0b03 	mvn.w	fp, r3
 8004d1c:	f04f 0800 	mov.w	r8, #0
 8004d20:	4631      	mov	r1, r6
 8004d22:	4620      	mov	r0, r4
 8004d24:	f000 fa7e 	bl	8005224 <_Bfree>
 8004d28:	2f00      	cmp	r7, #0
 8004d2a:	f43f aeab 	beq.w	8004a84 <_dtoa_r+0x6c4>
 8004d2e:	f1b8 0f00 	cmp.w	r8, #0
 8004d32:	d005      	beq.n	8004d40 <_dtoa_r+0x980>
 8004d34:	45b8      	cmp	r8, r7
 8004d36:	d003      	beq.n	8004d40 <_dtoa_r+0x980>
 8004d38:	4641      	mov	r1, r8
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f000 fa72 	bl	8005224 <_Bfree>
 8004d40:	4639      	mov	r1, r7
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 fa6e 	bl	8005224 <_Bfree>
 8004d48:	e69c      	b.n	8004a84 <_dtoa_r+0x6c4>
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	4637      	mov	r7, r6
 8004d4e:	e7e1      	b.n	8004d14 <_dtoa_r+0x954>
 8004d50:	46bb      	mov	fp, r7
 8004d52:	4637      	mov	r7, r6
 8004d54:	e599      	b.n	800488a <_dtoa_r+0x4ca>
 8004d56:	bf00      	nop
 8004d58:	40240000 	.word	0x40240000
 8004d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 80c8 	beq.w	8004ef4 <_dtoa_r+0xb34>
 8004d64:	9b04      	ldr	r3, [sp, #16]
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	2d00      	cmp	r5, #0
 8004d6a:	dd05      	ble.n	8004d78 <_dtoa_r+0x9b8>
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	462a      	mov	r2, r5
 8004d70:	4620      	mov	r0, r4
 8004d72:	f000 fc27 	bl	80055c4 <__lshift>
 8004d76:	4607      	mov	r7, r0
 8004d78:	f1b8 0f00 	cmp.w	r8, #0
 8004d7c:	d05b      	beq.n	8004e36 <_dtoa_r+0xa76>
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4620      	mov	r0, r4
 8004d82:	f000 fa0f 	bl	80051a4 <_Balloc>
 8004d86:	4605      	mov	r5, r0
 8004d88:	b928      	cbnz	r0, 8004d96 <_dtoa_r+0x9d6>
 8004d8a:	4b83      	ldr	r3, [pc, #524]	; (8004f98 <_dtoa_r+0xbd8>)
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004d92:	f7ff bb2e 	b.w	80043f2 <_dtoa_r+0x32>
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	3202      	adds	r2, #2
 8004d9a:	0092      	lsls	r2, r2, #2
 8004d9c:	f107 010c 	add.w	r1, r7, #12
 8004da0:	300c      	adds	r0, #12
 8004da2:	f7ff fa76 	bl	8004292 <memcpy>
 8004da6:	2201      	movs	r2, #1
 8004da8:	4629      	mov	r1, r5
 8004daa:	4620      	mov	r0, r4
 8004dac:	f000 fc0a 	bl	80055c4 <__lshift>
 8004db0:	9b00      	ldr	r3, [sp, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	9304      	str	r3, [sp, #16]
 8004db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dba:	4413      	add	r3, r2
 8004dbc:	9308      	str	r3, [sp, #32]
 8004dbe:	9b02      	ldr	r3, [sp, #8]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	46b8      	mov	r8, r7
 8004dc6:	9306      	str	r3, [sp, #24]
 8004dc8:	4607      	mov	r7, r0
 8004dca:	9b04      	ldr	r3, [sp, #16]
 8004dcc:	4631      	mov	r1, r6
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	4650      	mov	r0, sl
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	f7ff fa6b 	bl	80042ae <quorem>
 8004dd8:	4641      	mov	r1, r8
 8004dda:	9002      	str	r0, [sp, #8]
 8004ddc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004de0:	4650      	mov	r0, sl
 8004de2:	f000 fc5b 	bl	800569c <__mcmp>
 8004de6:	463a      	mov	r2, r7
 8004de8:	9005      	str	r0, [sp, #20]
 8004dea:	4631      	mov	r1, r6
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 fc71 	bl	80056d4 <__mdiff>
 8004df2:	68c2      	ldr	r2, [r0, #12]
 8004df4:	4605      	mov	r5, r0
 8004df6:	bb02      	cbnz	r2, 8004e3a <_dtoa_r+0xa7a>
 8004df8:	4601      	mov	r1, r0
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	f000 fc4e 	bl	800569c <__mcmp>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4629      	mov	r1, r5
 8004e04:	4620      	mov	r0, r4
 8004e06:	9209      	str	r2, [sp, #36]	; 0x24
 8004e08:	f000 fa0c 	bl	8005224 <_Bfree>
 8004e0c:	9b07      	ldr	r3, [sp, #28]
 8004e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e10:	9d04      	ldr	r5, [sp, #16]
 8004e12:	ea43 0102 	orr.w	r1, r3, r2
 8004e16:	9b06      	ldr	r3, [sp, #24]
 8004e18:	4319      	orrs	r1, r3
 8004e1a:	d110      	bne.n	8004e3e <_dtoa_r+0xa7e>
 8004e1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e20:	d029      	beq.n	8004e76 <_dtoa_r+0xab6>
 8004e22:	9b05      	ldr	r3, [sp, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	dd02      	ble.n	8004e2e <_dtoa_r+0xa6e>
 8004e28:	9b02      	ldr	r3, [sp, #8]
 8004e2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004e2e:	9b01      	ldr	r3, [sp, #4]
 8004e30:	f883 9000 	strb.w	r9, [r3]
 8004e34:	e774      	b.n	8004d20 <_dtoa_r+0x960>
 8004e36:	4638      	mov	r0, r7
 8004e38:	e7ba      	b.n	8004db0 <_dtoa_r+0x9f0>
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	e7e1      	b.n	8004e02 <_dtoa_r+0xa42>
 8004e3e:	9b05      	ldr	r3, [sp, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	db04      	blt.n	8004e4e <_dtoa_r+0xa8e>
 8004e44:	9907      	ldr	r1, [sp, #28]
 8004e46:	430b      	orrs	r3, r1
 8004e48:	9906      	ldr	r1, [sp, #24]
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	d120      	bne.n	8004e90 <_dtoa_r+0xad0>
 8004e4e:	2a00      	cmp	r2, #0
 8004e50:	dded      	ble.n	8004e2e <_dtoa_r+0xa6e>
 8004e52:	4651      	mov	r1, sl
 8004e54:	2201      	movs	r2, #1
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 fbb4 	bl	80055c4 <__lshift>
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4682      	mov	sl, r0
 8004e60:	f000 fc1c 	bl	800569c <__mcmp>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	dc03      	bgt.n	8004e70 <_dtoa_r+0xab0>
 8004e68:	d1e1      	bne.n	8004e2e <_dtoa_r+0xa6e>
 8004e6a:	f019 0f01 	tst.w	r9, #1
 8004e6e:	d0de      	beq.n	8004e2e <_dtoa_r+0xa6e>
 8004e70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e74:	d1d8      	bne.n	8004e28 <_dtoa_r+0xa68>
 8004e76:	9a01      	ldr	r2, [sp, #4]
 8004e78:	2339      	movs	r3, #57	; 0x39
 8004e7a:	7013      	strb	r3, [r2, #0]
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	461d      	mov	r5, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e86:	2a39      	cmp	r2, #57	; 0x39
 8004e88:	d06c      	beq.n	8004f64 <_dtoa_r+0xba4>
 8004e8a:	3201      	adds	r2, #1
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e747      	b.n	8004d20 <_dtoa_r+0x960>
 8004e90:	2a00      	cmp	r2, #0
 8004e92:	dd07      	ble.n	8004ea4 <_dtoa_r+0xae4>
 8004e94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e98:	d0ed      	beq.n	8004e76 <_dtoa_r+0xab6>
 8004e9a:	9a01      	ldr	r2, [sp, #4]
 8004e9c:	f109 0301 	add.w	r3, r9, #1
 8004ea0:	7013      	strb	r3, [r2, #0]
 8004ea2:	e73d      	b.n	8004d20 <_dtoa_r+0x960>
 8004ea4:	9b04      	ldr	r3, [sp, #16]
 8004ea6:	9a08      	ldr	r2, [sp, #32]
 8004ea8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d043      	beq.n	8004f38 <_dtoa_r+0xb78>
 8004eb0:	4651      	mov	r1, sl
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	220a      	movs	r2, #10
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f9d6 	bl	8005268 <__multadd>
 8004ebc:	45b8      	cmp	r8, r7
 8004ebe:	4682      	mov	sl, r0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	f04f 020a 	mov.w	r2, #10
 8004ec8:	4641      	mov	r1, r8
 8004eca:	4620      	mov	r0, r4
 8004ecc:	d107      	bne.n	8004ede <_dtoa_r+0xb1e>
 8004ece:	f000 f9cb 	bl	8005268 <__multadd>
 8004ed2:	4680      	mov	r8, r0
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	9b04      	ldr	r3, [sp, #16]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	9304      	str	r3, [sp, #16]
 8004edc:	e775      	b.n	8004dca <_dtoa_r+0xa0a>
 8004ede:	f000 f9c3 	bl	8005268 <__multadd>
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	220a      	movs	r2, #10
 8004eea:	4620      	mov	r0, r4
 8004eec:	f000 f9bc 	bl	8005268 <__multadd>
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	e7f0      	b.n	8004ed6 <_dtoa_r+0xb16>
 8004ef4:	9b04      	ldr	r3, [sp, #16]
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	9d00      	ldr	r5, [sp, #0]
 8004efa:	4631      	mov	r1, r6
 8004efc:	4650      	mov	r0, sl
 8004efe:	f7ff f9d6 	bl	80042ae <quorem>
 8004f02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004f06:	9b00      	ldr	r3, [sp, #0]
 8004f08:	f805 9b01 	strb.w	r9, [r5], #1
 8004f0c:	1aea      	subs	r2, r5, r3
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	dd07      	ble.n	8004f24 <_dtoa_r+0xb64>
 8004f14:	4651      	mov	r1, sl
 8004f16:	2300      	movs	r3, #0
 8004f18:	220a      	movs	r2, #10
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 f9a4 	bl	8005268 <__multadd>
 8004f20:	4682      	mov	sl, r0
 8004f22:	e7ea      	b.n	8004efa <_dtoa_r+0xb3a>
 8004f24:	9b01      	ldr	r3, [sp, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfc8      	it	gt
 8004f2a:	461d      	movgt	r5, r3
 8004f2c:	9b00      	ldr	r3, [sp, #0]
 8004f2e:	bfd8      	it	le
 8004f30:	2501      	movle	r5, #1
 8004f32:	441d      	add	r5, r3
 8004f34:	f04f 0800 	mov.w	r8, #0
 8004f38:	4651      	mov	r1, sl
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f000 fb41 	bl	80055c4 <__lshift>
 8004f42:	4631      	mov	r1, r6
 8004f44:	4682      	mov	sl, r0
 8004f46:	f000 fba9 	bl	800569c <__mcmp>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	dc96      	bgt.n	8004e7c <_dtoa_r+0xabc>
 8004f4e:	d102      	bne.n	8004f56 <_dtoa_r+0xb96>
 8004f50:	f019 0f01 	tst.w	r9, #1
 8004f54:	d192      	bne.n	8004e7c <_dtoa_r+0xabc>
 8004f56:	462b      	mov	r3, r5
 8004f58:	461d      	mov	r5, r3
 8004f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f5e:	2a30      	cmp	r2, #48	; 0x30
 8004f60:	d0fa      	beq.n	8004f58 <_dtoa_r+0xb98>
 8004f62:	e6dd      	b.n	8004d20 <_dtoa_r+0x960>
 8004f64:	9a00      	ldr	r2, [sp, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d189      	bne.n	8004e7e <_dtoa_r+0xabe>
 8004f6a:	f10b 0b01 	add.w	fp, fp, #1
 8004f6e:	2331      	movs	r3, #49	; 0x31
 8004f70:	e796      	b.n	8004ea0 <_dtoa_r+0xae0>
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <_dtoa_r+0xbdc>)
 8004f74:	f7ff ba99 	b.w	80044aa <_dtoa_r+0xea>
 8004f78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f47f aa6d 	bne.w	800445a <_dtoa_r+0x9a>
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <_dtoa_r+0xbe0>)
 8004f82:	f7ff ba92 	b.w	80044aa <_dtoa_r+0xea>
 8004f86:	9b01      	ldr	r3, [sp, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	dcb5      	bgt.n	8004ef8 <_dtoa_r+0xb38>
 8004f8c:	9b07      	ldr	r3, [sp, #28]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	f73f aeb1 	bgt.w	8004cf6 <_dtoa_r+0x936>
 8004f94:	e7b0      	b.n	8004ef8 <_dtoa_r+0xb38>
 8004f96:	bf00      	nop
 8004f98:	080071e8 	.word	0x080071e8
 8004f9c:	08007148 	.word	0x08007148
 8004fa0:	0800716c 	.word	0x0800716c

08004fa4 <_free_r>:
 8004fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fa6:	2900      	cmp	r1, #0
 8004fa8:	d044      	beq.n	8005034 <_free_r+0x90>
 8004faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8004fb6:	bfb8      	it	lt
 8004fb8:	18e4      	addlt	r4, r4, r3
 8004fba:	f000 f8e7 	bl	800518c <__malloc_lock>
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <_free_r+0x94>)
 8004fc0:	9801      	ldr	r0, [sp, #4]
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	b933      	cbnz	r3, 8004fd4 <_free_r+0x30>
 8004fc6:	6063      	str	r3, [r4, #4]
 8004fc8:	6014      	str	r4, [r2, #0]
 8004fca:	b003      	add	sp, #12
 8004fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fd0:	f000 b8e2 	b.w	8005198 <__malloc_unlock>
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	d908      	bls.n	8004fea <_free_r+0x46>
 8004fd8:	6825      	ldr	r5, [r4, #0]
 8004fda:	1961      	adds	r1, r4, r5
 8004fdc:	428b      	cmp	r3, r1
 8004fde:	bf01      	itttt	eq
 8004fe0:	6819      	ldreq	r1, [r3, #0]
 8004fe2:	685b      	ldreq	r3, [r3, #4]
 8004fe4:	1949      	addeq	r1, r1, r5
 8004fe6:	6021      	streq	r1, [r4, #0]
 8004fe8:	e7ed      	b.n	8004fc6 <_free_r+0x22>
 8004fea:	461a      	mov	r2, r3
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	b10b      	cbz	r3, 8004ff4 <_free_r+0x50>
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d9fa      	bls.n	8004fea <_free_r+0x46>
 8004ff4:	6811      	ldr	r1, [r2, #0]
 8004ff6:	1855      	adds	r5, r2, r1
 8004ff8:	42a5      	cmp	r5, r4
 8004ffa:	d10b      	bne.n	8005014 <_free_r+0x70>
 8004ffc:	6824      	ldr	r4, [r4, #0]
 8004ffe:	4421      	add	r1, r4
 8005000:	1854      	adds	r4, r2, r1
 8005002:	42a3      	cmp	r3, r4
 8005004:	6011      	str	r1, [r2, #0]
 8005006:	d1e0      	bne.n	8004fca <_free_r+0x26>
 8005008:	681c      	ldr	r4, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	6053      	str	r3, [r2, #4]
 800500e:	440c      	add	r4, r1
 8005010:	6014      	str	r4, [r2, #0]
 8005012:	e7da      	b.n	8004fca <_free_r+0x26>
 8005014:	d902      	bls.n	800501c <_free_r+0x78>
 8005016:	230c      	movs	r3, #12
 8005018:	6003      	str	r3, [r0, #0]
 800501a:	e7d6      	b.n	8004fca <_free_r+0x26>
 800501c:	6825      	ldr	r5, [r4, #0]
 800501e:	1961      	adds	r1, r4, r5
 8005020:	428b      	cmp	r3, r1
 8005022:	bf04      	itt	eq
 8005024:	6819      	ldreq	r1, [r3, #0]
 8005026:	685b      	ldreq	r3, [r3, #4]
 8005028:	6063      	str	r3, [r4, #4]
 800502a:	bf04      	itt	eq
 800502c:	1949      	addeq	r1, r1, r5
 800502e:	6021      	streq	r1, [r4, #0]
 8005030:	6054      	str	r4, [r2, #4]
 8005032:	e7ca      	b.n	8004fca <_free_r+0x26>
 8005034:	b003      	add	sp, #12
 8005036:	bd30      	pop	{r4, r5, pc}
 8005038:	20000350 	.word	0x20000350

0800503c <malloc>:
 800503c:	4b02      	ldr	r3, [pc, #8]	; (8005048 <malloc+0xc>)
 800503e:	4601      	mov	r1, r0
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	f000 b823 	b.w	800508c <_malloc_r>
 8005046:	bf00      	nop
 8005048:	20000064 	.word	0x20000064

0800504c <sbrk_aligned>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4e0e      	ldr	r6, [pc, #56]	; (8005088 <sbrk_aligned+0x3c>)
 8005050:	460c      	mov	r4, r1
 8005052:	6831      	ldr	r1, [r6, #0]
 8005054:	4605      	mov	r5, r0
 8005056:	b911      	cbnz	r1, 800505e <sbrk_aligned+0x12>
 8005058:	f000 fea8 	bl	8005dac <_sbrk_r>
 800505c:	6030      	str	r0, [r6, #0]
 800505e:	4621      	mov	r1, r4
 8005060:	4628      	mov	r0, r5
 8005062:	f000 fea3 	bl	8005dac <_sbrk_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	d00a      	beq.n	8005080 <sbrk_aligned+0x34>
 800506a:	1cc4      	adds	r4, r0, #3
 800506c:	f024 0403 	bic.w	r4, r4, #3
 8005070:	42a0      	cmp	r0, r4
 8005072:	d007      	beq.n	8005084 <sbrk_aligned+0x38>
 8005074:	1a21      	subs	r1, r4, r0
 8005076:	4628      	mov	r0, r5
 8005078:	f000 fe98 	bl	8005dac <_sbrk_r>
 800507c:	3001      	adds	r0, #1
 800507e:	d101      	bne.n	8005084 <sbrk_aligned+0x38>
 8005080:	f04f 34ff 	mov.w	r4, #4294967295
 8005084:	4620      	mov	r0, r4
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	20000354 	.word	0x20000354

0800508c <_malloc_r>:
 800508c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005090:	1ccd      	adds	r5, r1, #3
 8005092:	f025 0503 	bic.w	r5, r5, #3
 8005096:	3508      	adds	r5, #8
 8005098:	2d0c      	cmp	r5, #12
 800509a:	bf38      	it	cc
 800509c:	250c      	movcc	r5, #12
 800509e:	2d00      	cmp	r5, #0
 80050a0:	4607      	mov	r7, r0
 80050a2:	db01      	blt.n	80050a8 <_malloc_r+0x1c>
 80050a4:	42a9      	cmp	r1, r5
 80050a6:	d905      	bls.n	80050b4 <_malloc_r+0x28>
 80050a8:	230c      	movs	r3, #12
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	2600      	movs	r6, #0
 80050ae:	4630      	mov	r0, r6
 80050b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005188 <_malloc_r+0xfc>
 80050b8:	f000 f868 	bl	800518c <__malloc_lock>
 80050bc:	f8d8 3000 	ldr.w	r3, [r8]
 80050c0:	461c      	mov	r4, r3
 80050c2:	bb5c      	cbnz	r4, 800511c <_malloc_r+0x90>
 80050c4:	4629      	mov	r1, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	f7ff ffc0 	bl	800504c <sbrk_aligned>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	4604      	mov	r4, r0
 80050d0:	d155      	bne.n	800517e <_malloc_r+0xf2>
 80050d2:	f8d8 4000 	ldr.w	r4, [r8]
 80050d6:	4626      	mov	r6, r4
 80050d8:	2e00      	cmp	r6, #0
 80050da:	d145      	bne.n	8005168 <_malloc_r+0xdc>
 80050dc:	2c00      	cmp	r4, #0
 80050de:	d048      	beq.n	8005172 <_malloc_r+0xe6>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	4631      	mov	r1, r6
 80050e4:	4638      	mov	r0, r7
 80050e6:	eb04 0903 	add.w	r9, r4, r3
 80050ea:	f000 fe5f 	bl	8005dac <_sbrk_r>
 80050ee:	4581      	cmp	r9, r0
 80050f0:	d13f      	bne.n	8005172 <_malloc_r+0xe6>
 80050f2:	6821      	ldr	r1, [r4, #0]
 80050f4:	1a6d      	subs	r5, r5, r1
 80050f6:	4629      	mov	r1, r5
 80050f8:	4638      	mov	r0, r7
 80050fa:	f7ff ffa7 	bl	800504c <sbrk_aligned>
 80050fe:	3001      	adds	r0, #1
 8005100:	d037      	beq.n	8005172 <_malloc_r+0xe6>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	442b      	add	r3, r5
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	f8d8 3000 	ldr.w	r3, [r8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d038      	beq.n	8005182 <_malloc_r+0xf6>
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	42a2      	cmp	r2, r4
 8005114:	d12b      	bne.n	800516e <_malloc_r+0xe2>
 8005116:	2200      	movs	r2, #0
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	e00f      	b.n	800513c <_malloc_r+0xb0>
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	1b52      	subs	r2, r2, r5
 8005120:	d41f      	bmi.n	8005162 <_malloc_r+0xd6>
 8005122:	2a0b      	cmp	r2, #11
 8005124:	d917      	bls.n	8005156 <_malloc_r+0xca>
 8005126:	1961      	adds	r1, r4, r5
 8005128:	42a3      	cmp	r3, r4
 800512a:	6025      	str	r5, [r4, #0]
 800512c:	bf18      	it	ne
 800512e:	6059      	strne	r1, [r3, #4]
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	bf08      	it	eq
 8005134:	f8c8 1000 	streq.w	r1, [r8]
 8005138:	5162      	str	r2, [r4, r5]
 800513a:	604b      	str	r3, [r1, #4]
 800513c:	4638      	mov	r0, r7
 800513e:	f104 060b 	add.w	r6, r4, #11
 8005142:	f000 f829 	bl	8005198 <__malloc_unlock>
 8005146:	f026 0607 	bic.w	r6, r6, #7
 800514a:	1d23      	adds	r3, r4, #4
 800514c:	1af2      	subs	r2, r6, r3
 800514e:	d0ae      	beq.n	80050ae <_malloc_r+0x22>
 8005150:	1b9b      	subs	r3, r3, r6
 8005152:	50a3      	str	r3, [r4, r2]
 8005154:	e7ab      	b.n	80050ae <_malloc_r+0x22>
 8005156:	42a3      	cmp	r3, r4
 8005158:	6862      	ldr	r2, [r4, #4]
 800515a:	d1dd      	bne.n	8005118 <_malloc_r+0x8c>
 800515c:	f8c8 2000 	str.w	r2, [r8]
 8005160:	e7ec      	b.n	800513c <_malloc_r+0xb0>
 8005162:	4623      	mov	r3, r4
 8005164:	6864      	ldr	r4, [r4, #4]
 8005166:	e7ac      	b.n	80050c2 <_malloc_r+0x36>
 8005168:	4634      	mov	r4, r6
 800516a:	6876      	ldr	r6, [r6, #4]
 800516c:	e7b4      	b.n	80050d8 <_malloc_r+0x4c>
 800516e:	4613      	mov	r3, r2
 8005170:	e7cc      	b.n	800510c <_malloc_r+0x80>
 8005172:	230c      	movs	r3, #12
 8005174:	603b      	str	r3, [r7, #0]
 8005176:	4638      	mov	r0, r7
 8005178:	f000 f80e 	bl	8005198 <__malloc_unlock>
 800517c:	e797      	b.n	80050ae <_malloc_r+0x22>
 800517e:	6025      	str	r5, [r4, #0]
 8005180:	e7dc      	b.n	800513c <_malloc_r+0xb0>
 8005182:	605b      	str	r3, [r3, #4]
 8005184:	deff      	udf	#255	; 0xff
 8005186:	bf00      	nop
 8005188:	20000350 	.word	0x20000350

0800518c <__malloc_lock>:
 800518c:	4801      	ldr	r0, [pc, #4]	; (8005194 <__malloc_lock+0x8>)
 800518e:	f7ff b87e 	b.w	800428e <__retarget_lock_acquire_recursive>
 8005192:	bf00      	nop
 8005194:	2000034c 	.word	0x2000034c

08005198 <__malloc_unlock>:
 8005198:	4801      	ldr	r0, [pc, #4]	; (80051a0 <__malloc_unlock+0x8>)
 800519a:	f7ff b879 	b.w	8004290 <__retarget_lock_release_recursive>
 800519e:	bf00      	nop
 80051a0:	2000034c 	.word	0x2000034c

080051a4 <_Balloc>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	69c6      	ldr	r6, [r0, #28]
 80051a8:	4604      	mov	r4, r0
 80051aa:	460d      	mov	r5, r1
 80051ac:	b976      	cbnz	r6, 80051cc <_Balloc+0x28>
 80051ae:	2010      	movs	r0, #16
 80051b0:	f7ff ff44 	bl	800503c <malloc>
 80051b4:	4602      	mov	r2, r0
 80051b6:	61e0      	str	r0, [r4, #28]
 80051b8:	b920      	cbnz	r0, 80051c4 <_Balloc+0x20>
 80051ba:	4b18      	ldr	r3, [pc, #96]	; (800521c <_Balloc+0x78>)
 80051bc:	4818      	ldr	r0, [pc, #96]	; (8005220 <_Balloc+0x7c>)
 80051be:	216b      	movs	r1, #107	; 0x6b
 80051c0:	f000 fe04 	bl	8005dcc <__assert_func>
 80051c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051c8:	6006      	str	r6, [r0, #0]
 80051ca:	60c6      	str	r6, [r0, #12]
 80051cc:	69e6      	ldr	r6, [r4, #28]
 80051ce:	68f3      	ldr	r3, [r6, #12]
 80051d0:	b183      	cbz	r3, 80051f4 <_Balloc+0x50>
 80051d2:	69e3      	ldr	r3, [r4, #28]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051da:	b9b8      	cbnz	r0, 800520c <_Balloc+0x68>
 80051dc:	2101      	movs	r1, #1
 80051de:	fa01 f605 	lsl.w	r6, r1, r5
 80051e2:	1d72      	adds	r2, r6, #5
 80051e4:	0092      	lsls	r2, r2, #2
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 fe0e 	bl	8005e08 <_calloc_r>
 80051ec:	b160      	cbz	r0, 8005208 <_Balloc+0x64>
 80051ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051f2:	e00e      	b.n	8005212 <_Balloc+0x6e>
 80051f4:	2221      	movs	r2, #33	; 0x21
 80051f6:	2104      	movs	r1, #4
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 fe05 	bl	8005e08 <_calloc_r>
 80051fe:	69e3      	ldr	r3, [r4, #28]
 8005200:	60f0      	str	r0, [r6, #12]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e4      	bne.n	80051d2 <_Balloc+0x2e>
 8005208:	2000      	movs	r0, #0
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	6802      	ldr	r2, [r0, #0]
 800520e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005212:	2300      	movs	r3, #0
 8005214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005218:	e7f7      	b.n	800520a <_Balloc+0x66>
 800521a:	bf00      	nop
 800521c:	08007179 	.word	0x08007179
 8005220:	080071f9 	.word	0x080071f9

08005224 <_Bfree>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	69c6      	ldr	r6, [r0, #28]
 8005228:	4605      	mov	r5, r0
 800522a:	460c      	mov	r4, r1
 800522c:	b976      	cbnz	r6, 800524c <_Bfree+0x28>
 800522e:	2010      	movs	r0, #16
 8005230:	f7ff ff04 	bl	800503c <malloc>
 8005234:	4602      	mov	r2, r0
 8005236:	61e8      	str	r0, [r5, #28]
 8005238:	b920      	cbnz	r0, 8005244 <_Bfree+0x20>
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <_Bfree+0x3c>)
 800523c:	4809      	ldr	r0, [pc, #36]	; (8005264 <_Bfree+0x40>)
 800523e:	218f      	movs	r1, #143	; 0x8f
 8005240:	f000 fdc4 	bl	8005dcc <__assert_func>
 8005244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005248:	6006      	str	r6, [r0, #0]
 800524a:	60c6      	str	r6, [r0, #12]
 800524c:	b13c      	cbz	r4, 800525e <_Bfree+0x3a>
 800524e:	69eb      	ldr	r3, [r5, #28]
 8005250:	6862      	ldr	r2, [r4, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005258:	6021      	str	r1, [r4, #0]
 800525a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	08007179 	.word	0x08007179
 8005264:	080071f9 	.word	0x080071f9

08005268 <__multadd>:
 8005268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526c:	690d      	ldr	r5, [r1, #16]
 800526e:	4607      	mov	r7, r0
 8005270:	460c      	mov	r4, r1
 8005272:	461e      	mov	r6, r3
 8005274:	f101 0c14 	add.w	ip, r1, #20
 8005278:	2000      	movs	r0, #0
 800527a:	f8dc 3000 	ldr.w	r3, [ip]
 800527e:	b299      	uxth	r1, r3
 8005280:	fb02 6101 	mla	r1, r2, r1, r6
 8005284:	0c1e      	lsrs	r6, r3, #16
 8005286:	0c0b      	lsrs	r3, r1, #16
 8005288:	fb02 3306 	mla	r3, r2, r6, r3
 800528c:	b289      	uxth	r1, r1
 800528e:	3001      	adds	r0, #1
 8005290:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005294:	4285      	cmp	r5, r0
 8005296:	f84c 1b04 	str.w	r1, [ip], #4
 800529a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800529e:	dcec      	bgt.n	800527a <__multadd+0x12>
 80052a0:	b30e      	cbz	r6, 80052e6 <__multadd+0x7e>
 80052a2:	68a3      	ldr	r3, [r4, #8]
 80052a4:	42ab      	cmp	r3, r5
 80052a6:	dc19      	bgt.n	80052dc <__multadd+0x74>
 80052a8:	6861      	ldr	r1, [r4, #4]
 80052aa:	4638      	mov	r0, r7
 80052ac:	3101      	adds	r1, #1
 80052ae:	f7ff ff79 	bl	80051a4 <_Balloc>
 80052b2:	4680      	mov	r8, r0
 80052b4:	b928      	cbnz	r0, 80052c2 <__multadd+0x5a>
 80052b6:	4602      	mov	r2, r0
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <__multadd+0x84>)
 80052ba:	480d      	ldr	r0, [pc, #52]	; (80052f0 <__multadd+0x88>)
 80052bc:	21ba      	movs	r1, #186	; 0xba
 80052be:	f000 fd85 	bl	8005dcc <__assert_func>
 80052c2:	6922      	ldr	r2, [r4, #16]
 80052c4:	3202      	adds	r2, #2
 80052c6:	f104 010c 	add.w	r1, r4, #12
 80052ca:	0092      	lsls	r2, r2, #2
 80052cc:	300c      	adds	r0, #12
 80052ce:	f7fe ffe0 	bl	8004292 <memcpy>
 80052d2:	4621      	mov	r1, r4
 80052d4:	4638      	mov	r0, r7
 80052d6:	f7ff ffa5 	bl	8005224 <_Bfree>
 80052da:	4644      	mov	r4, r8
 80052dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80052e0:	3501      	adds	r5, #1
 80052e2:	615e      	str	r6, [r3, #20]
 80052e4:	6125      	str	r5, [r4, #16]
 80052e6:	4620      	mov	r0, r4
 80052e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ec:	080071e8 	.word	0x080071e8
 80052f0:	080071f9 	.word	0x080071f9

080052f4 <__hi0bits>:
 80052f4:	0c03      	lsrs	r3, r0, #16
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	b9d3      	cbnz	r3, 8005330 <__hi0bits+0x3c>
 80052fa:	0400      	lsls	r0, r0, #16
 80052fc:	2310      	movs	r3, #16
 80052fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005302:	bf04      	itt	eq
 8005304:	0200      	lsleq	r0, r0, #8
 8005306:	3308      	addeq	r3, #8
 8005308:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800530c:	bf04      	itt	eq
 800530e:	0100      	lsleq	r0, r0, #4
 8005310:	3304      	addeq	r3, #4
 8005312:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005316:	bf04      	itt	eq
 8005318:	0080      	lsleq	r0, r0, #2
 800531a:	3302      	addeq	r3, #2
 800531c:	2800      	cmp	r0, #0
 800531e:	db05      	blt.n	800532c <__hi0bits+0x38>
 8005320:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005324:	f103 0301 	add.w	r3, r3, #1
 8005328:	bf08      	it	eq
 800532a:	2320      	moveq	r3, #32
 800532c:	4618      	mov	r0, r3
 800532e:	4770      	bx	lr
 8005330:	2300      	movs	r3, #0
 8005332:	e7e4      	b.n	80052fe <__hi0bits+0xa>

08005334 <__lo0bits>:
 8005334:	6803      	ldr	r3, [r0, #0]
 8005336:	f013 0207 	ands.w	r2, r3, #7
 800533a:	d00c      	beq.n	8005356 <__lo0bits+0x22>
 800533c:	07d9      	lsls	r1, r3, #31
 800533e:	d422      	bmi.n	8005386 <__lo0bits+0x52>
 8005340:	079a      	lsls	r2, r3, #30
 8005342:	bf49      	itett	mi
 8005344:	085b      	lsrmi	r3, r3, #1
 8005346:	089b      	lsrpl	r3, r3, #2
 8005348:	6003      	strmi	r3, [r0, #0]
 800534a:	2201      	movmi	r2, #1
 800534c:	bf5c      	itt	pl
 800534e:	6003      	strpl	r3, [r0, #0]
 8005350:	2202      	movpl	r2, #2
 8005352:	4610      	mov	r0, r2
 8005354:	4770      	bx	lr
 8005356:	b299      	uxth	r1, r3
 8005358:	b909      	cbnz	r1, 800535e <__lo0bits+0x2a>
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	2210      	movs	r2, #16
 800535e:	b2d9      	uxtb	r1, r3
 8005360:	b909      	cbnz	r1, 8005366 <__lo0bits+0x32>
 8005362:	3208      	adds	r2, #8
 8005364:	0a1b      	lsrs	r3, r3, #8
 8005366:	0719      	lsls	r1, r3, #28
 8005368:	bf04      	itt	eq
 800536a:	091b      	lsreq	r3, r3, #4
 800536c:	3204      	addeq	r2, #4
 800536e:	0799      	lsls	r1, r3, #30
 8005370:	bf04      	itt	eq
 8005372:	089b      	lsreq	r3, r3, #2
 8005374:	3202      	addeq	r2, #2
 8005376:	07d9      	lsls	r1, r3, #31
 8005378:	d403      	bmi.n	8005382 <__lo0bits+0x4e>
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	f102 0201 	add.w	r2, r2, #1
 8005380:	d003      	beq.n	800538a <__lo0bits+0x56>
 8005382:	6003      	str	r3, [r0, #0]
 8005384:	e7e5      	b.n	8005352 <__lo0bits+0x1e>
 8005386:	2200      	movs	r2, #0
 8005388:	e7e3      	b.n	8005352 <__lo0bits+0x1e>
 800538a:	2220      	movs	r2, #32
 800538c:	e7e1      	b.n	8005352 <__lo0bits+0x1e>
	...

08005390 <__i2b>:
 8005390:	b510      	push	{r4, lr}
 8005392:	460c      	mov	r4, r1
 8005394:	2101      	movs	r1, #1
 8005396:	f7ff ff05 	bl	80051a4 <_Balloc>
 800539a:	4602      	mov	r2, r0
 800539c:	b928      	cbnz	r0, 80053aa <__i2b+0x1a>
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <__i2b+0x24>)
 80053a0:	4805      	ldr	r0, [pc, #20]	; (80053b8 <__i2b+0x28>)
 80053a2:	f240 1145 	movw	r1, #325	; 0x145
 80053a6:	f000 fd11 	bl	8005dcc <__assert_func>
 80053aa:	2301      	movs	r3, #1
 80053ac:	6144      	str	r4, [r0, #20]
 80053ae:	6103      	str	r3, [r0, #16]
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	bf00      	nop
 80053b4:	080071e8 	.word	0x080071e8
 80053b8:	080071f9 	.word	0x080071f9

080053bc <__multiply>:
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	4691      	mov	r9, r2
 80053c2:	690a      	ldr	r2, [r1, #16]
 80053c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	bfb8      	it	lt
 80053cc:	460b      	movlt	r3, r1
 80053ce:	460c      	mov	r4, r1
 80053d0:	bfbc      	itt	lt
 80053d2:	464c      	movlt	r4, r9
 80053d4:	4699      	movlt	r9, r3
 80053d6:	6927      	ldr	r7, [r4, #16]
 80053d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80053dc:	68a3      	ldr	r3, [r4, #8]
 80053de:	6861      	ldr	r1, [r4, #4]
 80053e0:	eb07 060a 	add.w	r6, r7, sl
 80053e4:	42b3      	cmp	r3, r6
 80053e6:	b085      	sub	sp, #20
 80053e8:	bfb8      	it	lt
 80053ea:	3101      	addlt	r1, #1
 80053ec:	f7ff feda 	bl	80051a4 <_Balloc>
 80053f0:	b930      	cbnz	r0, 8005400 <__multiply+0x44>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b44      	ldr	r3, [pc, #272]	; (8005508 <__multiply+0x14c>)
 80053f6:	4845      	ldr	r0, [pc, #276]	; (800550c <__multiply+0x150>)
 80053f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80053fc:	f000 fce6 	bl	8005dcc <__assert_func>
 8005400:	f100 0514 	add.w	r5, r0, #20
 8005404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005408:	462b      	mov	r3, r5
 800540a:	2200      	movs	r2, #0
 800540c:	4543      	cmp	r3, r8
 800540e:	d321      	bcc.n	8005454 <__multiply+0x98>
 8005410:	f104 0314 	add.w	r3, r4, #20
 8005414:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005418:	f109 0314 	add.w	r3, r9, #20
 800541c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005420:	9202      	str	r2, [sp, #8]
 8005422:	1b3a      	subs	r2, r7, r4
 8005424:	3a15      	subs	r2, #21
 8005426:	f022 0203 	bic.w	r2, r2, #3
 800542a:	3204      	adds	r2, #4
 800542c:	f104 0115 	add.w	r1, r4, #21
 8005430:	428f      	cmp	r7, r1
 8005432:	bf38      	it	cc
 8005434:	2204      	movcc	r2, #4
 8005436:	9201      	str	r2, [sp, #4]
 8005438:	9a02      	ldr	r2, [sp, #8]
 800543a:	9303      	str	r3, [sp, #12]
 800543c:	429a      	cmp	r2, r3
 800543e:	d80c      	bhi.n	800545a <__multiply+0x9e>
 8005440:	2e00      	cmp	r6, #0
 8005442:	dd03      	ble.n	800544c <__multiply+0x90>
 8005444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005448:	2b00      	cmp	r3, #0
 800544a:	d05b      	beq.n	8005504 <__multiply+0x148>
 800544c:	6106      	str	r6, [r0, #16]
 800544e:	b005      	add	sp, #20
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	f843 2b04 	str.w	r2, [r3], #4
 8005458:	e7d8      	b.n	800540c <__multiply+0x50>
 800545a:	f8b3 a000 	ldrh.w	sl, [r3]
 800545e:	f1ba 0f00 	cmp.w	sl, #0
 8005462:	d024      	beq.n	80054ae <__multiply+0xf2>
 8005464:	f104 0e14 	add.w	lr, r4, #20
 8005468:	46a9      	mov	r9, r5
 800546a:	f04f 0c00 	mov.w	ip, #0
 800546e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005472:	f8d9 1000 	ldr.w	r1, [r9]
 8005476:	fa1f fb82 	uxth.w	fp, r2
 800547a:	b289      	uxth	r1, r1
 800547c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005480:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005484:	f8d9 2000 	ldr.w	r2, [r9]
 8005488:	4461      	add	r1, ip
 800548a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800548e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005492:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005496:	b289      	uxth	r1, r1
 8005498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800549c:	4577      	cmp	r7, lr
 800549e:	f849 1b04 	str.w	r1, [r9], #4
 80054a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80054a6:	d8e2      	bhi.n	800546e <__multiply+0xb2>
 80054a8:	9a01      	ldr	r2, [sp, #4]
 80054aa:	f845 c002 	str.w	ip, [r5, r2]
 80054ae:	9a03      	ldr	r2, [sp, #12]
 80054b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80054b4:	3304      	adds	r3, #4
 80054b6:	f1b9 0f00 	cmp.w	r9, #0
 80054ba:	d021      	beq.n	8005500 <__multiply+0x144>
 80054bc:	6829      	ldr	r1, [r5, #0]
 80054be:	f104 0c14 	add.w	ip, r4, #20
 80054c2:	46ae      	mov	lr, r5
 80054c4:	f04f 0a00 	mov.w	sl, #0
 80054c8:	f8bc b000 	ldrh.w	fp, [ip]
 80054cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80054d0:	fb09 220b 	mla	r2, r9, fp, r2
 80054d4:	4452      	add	r2, sl
 80054d6:	b289      	uxth	r1, r1
 80054d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80054dc:	f84e 1b04 	str.w	r1, [lr], #4
 80054e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80054e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80054e8:	f8be 1000 	ldrh.w	r1, [lr]
 80054ec:	fb09 110a 	mla	r1, r9, sl, r1
 80054f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80054f4:	4567      	cmp	r7, ip
 80054f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80054fa:	d8e5      	bhi.n	80054c8 <__multiply+0x10c>
 80054fc:	9a01      	ldr	r2, [sp, #4]
 80054fe:	50a9      	str	r1, [r5, r2]
 8005500:	3504      	adds	r5, #4
 8005502:	e799      	b.n	8005438 <__multiply+0x7c>
 8005504:	3e01      	subs	r6, #1
 8005506:	e79b      	b.n	8005440 <__multiply+0x84>
 8005508:	080071e8 	.word	0x080071e8
 800550c:	080071f9 	.word	0x080071f9

08005510 <__pow5mult>:
 8005510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005514:	4615      	mov	r5, r2
 8005516:	f012 0203 	ands.w	r2, r2, #3
 800551a:	4606      	mov	r6, r0
 800551c:	460f      	mov	r7, r1
 800551e:	d007      	beq.n	8005530 <__pow5mult+0x20>
 8005520:	4c25      	ldr	r4, [pc, #148]	; (80055b8 <__pow5mult+0xa8>)
 8005522:	3a01      	subs	r2, #1
 8005524:	2300      	movs	r3, #0
 8005526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800552a:	f7ff fe9d 	bl	8005268 <__multadd>
 800552e:	4607      	mov	r7, r0
 8005530:	10ad      	asrs	r5, r5, #2
 8005532:	d03d      	beq.n	80055b0 <__pow5mult+0xa0>
 8005534:	69f4      	ldr	r4, [r6, #28]
 8005536:	b97c      	cbnz	r4, 8005558 <__pow5mult+0x48>
 8005538:	2010      	movs	r0, #16
 800553a:	f7ff fd7f 	bl	800503c <malloc>
 800553e:	4602      	mov	r2, r0
 8005540:	61f0      	str	r0, [r6, #28]
 8005542:	b928      	cbnz	r0, 8005550 <__pow5mult+0x40>
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <__pow5mult+0xac>)
 8005546:	481e      	ldr	r0, [pc, #120]	; (80055c0 <__pow5mult+0xb0>)
 8005548:	f240 11b3 	movw	r1, #435	; 0x1b3
 800554c:	f000 fc3e 	bl	8005dcc <__assert_func>
 8005550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005554:	6004      	str	r4, [r0, #0]
 8005556:	60c4      	str	r4, [r0, #12]
 8005558:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800555c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005560:	b94c      	cbnz	r4, 8005576 <__pow5mult+0x66>
 8005562:	f240 2171 	movw	r1, #625	; 0x271
 8005566:	4630      	mov	r0, r6
 8005568:	f7ff ff12 	bl	8005390 <__i2b>
 800556c:	2300      	movs	r3, #0
 800556e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005572:	4604      	mov	r4, r0
 8005574:	6003      	str	r3, [r0, #0]
 8005576:	f04f 0900 	mov.w	r9, #0
 800557a:	07eb      	lsls	r3, r5, #31
 800557c:	d50a      	bpl.n	8005594 <__pow5mult+0x84>
 800557e:	4639      	mov	r1, r7
 8005580:	4622      	mov	r2, r4
 8005582:	4630      	mov	r0, r6
 8005584:	f7ff ff1a 	bl	80053bc <__multiply>
 8005588:	4639      	mov	r1, r7
 800558a:	4680      	mov	r8, r0
 800558c:	4630      	mov	r0, r6
 800558e:	f7ff fe49 	bl	8005224 <_Bfree>
 8005592:	4647      	mov	r7, r8
 8005594:	106d      	asrs	r5, r5, #1
 8005596:	d00b      	beq.n	80055b0 <__pow5mult+0xa0>
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	b938      	cbnz	r0, 80055ac <__pow5mult+0x9c>
 800559c:	4622      	mov	r2, r4
 800559e:	4621      	mov	r1, r4
 80055a0:	4630      	mov	r0, r6
 80055a2:	f7ff ff0b 	bl	80053bc <__multiply>
 80055a6:	6020      	str	r0, [r4, #0]
 80055a8:	f8c0 9000 	str.w	r9, [r0]
 80055ac:	4604      	mov	r4, r0
 80055ae:	e7e4      	b.n	800557a <__pow5mult+0x6a>
 80055b0:	4638      	mov	r0, r7
 80055b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055b6:	bf00      	nop
 80055b8:	08007348 	.word	0x08007348
 80055bc:	08007179 	.word	0x08007179
 80055c0:	080071f9 	.word	0x080071f9

080055c4 <__lshift>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	460c      	mov	r4, r1
 80055ca:	6849      	ldr	r1, [r1, #4]
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055d2:	68a3      	ldr	r3, [r4, #8]
 80055d4:	4607      	mov	r7, r0
 80055d6:	4691      	mov	r9, r2
 80055d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055dc:	f108 0601 	add.w	r6, r8, #1
 80055e0:	42b3      	cmp	r3, r6
 80055e2:	db0b      	blt.n	80055fc <__lshift+0x38>
 80055e4:	4638      	mov	r0, r7
 80055e6:	f7ff fddd 	bl	80051a4 <_Balloc>
 80055ea:	4605      	mov	r5, r0
 80055ec:	b948      	cbnz	r0, 8005602 <__lshift+0x3e>
 80055ee:	4602      	mov	r2, r0
 80055f0:	4b28      	ldr	r3, [pc, #160]	; (8005694 <__lshift+0xd0>)
 80055f2:	4829      	ldr	r0, [pc, #164]	; (8005698 <__lshift+0xd4>)
 80055f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80055f8:	f000 fbe8 	bl	8005dcc <__assert_func>
 80055fc:	3101      	adds	r1, #1
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	e7ee      	b.n	80055e0 <__lshift+0x1c>
 8005602:	2300      	movs	r3, #0
 8005604:	f100 0114 	add.w	r1, r0, #20
 8005608:	f100 0210 	add.w	r2, r0, #16
 800560c:	4618      	mov	r0, r3
 800560e:	4553      	cmp	r3, sl
 8005610:	db33      	blt.n	800567a <__lshift+0xb6>
 8005612:	6920      	ldr	r0, [r4, #16]
 8005614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005618:	f104 0314 	add.w	r3, r4, #20
 800561c:	f019 091f 	ands.w	r9, r9, #31
 8005620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005628:	d02b      	beq.n	8005682 <__lshift+0xbe>
 800562a:	f1c9 0e20 	rsb	lr, r9, #32
 800562e:	468a      	mov	sl, r1
 8005630:	2200      	movs	r2, #0
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	fa00 f009 	lsl.w	r0, r0, r9
 8005638:	4310      	orrs	r0, r2
 800563a:	f84a 0b04 	str.w	r0, [sl], #4
 800563e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005642:	459c      	cmp	ip, r3
 8005644:	fa22 f20e 	lsr.w	r2, r2, lr
 8005648:	d8f3      	bhi.n	8005632 <__lshift+0x6e>
 800564a:	ebac 0304 	sub.w	r3, ip, r4
 800564e:	3b15      	subs	r3, #21
 8005650:	f023 0303 	bic.w	r3, r3, #3
 8005654:	3304      	adds	r3, #4
 8005656:	f104 0015 	add.w	r0, r4, #21
 800565a:	4584      	cmp	ip, r0
 800565c:	bf38      	it	cc
 800565e:	2304      	movcc	r3, #4
 8005660:	50ca      	str	r2, [r1, r3]
 8005662:	b10a      	cbz	r2, 8005668 <__lshift+0xa4>
 8005664:	f108 0602 	add.w	r6, r8, #2
 8005668:	3e01      	subs	r6, #1
 800566a:	4638      	mov	r0, r7
 800566c:	612e      	str	r6, [r5, #16]
 800566e:	4621      	mov	r1, r4
 8005670:	f7ff fdd8 	bl	8005224 <_Bfree>
 8005674:	4628      	mov	r0, r5
 8005676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567a:	f842 0f04 	str.w	r0, [r2, #4]!
 800567e:	3301      	adds	r3, #1
 8005680:	e7c5      	b.n	800560e <__lshift+0x4a>
 8005682:	3904      	subs	r1, #4
 8005684:	f853 2b04 	ldr.w	r2, [r3], #4
 8005688:	f841 2f04 	str.w	r2, [r1, #4]!
 800568c:	459c      	cmp	ip, r3
 800568e:	d8f9      	bhi.n	8005684 <__lshift+0xc0>
 8005690:	e7ea      	b.n	8005668 <__lshift+0xa4>
 8005692:	bf00      	nop
 8005694:	080071e8 	.word	0x080071e8
 8005698:	080071f9 	.word	0x080071f9

0800569c <__mcmp>:
 800569c:	b530      	push	{r4, r5, lr}
 800569e:	6902      	ldr	r2, [r0, #16]
 80056a0:	690c      	ldr	r4, [r1, #16]
 80056a2:	1b12      	subs	r2, r2, r4
 80056a4:	d10e      	bne.n	80056c4 <__mcmp+0x28>
 80056a6:	f100 0314 	add.w	r3, r0, #20
 80056aa:	3114      	adds	r1, #20
 80056ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80056b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80056b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80056b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80056bc:	42a5      	cmp	r5, r4
 80056be:	d003      	beq.n	80056c8 <__mcmp+0x2c>
 80056c0:	d305      	bcc.n	80056ce <__mcmp+0x32>
 80056c2:	2201      	movs	r2, #1
 80056c4:	4610      	mov	r0, r2
 80056c6:	bd30      	pop	{r4, r5, pc}
 80056c8:	4283      	cmp	r3, r0
 80056ca:	d3f3      	bcc.n	80056b4 <__mcmp+0x18>
 80056cc:	e7fa      	b.n	80056c4 <__mcmp+0x28>
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295
 80056d2:	e7f7      	b.n	80056c4 <__mcmp+0x28>

080056d4 <__mdiff>:
 80056d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d8:	460c      	mov	r4, r1
 80056da:	4606      	mov	r6, r0
 80056dc:	4611      	mov	r1, r2
 80056de:	4620      	mov	r0, r4
 80056e0:	4690      	mov	r8, r2
 80056e2:	f7ff ffdb 	bl	800569c <__mcmp>
 80056e6:	1e05      	subs	r5, r0, #0
 80056e8:	d110      	bne.n	800570c <__mdiff+0x38>
 80056ea:	4629      	mov	r1, r5
 80056ec:	4630      	mov	r0, r6
 80056ee:	f7ff fd59 	bl	80051a4 <_Balloc>
 80056f2:	b930      	cbnz	r0, 8005702 <__mdiff+0x2e>
 80056f4:	4b3a      	ldr	r3, [pc, #232]	; (80057e0 <__mdiff+0x10c>)
 80056f6:	4602      	mov	r2, r0
 80056f8:	f240 2137 	movw	r1, #567	; 0x237
 80056fc:	4839      	ldr	r0, [pc, #228]	; (80057e4 <__mdiff+0x110>)
 80056fe:	f000 fb65 	bl	8005dcc <__assert_func>
 8005702:	2301      	movs	r3, #1
 8005704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570c:	bfa4      	itt	ge
 800570e:	4643      	movge	r3, r8
 8005710:	46a0      	movge	r8, r4
 8005712:	4630      	mov	r0, r6
 8005714:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005718:	bfa6      	itte	ge
 800571a:	461c      	movge	r4, r3
 800571c:	2500      	movge	r5, #0
 800571e:	2501      	movlt	r5, #1
 8005720:	f7ff fd40 	bl	80051a4 <_Balloc>
 8005724:	b920      	cbnz	r0, 8005730 <__mdiff+0x5c>
 8005726:	4b2e      	ldr	r3, [pc, #184]	; (80057e0 <__mdiff+0x10c>)
 8005728:	4602      	mov	r2, r0
 800572a:	f240 2145 	movw	r1, #581	; 0x245
 800572e:	e7e5      	b.n	80056fc <__mdiff+0x28>
 8005730:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005734:	6926      	ldr	r6, [r4, #16]
 8005736:	60c5      	str	r5, [r0, #12]
 8005738:	f104 0914 	add.w	r9, r4, #20
 800573c:	f108 0514 	add.w	r5, r8, #20
 8005740:	f100 0e14 	add.w	lr, r0, #20
 8005744:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005748:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800574c:	f108 0210 	add.w	r2, r8, #16
 8005750:	46f2      	mov	sl, lr
 8005752:	2100      	movs	r1, #0
 8005754:	f859 3b04 	ldr.w	r3, [r9], #4
 8005758:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800575c:	fa11 f88b 	uxtah	r8, r1, fp
 8005760:	b299      	uxth	r1, r3
 8005762:	0c1b      	lsrs	r3, r3, #16
 8005764:	eba8 0801 	sub.w	r8, r8, r1
 8005768:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800576c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005770:	fa1f f888 	uxth.w	r8, r8
 8005774:	1419      	asrs	r1, r3, #16
 8005776:	454e      	cmp	r6, r9
 8005778:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800577c:	f84a 3b04 	str.w	r3, [sl], #4
 8005780:	d8e8      	bhi.n	8005754 <__mdiff+0x80>
 8005782:	1b33      	subs	r3, r6, r4
 8005784:	3b15      	subs	r3, #21
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	3304      	adds	r3, #4
 800578c:	3415      	adds	r4, #21
 800578e:	42a6      	cmp	r6, r4
 8005790:	bf38      	it	cc
 8005792:	2304      	movcc	r3, #4
 8005794:	441d      	add	r5, r3
 8005796:	4473      	add	r3, lr
 8005798:	469e      	mov	lr, r3
 800579a:	462e      	mov	r6, r5
 800579c:	4566      	cmp	r6, ip
 800579e:	d30e      	bcc.n	80057be <__mdiff+0xea>
 80057a0:	f10c 0203 	add.w	r2, ip, #3
 80057a4:	1b52      	subs	r2, r2, r5
 80057a6:	f022 0203 	bic.w	r2, r2, #3
 80057aa:	3d03      	subs	r5, #3
 80057ac:	45ac      	cmp	ip, r5
 80057ae:	bf38      	it	cc
 80057b0:	2200      	movcc	r2, #0
 80057b2:	4413      	add	r3, r2
 80057b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80057b8:	b17a      	cbz	r2, 80057da <__mdiff+0x106>
 80057ba:	6107      	str	r7, [r0, #16]
 80057bc:	e7a4      	b.n	8005708 <__mdiff+0x34>
 80057be:	f856 8b04 	ldr.w	r8, [r6], #4
 80057c2:	fa11 f288 	uxtah	r2, r1, r8
 80057c6:	1414      	asrs	r4, r2, #16
 80057c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80057cc:	b292      	uxth	r2, r2
 80057ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80057d2:	f84e 2b04 	str.w	r2, [lr], #4
 80057d6:	1421      	asrs	r1, r4, #16
 80057d8:	e7e0      	b.n	800579c <__mdiff+0xc8>
 80057da:	3f01      	subs	r7, #1
 80057dc:	e7ea      	b.n	80057b4 <__mdiff+0xe0>
 80057de:	bf00      	nop
 80057e0:	080071e8 	.word	0x080071e8
 80057e4:	080071f9 	.word	0x080071f9

080057e8 <__d2b>:
 80057e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057ec:	460f      	mov	r7, r1
 80057ee:	2101      	movs	r1, #1
 80057f0:	ec59 8b10 	vmov	r8, r9, d0
 80057f4:	4616      	mov	r6, r2
 80057f6:	f7ff fcd5 	bl	80051a4 <_Balloc>
 80057fa:	4604      	mov	r4, r0
 80057fc:	b930      	cbnz	r0, 800580c <__d2b+0x24>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b24      	ldr	r3, [pc, #144]	; (8005894 <__d2b+0xac>)
 8005802:	4825      	ldr	r0, [pc, #148]	; (8005898 <__d2b+0xb0>)
 8005804:	f240 310f 	movw	r1, #783	; 0x30f
 8005808:	f000 fae0 	bl	8005dcc <__assert_func>
 800580c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005814:	bb2d      	cbnz	r5, 8005862 <__d2b+0x7a>
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	f1b8 0300 	subs.w	r3, r8, #0
 800581c:	d026      	beq.n	800586c <__d2b+0x84>
 800581e:	4668      	mov	r0, sp
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	f7ff fd87 	bl	8005334 <__lo0bits>
 8005826:	e9dd 1200 	ldrd	r1, r2, [sp]
 800582a:	b1e8      	cbz	r0, 8005868 <__d2b+0x80>
 800582c:	f1c0 0320 	rsb	r3, r0, #32
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	430b      	orrs	r3, r1
 8005836:	40c2      	lsrs	r2, r0
 8005838:	6163      	str	r3, [r4, #20]
 800583a:	9201      	str	r2, [sp, #4]
 800583c:	9b01      	ldr	r3, [sp, #4]
 800583e:	61a3      	str	r3, [r4, #24]
 8005840:	2b00      	cmp	r3, #0
 8005842:	bf14      	ite	ne
 8005844:	2202      	movne	r2, #2
 8005846:	2201      	moveq	r2, #1
 8005848:	6122      	str	r2, [r4, #16]
 800584a:	b1bd      	cbz	r5, 800587c <__d2b+0x94>
 800584c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005850:	4405      	add	r5, r0
 8005852:	603d      	str	r5, [r7, #0]
 8005854:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	4620      	mov	r0, r4
 800585c:	b003      	add	sp, #12
 800585e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005866:	e7d6      	b.n	8005816 <__d2b+0x2e>
 8005868:	6161      	str	r1, [r4, #20]
 800586a:	e7e7      	b.n	800583c <__d2b+0x54>
 800586c:	a801      	add	r0, sp, #4
 800586e:	f7ff fd61 	bl	8005334 <__lo0bits>
 8005872:	9b01      	ldr	r3, [sp, #4]
 8005874:	6163      	str	r3, [r4, #20]
 8005876:	3020      	adds	r0, #32
 8005878:	2201      	movs	r2, #1
 800587a:	e7e5      	b.n	8005848 <__d2b+0x60>
 800587c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005880:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005884:	6038      	str	r0, [r7, #0]
 8005886:	6918      	ldr	r0, [r3, #16]
 8005888:	f7ff fd34 	bl	80052f4 <__hi0bits>
 800588c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005890:	e7e2      	b.n	8005858 <__d2b+0x70>
 8005892:	bf00      	nop
 8005894:	080071e8 	.word	0x080071e8
 8005898:	080071f9 	.word	0x080071f9

0800589c <__sfputc_r>:
 800589c:	6893      	ldr	r3, [r2, #8]
 800589e:	3b01      	subs	r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	b410      	push	{r4}
 80058a4:	6093      	str	r3, [r2, #8]
 80058a6:	da08      	bge.n	80058ba <__sfputc_r+0x1e>
 80058a8:	6994      	ldr	r4, [r2, #24]
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	db01      	blt.n	80058b2 <__sfputc_r+0x16>
 80058ae:	290a      	cmp	r1, #10
 80058b0:	d103      	bne.n	80058ba <__sfputc_r+0x1e>
 80058b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b6:	f000 b9e3 	b.w	8005c80 <__swbuf_r>
 80058ba:	6813      	ldr	r3, [r2, #0]
 80058bc:	1c58      	adds	r0, r3, #1
 80058be:	6010      	str	r0, [r2, #0]
 80058c0:	7019      	strb	r1, [r3, #0]
 80058c2:	4608      	mov	r0, r1
 80058c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <__sfputs_r>:
 80058ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058cc:	4606      	mov	r6, r0
 80058ce:	460f      	mov	r7, r1
 80058d0:	4614      	mov	r4, r2
 80058d2:	18d5      	adds	r5, r2, r3
 80058d4:	42ac      	cmp	r4, r5
 80058d6:	d101      	bne.n	80058dc <__sfputs_r+0x12>
 80058d8:	2000      	movs	r0, #0
 80058da:	e007      	b.n	80058ec <__sfputs_r+0x22>
 80058dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e0:	463a      	mov	r2, r7
 80058e2:	4630      	mov	r0, r6
 80058e4:	f7ff ffda 	bl	800589c <__sfputc_r>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d1f3      	bne.n	80058d4 <__sfputs_r+0xa>
 80058ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058f0 <_vfiprintf_r>:
 80058f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	460d      	mov	r5, r1
 80058f6:	b09d      	sub	sp, #116	; 0x74
 80058f8:	4614      	mov	r4, r2
 80058fa:	4698      	mov	r8, r3
 80058fc:	4606      	mov	r6, r0
 80058fe:	b118      	cbz	r0, 8005908 <_vfiprintf_r+0x18>
 8005900:	6a03      	ldr	r3, [r0, #32]
 8005902:	b90b      	cbnz	r3, 8005908 <_vfiprintf_r+0x18>
 8005904:	f7fe fbba 	bl	800407c <__sinit>
 8005908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800590a:	07d9      	lsls	r1, r3, #31
 800590c:	d405      	bmi.n	800591a <_vfiprintf_r+0x2a>
 800590e:	89ab      	ldrh	r3, [r5, #12]
 8005910:	059a      	lsls	r2, r3, #22
 8005912:	d402      	bmi.n	800591a <_vfiprintf_r+0x2a>
 8005914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005916:	f7fe fcba 	bl	800428e <__retarget_lock_acquire_recursive>
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	071b      	lsls	r3, r3, #28
 800591e:	d501      	bpl.n	8005924 <_vfiprintf_r+0x34>
 8005920:	692b      	ldr	r3, [r5, #16]
 8005922:	b99b      	cbnz	r3, 800594c <_vfiprintf_r+0x5c>
 8005924:	4629      	mov	r1, r5
 8005926:	4630      	mov	r0, r6
 8005928:	f000 f9e8 	bl	8005cfc <__swsetup_r>
 800592c:	b170      	cbz	r0, 800594c <_vfiprintf_r+0x5c>
 800592e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005930:	07dc      	lsls	r4, r3, #31
 8005932:	d504      	bpl.n	800593e <_vfiprintf_r+0x4e>
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	b01d      	add	sp, #116	; 0x74
 800593a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	0598      	lsls	r0, r3, #22
 8005942:	d4f7      	bmi.n	8005934 <_vfiprintf_r+0x44>
 8005944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005946:	f7fe fca3 	bl	8004290 <__retarget_lock_release_recursive>
 800594a:	e7f3      	b.n	8005934 <_vfiprintf_r+0x44>
 800594c:	2300      	movs	r3, #0
 800594e:	9309      	str	r3, [sp, #36]	; 0x24
 8005950:	2320      	movs	r3, #32
 8005952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005956:	f8cd 800c 	str.w	r8, [sp, #12]
 800595a:	2330      	movs	r3, #48	; 0x30
 800595c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005b10 <_vfiprintf_r+0x220>
 8005960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005964:	f04f 0901 	mov.w	r9, #1
 8005968:	4623      	mov	r3, r4
 800596a:	469a      	mov	sl, r3
 800596c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005970:	b10a      	cbz	r2, 8005976 <_vfiprintf_r+0x86>
 8005972:	2a25      	cmp	r2, #37	; 0x25
 8005974:	d1f9      	bne.n	800596a <_vfiprintf_r+0x7a>
 8005976:	ebba 0b04 	subs.w	fp, sl, r4
 800597a:	d00b      	beq.n	8005994 <_vfiprintf_r+0xa4>
 800597c:	465b      	mov	r3, fp
 800597e:	4622      	mov	r2, r4
 8005980:	4629      	mov	r1, r5
 8005982:	4630      	mov	r0, r6
 8005984:	f7ff ffa1 	bl	80058ca <__sfputs_r>
 8005988:	3001      	adds	r0, #1
 800598a:	f000 80a9 	beq.w	8005ae0 <_vfiprintf_r+0x1f0>
 800598e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005990:	445a      	add	r2, fp
 8005992:	9209      	str	r2, [sp, #36]	; 0x24
 8005994:	f89a 3000 	ldrb.w	r3, [sl]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80a1 	beq.w	8005ae0 <_vfiprintf_r+0x1f0>
 800599e:	2300      	movs	r3, #0
 80059a0:	f04f 32ff 	mov.w	r2, #4294967295
 80059a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059a8:	f10a 0a01 	add.w	sl, sl, #1
 80059ac:	9304      	str	r3, [sp, #16]
 80059ae:	9307      	str	r3, [sp, #28]
 80059b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059b4:	931a      	str	r3, [sp, #104]	; 0x68
 80059b6:	4654      	mov	r4, sl
 80059b8:	2205      	movs	r2, #5
 80059ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059be:	4854      	ldr	r0, [pc, #336]	; (8005b10 <_vfiprintf_r+0x220>)
 80059c0:	f7fa fc46 	bl	8000250 <memchr>
 80059c4:	9a04      	ldr	r2, [sp, #16]
 80059c6:	b9d8      	cbnz	r0, 8005a00 <_vfiprintf_r+0x110>
 80059c8:	06d1      	lsls	r1, r2, #27
 80059ca:	bf44      	itt	mi
 80059cc:	2320      	movmi	r3, #32
 80059ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d2:	0713      	lsls	r3, r2, #28
 80059d4:	bf44      	itt	mi
 80059d6:	232b      	movmi	r3, #43	; 0x2b
 80059d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059dc:	f89a 3000 	ldrb.w	r3, [sl]
 80059e0:	2b2a      	cmp	r3, #42	; 0x2a
 80059e2:	d015      	beq.n	8005a10 <_vfiprintf_r+0x120>
 80059e4:	9a07      	ldr	r2, [sp, #28]
 80059e6:	4654      	mov	r4, sl
 80059e8:	2000      	movs	r0, #0
 80059ea:	f04f 0c0a 	mov.w	ip, #10
 80059ee:	4621      	mov	r1, r4
 80059f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f4:	3b30      	subs	r3, #48	; 0x30
 80059f6:	2b09      	cmp	r3, #9
 80059f8:	d94d      	bls.n	8005a96 <_vfiprintf_r+0x1a6>
 80059fa:	b1b0      	cbz	r0, 8005a2a <_vfiprintf_r+0x13a>
 80059fc:	9207      	str	r2, [sp, #28]
 80059fe:	e014      	b.n	8005a2a <_vfiprintf_r+0x13a>
 8005a00:	eba0 0308 	sub.w	r3, r0, r8
 8005a04:	fa09 f303 	lsl.w	r3, r9, r3
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	9304      	str	r3, [sp, #16]
 8005a0c:	46a2      	mov	sl, r4
 8005a0e:	e7d2      	b.n	80059b6 <_vfiprintf_r+0xc6>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	1d19      	adds	r1, r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	9103      	str	r1, [sp, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	bfbb      	ittet	lt
 8005a1c:	425b      	neglt	r3, r3
 8005a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a22:	9307      	strge	r3, [sp, #28]
 8005a24:	9307      	strlt	r3, [sp, #28]
 8005a26:	bfb8      	it	lt
 8005a28:	9204      	strlt	r2, [sp, #16]
 8005a2a:	7823      	ldrb	r3, [r4, #0]
 8005a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a2e:	d10c      	bne.n	8005a4a <_vfiprintf_r+0x15a>
 8005a30:	7863      	ldrb	r3, [r4, #1]
 8005a32:	2b2a      	cmp	r3, #42	; 0x2a
 8005a34:	d134      	bne.n	8005aa0 <_vfiprintf_r+0x1b0>
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	1d1a      	adds	r2, r3, #4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	9203      	str	r2, [sp, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bfb8      	it	lt
 8005a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a46:	3402      	adds	r4, #2
 8005a48:	9305      	str	r3, [sp, #20]
 8005a4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005b20 <_vfiprintf_r+0x230>
 8005a4e:	7821      	ldrb	r1, [r4, #0]
 8005a50:	2203      	movs	r2, #3
 8005a52:	4650      	mov	r0, sl
 8005a54:	f7fa fbfc 	bl	8000250 <memchr>
 8005a58:	b138      	cbz	r0, 8005a6a <_vfiprintf_r+0x17a>
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	eba0 000a 	sub.w	r0, r0, sl
 8005a60:	2240      	movs	r2, #64	; 0x40
 8005a62:	4082      	lsls	r2, r0
 8005a64:	4313      	orrs	r3, r2
 8005a66:	3401      	adds	r4, #1
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a6e:	4829      	ldr	r0, [pc, #164]	; (8005b14 <_vfiprintf_r+0x224>)
 8005a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a74:	2206      	movs	r2, #6
 8005a76:	f7fa fbeb 	bl	8000250 <memchr>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d03f      	beq.n	8005afe <_vfiprintf_r+0x20e>
 8005a7e:	4b26      	ldr	r3, [pc, #152]	; (8005b18 <_vfiprintf_r+0x228>)
 8005a80:	bb1b      	cbnz	r3, 8005aca <_vfiprintf_r+0x1da>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	3307      	adds	r3, #7
 8005a86:	f023 0307 	bic.w	r3, r3, #7
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	443b      	add	r3, r7
 8005a92:	9309      	str	r3, [sp, #36]	; 0x24
 8005a94:	e768      	b.n	8005968 <_vfiprintf_r+0x78>
 8005a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	e7a6      	b.n	80059ee <_vfiprintf_r+0xfe>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	3401      	adds	r4, #1
 8005aa4:	9305      	str	r3, [sp, #20]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f04f 0c0a 	mov.w	ip, #10
 8005aac:	4620      	mov	r0, r4
 8005aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ab2:	3a30      	subs	r2, #48	; 0x30
 8005ab4:	2a09      	cmp	r2, #9
 8005ab6:	d903      	bls.n	8005ac0 <_vfiprintf_r+0x1d0>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0c6      	beq.n	8005a4a <_vfiprintf_r+0x15a>
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	e7c4      	b.n	8005a4a <_vfiprintf_r+0x15a>
 8005ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e7f0      	b.n	8005aac <_vfiprintf_r+0x1bc>
 8005aca:	ab03      	add	r3, sp, #12
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	462a      	mov	r2, r5
 8005ad0:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <_vfiprintf_r+0x22c>)
 8005ad2:	a904      	add	r1, sp, #16
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7fd fe7f 	bl	80037d8 <_printf_float>
 8005ada:	4607      	mov	r7, r0
 8005adc:	1c78      	adds	r0, r7, #1
 8005ade:	d1d6      	bne.n	8005a8e <_vfiprintf_r+0x19e>
 8005ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ae2:	07d9      	lsls	r1, r3, #31
 8005ae4:	d405      	bmi.n	8005af2 <_vfiprintf_r+0x202>
 8005ae6:	89ab      	ldrh	r3, [r5, #12]
 8005ae8:	059a      	lsls	r2, r3, #22
 8005aea:	d402      	bmi.n	8005af2 <_vfiprintf_r+0x202>
 8005aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aee:	f7fe fbcf 	bl	8004290 <__retarget_lock_release_recursive>
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	065b      	lsls	r3, r3, #25
 8005af6:	f53f af1d 	bmi.w	8005934 <_vfiprintf_r+0x44>
 8005afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005afc:	e71c      	b.n	8005938 <_vfiprintf_r+0x48>
 8005afe:	ab03      	add	r3, sp, #12
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	462a      	mov	r2, r5
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <_vfiprintf_r+0x22c>)
 8005b06:	a904      	add	r1, sp, #16
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f7fe f909 	bl	8003d20 <_printf_i>
 8005b0e:	e7e4      	b.n	8005ada <_vfiprintf_r+0x1ea>
 8005b10:	08007354 	.word	0x08007354
 8005b14:	0800735e 	.word	0x0800735e
 8005b18:	080037d9 	.word	0x080037d9
 8005b1c:	080058cb 	.word	0x080058cb
 8005b20:	0800735a 	.word	0x0800735a

08005b24 <__sflush_r>:
 8005b24:	898a      	ldrh	r2, [r1, #12]
 8005b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	0710      	lsls	r0, r2, #28
 8005b2e:	460c      	mov	r4, r1
 8005b30:	d458      	bmi.n	8005be4 <__sflush_r+0xc0>
 8005b32:	684b      	ldr	r3, [r1, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	dc05      	bgt.n	8005b44 <__sflush_r+0x20>
 8005b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dc02      	bgt.n	8005b44 <__sflush_r+0x20>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b46:	2e00      	cmp	r6, #0
 8005b48:	d0f9      	beq.n	8005b3e <__sflush_r+0x1a>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b50:	682f      	ldr	r7, [r5, #0]
 8005b52:	6a21      	ldr	r1, [r4, #32]
 8005b54:	602b      	str	r3, [r5, #0]
 8005b56:	d032      	beq.n	8005bbe <__sflush_r+0x9a>
 8005b58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	075a      	lsls	r2, r3, #29
 8005b5e:	d505      	bpl.n	8005b6c <__sflush_r+0x48>
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	1ac0      	subs	r0, r0, r3
 8005b64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b66:	b10b      	cbz	r3, 8005b6c <__sflush_r+0x48>
 8005b68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b6a:	1ac0      	subs	r0, r0, r3
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b72:	6a21      	ldr	r1, [r4, #32]
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b0      	blx	r6
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	d106      	bne.n	8005b8c <__sflush_r+0x68>
 8005b7e:	6829      	ldr	r1, [r5, #0]
 8005b80:	291d      	cmp	r1, #29
 8005b82:	d82b      	bhi.n	8005bdc <__sflush_r+0xb8>
 8005b84:	4a29      	ldr	r2, [pc, #164]	; (8005c2c <__sflush_r+0x108>)
 8005b86:	410a      	asrs	r2, r1
 8005b88:	07d6      	lsls	r6, r2, #31
 8005b8a:	d427      	bmi.n	8005bdc <__sflush_r+0xb8>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	6062      	str	r2, [r4, #4]
 8005b90:	04d9      	lsls	r1, r3, #19
 8005b92:	6922      	ldr	r2, [r4, #16]
 8005b94:	6022      	str	r2, [r4, #0]
 8005b96:	d504      	bpl.n	8005ba2 <__sflush_r+0x7e>
 8005b98:	1c42      	adds	r2, r0, #1
 8005b9a:	d101      	bne.n	8005ba0 <__sflush_r+0x7c>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	b903      	cbnz	r3, 8005ba2 <__sflush_r+0x7e>
 8005ba0:	6560      	str	r0, [r4, #84]	; 0x54
 8005ba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba4:	602f      	str	r7, [r5, #0]
 8005ba6:	2900      	cmp	r1, #0
 8005ba8:	d0c9      	beq.n	8005b3e <__sflush_r+0x1a>
 8005baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bae:	4299      	cmp	r1, r3
 8005bb0:	d002      	beq.n	8005bb8 <__sflush_r+0x94>
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f7ff f9f6 	bl	8004fa4 <_free_r>
 8005bb8:	2000      	movs	r0, #0
 8005bba:	6360      	str	r0, [r4, #52]	; 0x34
 8005bbc:	e7c0      	b.n	8005b40 <__sflush_r+0x1c>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	47b0      	blx	r6
 8005bc4:	1c41      	adds	r1, r0, #1
 8005bc6:	d1c8      	bne.n	8005b5a <__sflush_r+0x36>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0c5      	beq.n	8005b5a <__sflush_r+0x36>
 8005bce:	2b1d      	cmp	r3, #29
 8005bd0:	d001      	beq.n	8005bd6 <__sflush_r+0xb2>
 8005bd2:	2b16      	cmp	r3, #22
 8005bd4:	d101      	bne.n	8005bda <__sflush_r+0xb6>
 8005bd6:	602f      	str	r7, [r5, #0]
 8005bd8:	e7b1      	b.n	8005b3e <__sflush_r+0x1a>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	e7ad      	b.n	8005b40 <__sflush_r+0x1c>
 8005be4:	690f      	ldr	r7, [r1, #16]
 8005be6:	2f00      	cmp	r7, #0
 8005be8:	d0a9      	beq.n	8005b3e <__sflush_r+0x1a>
 8005bea:	0793      	lsls	r3, r2, #30
 8005bec:	680e      	ldr	r6, [r1, #0]
 8005bee:	bf08      	it	eq
 8005bf0:	694b      	ldreq	r3, [r1, #20]
 8005bf2:	600f      	str	r7, [r1, #0]
 8005bf4:	bf18      	it	ne
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	eba6 0807 	sub.w	r8, r6, r7
 8005bfc:	608b      	str	r3, [r1, #8]
 8005bfe:	f1b8 0f00 	cmp.w	r8, #0
 8005c02:	dd9c      	ble.n	8005b3e <__sflush_r+0x1a>
 8005c04:	6a21      	ldr	r1, [r4, #32]
 8005c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c08:	4643      	mov	r3, r8
 8005c0a:	463a      	mov	r2, r7
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b0      	blx	r6
 8005c10:	2800      	cmp	r0, #0
 8005c12:	dc06      	bgt.n	8005c22 <__sflush_r+0xfe>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	e78e      	b.n	8005b40 <__sflush_r+0x1c>
 8005c22:	4407      	add	r7, r0
 8005c24:	eba8 0800 	sub.w	r8, r8, r0
 8005c28:	e7e9      	b.n	8005bfe <__sflush_r+0xda>
 8005c2a:	bf00      	nop
 8005c2c:	dfbffffe 	.word	0xdfbffffe

08005c30 <_fflush_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	690b      	ldr	r3, [r1, #16]
 8005c34:	4605      	mov	r5, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	b913      	cbnz	r3, 8005c40 <_fflush_r+0x10>
 8005c3a:	2500      	movs	r5, #0
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	b118      	cbz	r0, 8005c4a <_fflush_r+0x1a>
 8005c42:	6a03      	ldr	r3, [r0, #32]
 8005c44:	b90b      	cbnz	r3, 8005c4a <_fflush_r+0x1a>
 8005c46:	f7fe fa19 	bl	800407c <__sinit>
 8005c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f3      	beq.n	8005c3a <_fflush_r+0xa>
 8005c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c54:	07d0      	lsls	r0, r2, #31
 8005c56:	d404      	bmi.n	8005c62 <_fflush_r+0x32>
 8005c58:	0599      	lsls	r1, r3, #22
 8005c5a:	d402      	bmi.n	8005c62 <_fflush_r+0x32>
 8005c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5e:	f7fe fb16 	bl	800428e <__retarget_lock_acquire_recursive>
 8005c62:	4628      	mov	r0, r5
 8005c64:	4621      	mov	r1, r4
 8005c66:	f7ff ff5d 	bl	8005b24 <__sflush_r>
 8005c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c6c:	07da      	lsls	r2, r3, #31
 8005c6e:	4605      	mov	r5, r0
 8005c70:	d4e4      	bmi.n	8005c3c <_fflush_r+0xc>
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	059b      	lsls	r3, r3, #22
 8005c76:	d4e1      	bmi.n	8005c3c <_fflush_r+0xc>
 8005c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c7a:	f7fe fb09 	bl	8004290 <__retarget_lock_release_recursive>
 8005c7e:	e7dd      	b.n	8005c3c <_fflush_r+0xc>

08005c80 <__swbuf_r>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	460e      	mov	r6, r1
 8005c84:	4614      	mov	r4, r2
 8005c86:	4605      	mov	r5, r0
 8005c88:	b118      	cbz	r0, 8005c92 <__swbuf_r+0x12>
 8005c8a:	6a03      	ldr	r3, [r0, #32]
 8005c8c:	b90b      	cbnz	r3, 8005c92 <__swbuf_r+0x12>
 8005c8e:	f7fe f9f5 	bl	800407c <__sinit>
 8005c92:	69a3      	ldr	r3, [r4, #24]
 8005c94:	60a3      	str	r3, [r4, #8]
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	071a      	lsls	r2, r3, #28
 8005c9a:	d525      	bpl.n	8005ce8 <__swbuf_r+0x68>
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	b31b      	cbz	r3, 8005ce8 <__swbuf_r+0x68>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	6922      	ldr	r2, [r4, #16]
 8005ca4:	1a98      	subs	r0, r3, r2
 8005ca6:	6963      	ldr	r3, [r4, #20]
 8005ca8:	b2f6      	uxtb	r6, r6
 8005caa:	4283      	cmp	r3, r0
 8005cac:	4637      	mov	r7, r6
 8005cae:	dc04      	bgt.n	8005cba <__swbuf_r+0x3a>
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f7ff ffbc 	bl	8005c30 <_fflush_r>
 8005cb8:	b9e0      	cbnz	r0, 8005cf4 <__swbuf_r+0x74>
 8005cba:	68a3      	ldr	r3, [r4, #8]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	60a3      	str	r3, [r4, #8]
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	6022      	str	r2, [r4, #0]
 8005cc6:	701e      	strb	r6, [r3, #0]
 8005cc8:	6962      	ldr	r2, [r4, #20]
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d004      	beq.n	8005cda <__swbuf_r+0x5a>
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	07db      	lsls	r3, r3, #31
 8005cd4:	d506      	bpl.n	8005ce4 <__swbuf_r+0x64>
 8005cd6:	2e0a      	cmp	r6, #10
 8005cd8:	d104      	bne.n	8005ce4 <__swbuf_r+0x64>
 8005cda:	4621      	mov	r1, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f7ff ffa7 	bl	8005c30 <_fflush_r>
 8005ce2:	b938      	cbnz	r0, 8005cf4 <__swbuf_r+0x74>
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 f806 	bl	8005cfc <__swsetup_r>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d0d5      	beq.n	8005ca0 <__swbuf_r+0x20>
 8005cf4:	f04f 37ff 	mov.w	r7, #4294967295
 8005cf8:	e7f4      	b.n	8005ce4 <__swbuf_r+0x64>
	...

08005cfc <__swsetup_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4b2a      	ldr	r3, [pc, #168]	; (8005da8 <__swsetup_r+0xac>)
 8005d00:	4605      	mov	r5, r0
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	460c      	mov	r4, r1
 8005d06:	b118      	cbz	r0, 8005d10 <__swsetup_r+0x14>
 8005d08:	6a03      	ldr	r3, [r0, #32]
 8005d0a:	b90b      	cbnz	r3, 8005d10 <__swsetup_r+0x14>
 8005d0c:	f7fe f9b6 	bl	800407c <__sinit>
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d16:	0718      	lsls	r0, r3, #28
 8005d18:	d422      	bmi.n	8005d60 <__swsetup_r+0x64>
 8005d1a:	06d9      	lsls	r1, r3, #27
 8005d1c:	d407      	bmi.n	8005d2e <__swsetup_r+0x32>
 8005d1e:	2309      	movs	r3, #9
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d26:	81a3      	strh	r3, [r4, #12]
 8005d28:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2c:	e034      	b.n	8005d98 <__swsetup_r+0x9c>
 8005d2e:	0758      	lsls	r0, r3, #29
 8005d30:	d512      	bpl.n	8005d58 <__swsetup_r+0x5c>
 8005d32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d34:	b141      	cbz	r1, 8005d48 <__swsetup_r+0x4c>
 8005d36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d3a:	4299      	cmp	r1, r3
 8005d3c:	d002      	beq.n	8005d44 <__swsetup_r+0x48>
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f7ff f930 	bl	8004fa4 <_free_r>
 8005d44:	2300      	movs	r3, #0
 8005d46:	6363      	str	r3, [r4, #52]	; 0x34
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	2300      	movs	r3, #0
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	6923      	ldr	r3, [r4, #16]
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f043 0308 	orr.w	r3, r3, #8
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	6923      	ldr	r3, [r4, #16]
 8005d62:	b94b      	cbnz	r3, 8005d78 <__swsetup_r+0x7c>
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d6e:	d003      	beq.n	8005d78 <__swsetup_r+0x7c>
 8005d70:	4621      	mov	r1, r4
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 f8b6 	bl	8005ee4 <__smakebuf_r>
 8005d78:	89a0      	ldrh	r0, [r4, #12]
 8005d7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d7e:	f010 0301 	ands.w	r3, r0, #1
 8005d82:	d00a      	beq.n	8005d9a <__swsetup_r+0x9e>
 8005d84:	2300      	movs	r3, #0
 8005d86:	60a3      	str	r3, [r4, #8]
 8005d88:	6963      	ldr	r3, [r4, #20]
 8005d8a:	425b      	negs	r3, r3
 8005d8c:	61a3      	str	r3, [r4, #24]
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	b943      	cbnz	r3, 8005da4 <__swsetup_r+0xa8>
 8005d92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d96:	d1c4      	bne.n	8005d22 <__swsetup_r+0x26>
 8005d98:	bd38      	pop	{r3, r4, r5, pc}
 8005d9a:	0781      	lsls	r1, r0, #30
 8005d9c:	bf58      	it	pl
 8005d9e:	6963      	ldrpl	r3, [r4, #20]
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	e7f4      	b.n	8005d8e <__swsetup_r+0x92>
 8005da4:	2000      	movs	r0, #0
 8005da6:	e7f7      	b.n	8005d98 <__swsetup_r+0x9c>
 8005da8:	20000064 	.word	0x20000064

08005dac <_sbrk_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	; (8005dc8 <_sbrk_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fb fde6 	bl	8001988 <_sbrk>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_sbrk_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_sbrk_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	20000348 	.word	0x20000348

08005dcc <__assert_func>:
 8005dcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dce:	4614      	mov	r4, r2
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <__assert_func+0x2c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	68d8      	ldr	r0, [r3, #12]
 8005dda:	b14c      	cbz	r4, 8005df0 <__assert_func+0x24>
 8005ddc:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <__assert_func+0x30>)
 8005dde:	9100      	str	r1, [sp, #0]
 8005de0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005de4:	4906      	ldr	r1, [pc, #24]	; (8005e00 <__assert_func+0x34>)
 8005de6:	462b      	mov	r3, r5
 8005de8:	f000 f844 	bl	8005e74 <fiprintf>
 8005dec:	f000 f8d8 	bl	8005fa0 <abort>
 8005df0:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <__assert_func+0x38>)
 8005df2:	461c      	mov	r4, r3
 8005df4:	e7f3      	b.n	8005dde <__assert_func+0x12>
 8005df6:	bf00      	nop
 8005df8:	20000064 	.word	0x20000064
 8005dfc:	0800736f 	.word	0x0800736f
 8005e00:	0800737c 	.word	0x0800737c
 8005e04:	080073aa 	.word	0x080073aa

08005e08 <_calloc_r>:
 8005e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e0a:	fba1 2402 	umull	r2, r4, r1, r2
 8005e0e:	b94c      	cbnz	r4, 8005e24 <_calloc_r+0x1c>
 8005e10:	4611      	mov	r1, r2
 8005e12:	9201      	str	r2, [sp, #4]
 8005e14:	f7ff f93a 	bl	800508c <_malloc_r>
 8005e18:	9a01      	ldr	r2, [sp, #4]
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	b930      	cbnz	r0, 8005e2c <_calloc_r+0x24>
 8005e1e:	4628      	mov	r0, r5
 8005e20:	b003      	add	sp, #12
 8005e22:	bd30      	pop	{r4, r5, pc}
 8005e24:	220c      	movs	r2, #12
 8005e26:	6002      	str	r2, [r0, #0]
 8005e28:	2500      	movs	r5, #0
 8005e2a:	e7f8      	b.n	8005e1e <_calloc_r+0x16>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	f7fe f9b0 	bl	8004192 <memset>
 8005e32:	e7f4      	b.n	8005e1e <_calloc_r+0x16>

08005e34 <__ascii_mbtowc>:
 8005e34:	b082      	sub	sp, #8
 8005e36:	b901      	cbnz	r1, 8005e3a <__ascii_mbtowc+0x6>
 8005e38:	a901      	add	r1, sp, #4
 8005e3a:	b142      	cbz	r2, 8005e4e <__ascii_mbtowc+0x1a>
 8005e3c:	b14b      	cbz	r3, 8005e52 <__ascii_mbtowc+0x1e>
 8005e3e:	7813      	ldrb	r3, [r2, #0]
 8005e40:	600b      	str	r3, [r1, #0]
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	1e10      	subs	r0, r2, #0
 8005e46:	bf18      	it	ne
 8005e48:	2001      	movne	r0, #1
 8005e4a:	b002      	add	sp, #8
 8005e4c:	4770      	bx	lr
 8005e4e:	4610      	mov	r0, r2
 8005e50:	e7fb      	b.n	8005e4a <__ascii_mbtowc+0x16>
 8005e52:	f06f 0001 	mvn.w	r0, #1
 8005e56:	e7f8      	b.n	8005e4a <__ascii_mbtowc+0x16>

08005e58 <__ascii_wctomb>:
 8005e58:	b149      	cbz	r1, 8005e6e <__ascii_wctomb+0x16>
 8005e5a:	2aff      	cmp	r2, #255	; 0xff
 8005e5c:	bf85      	ittet	hi
 8005e5e:	238a      	movhi	r3, #138	; 0x8a
 8005e60:	6003      	strhi	r3, [r0, #0]
 8005e62:	700a      	strbls	r2, [r1, #0]
 8005e64:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e68:	bf98      	it	ls
 8005e6a:	2001      	movls	r0, #1
 8005e6c:	4770      	bx	lr
 8005e6e:	4608      	mov	r0, r1
 8005e70:	4770      	bx	lr
	...

08005e74 <fiprintf>:
 8005e74:	b40e      	push	{r1, r2, r3}
 8005e76:	b503      	push	{r0, r1, lr}
 8005e78:	4601      	mov	r1, r0
 8005e7a:	ab03      	add	r3, sp, #12
 8005e7c:	4805      	ldr	r0, [pc, #20]	; (8005e94 <fiprintf+0x20>)
 8005e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e82:	6800      	ldr	r0, [r0, #0]
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	f7ff fd33 	bl	80058f0 <_vfiprintf_r>
 8005e8a:	b002      	add	sp, #8
 8005e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e90:	b003      	add	sp, #12
 8005e92:	4770      	bx	lr
 8005e94:	20000064 	.word	0x20000064

08005e98 <__swhatbuf_r>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	b096      	sub	sp, #88	; 0x58
 8005ea4:	4615      	mov	r5, r2
 8005ea6:	461e      	mov	r6, r3
 8005ea8:	da0d      	bge.n	8005ec6 <__swhatbuf_r+0x2e>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	bf0c      	ite	eq
 8005eb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005eba:	2340      	movne	r3, #64	; 0x40
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	6031      	str	r1, [r6, #0]
 8005ec0:	602b      	str	r3, [r5, #0]
 8005ec2:	b016      	add	sp, #88	; 0x58
 8005ec4:	bd70      	pop	{r4, r5, r6, pc}
 8005ec6:	466a      	mov	r2, sp
 8005ec8:	f000 f848 	bl	8005f5c <_fstat_r>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	dbec      	blt.n	8005eaa <__swhatbuf_r+0x12>
 8005ed0:	9901      	ldr	r1, [sp, #4]
 8005ed2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ed6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005eda:	4259      	negs	r1, r3
 8005edc:	4159      	adcs	r1, r3
 8005ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee2:	e7eb      	b.n	8005ebc <__swhatbuf_r+0x24>

08005ee4 <__smakebuf_r>:
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ee8:	079d      	lsls	r5, r3, #30
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	d507      	bpl.n	8005f00 <__smakebuf_r+0x1c>
 8005ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	6123      	str	r3, [r4, #16]
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6163      	str	r3, [r4, #20]
 8005efc:	b002      	add	sp, #8
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	ab01      	add	r3, sp, #4
 8005f02:	466a      	mov	r2, sp
 8005f04:	f7ff ffc8 	bl	8005e98 <__swhatbuf_r>
 8005f08:	9900      	ldr	r1, [sp, #0]
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff f8bd 	bl	800508c <_malloc_r>
 8005f12:	b948      	cbnz	r0, 8005f28 <__smakebuf_r+0x44>
 8005f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f18:	059a      	lsls	r2, r3, #22
 8005f1a:	d4ef      	bmi.n	8005efc <__smakebuf_r+0x18>
 8005f1c:	f023 0303 	bic.w	r3, r3, #3
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	e7e3      	b.n	8005ef0 <__smakebuf_r+0xc>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	6020      	str	r0, [r4, #0]
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	9b00      	ldr	r3, [sp, #0]
 8005f34:	6163      	str	r3, [r4, #20]
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	6120      	str	r0, [r4, #16]
 8005f3a:	b15b      	cbz	r3, 8005f54 <__smakebuf_r+0x70>
 8005f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f40:	4630      	mov	r0, r6
 8005f42:	f000 f81d 	bl	8005f80 <_isatty_r>
 8005f46:	b128      	cbz	r0, 8005f54 <__smakebuf_r+0x70>
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	f023 0303 	bic.w	r3, r3, #3
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	81a3      	strh	r3, [r4, #12]
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	431d      	orrs	r5, r3
 8005f58:	81a5      	strh	r5, [r4, #12]
 8005f5a:	e7cf      	b.n	8005efc <__smakebuf_r+0x18>

08005f5c <_fstat_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d07      	ldr	r5, [pc, #28]	; (8005f7c <_fstat_r+0x20>)
 8005f60:	2300      	movs	r3, #0
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
 8005f66:	4611      	mov	r1, r2
 8005f68:	602b      	str	r3, [r5, #0]
 8005f6a:	f7fb fce4 	bl	8001936 <_fstat>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	d102      	bne.n	8005f78 <_fstat_r+0x1c>
 8005f72:	682b      	ldr	r3, [r5, #0]
 8005f74:	b103      	cbz	r3, 8005f78 <_fstat_r+0x1c>
 8005f76:	6023      	str	r3, [r4, #0]
 8005f78:	bd38      	pop	{r3, r4, r5, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000348 	.word	0x20000348

08005f80 <_isatty_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4d06      	ldr	r5, [pc, #24]	; (8005f9c <_isatty_r+0x1c>)
 8005f84:	2300      	movs	r3, #0
 8005f86:	4604      	mov	r4, r0
 8005f88:	4608      	mov	r0, r1
 8005f8a:	602b      	str	r3, [r5, #0]
 8005f8c:	f7fb fce3 	bl	8001956 <_isatty>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d102      	bne.n	8005f9a <_isatty_r+0x1a>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	b103      	cbz	r3, 8005f9a <_isatty_r+0x1a>
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	20000348 	.word	0x20000348

08005fa0 <abort>:
 8005fa0:	b508      	push	{r3, lr}
 8005fa2:	2006      	movs	r0, #6
 8005fa4:	f000 f82c 	bl	8006000 <raise>
 8005fa8:	2001      	movs	r0, #1
 8005faa:	f7fb fc75 	bl	8001898 <_exit>

08005fae <_raise_r>:
 8005fae:	291f      	cmp	r1, #31
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	460d      	mov	r5, r1
 8005fb6:	d904      	bls.n	8005fc2 <_raise_r+0x14>
 8005fb8:	2316      	movs	r3, #22
 8005fba:	6003      	str	r3, [r0, #0]
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
 8005fc2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005fc4:	b112      	cbz	r2, 8005fcc <_raise_r+0x1e>
 8005fc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fca:	b94b      	cbnz	r3, 8005fe0 <_raise_r+0x32>
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 f831 	bl	8006034 <_getpid_r>
 8005fd2:	462a      	mov	r2, r5
 8005fd4:	4601      	mov	r1, r0
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fdc:	f000 b818 	b.w	8006010 <_kill_r>
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d00a      	beq.n	8005ffa <_raise_r+0x4c>
 8005fe4:	1c59      	adds	r1, r3, #1
 8005fe6:	d103      	bne.n	8005ff0 <_raise_r+0x42>
 8005fe8:	2316      	movs	r3, #22
 8005fea:	6003      	str	r3, [r0, #0]
 8005fec:	2001      	movs	r0, #1
 8005fee:	e7e7      	b.n	8005fc0 <_raise_r+0x12>
 8005ff0:	2400      	movs	r4, #0
 8005ff2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	4798      	blx	r3
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	e7e0      	b.n	8005fc0 <_raise_r+0x12>
	...

08006000 <raise>:
 8006000:	4b02      	ldr	r3, [pc, #8]	; (800600c <raise+0xc>)
 8006002:	4601      	mov	r1, r0
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	f7ff bfd2 	b.w	8005fae <_raise_r>
 800600a:	bf00      	nop
 800600c:	20000064 	.word	0x20000064

08006010 <_kill_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4d07      	ldr	r5, [pc, #28]	; (8006030 <_kill_r+0x20>)
 8006014:	2300      	movs	r3, #0
 8006016:	4604      	mov	r4, r0
 8006018:	4608      	mov	r0, r1
 800601a:	4611      	mov	r1, r2
 800601c:	602b      	str	r3, [r5, #0]
 800601e:	f7fb fc2b 	bl	8001878 <_kill>
 8006022:	1c43      	adds	r3, r0, #1
 8006024:	d102      	bne.n	800602c <_kill_r+0x1c>
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	b103      	cbz	r3, 800602c <_kill_r+0x1c>
 800602a:	6023      	str	r3, [r4, #0]
 800602c:	bd38      	pop	{r3, r4, r5, pc}
 800602e:	bf00      	nop
 8006030:	20000348 	.word	0x20000348

08006034 <_getpid_r>:
 8006034:	f7fb bc18 	b.w	8001868 <_getpid>

08006038 <pow>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	ed2d 8b02 	vpush	{d8}
 800603e:	eeb0 8a40 	vmov.f32	s16, s0
 8006042:	eef0 8a60 	vmov.f32	s17, s1
 8006046:	ec55 4b11 	vmov	r4, r5, d1
 800604a:	f000 f999 	bl	8006380 <__ieee754_pow>
 800604e:	4622      	mov	r2, r4
 8006050:	462b      	mov	r3, r5
 8006052:	4620      	mov	r0, r4
 8006054:	4629      	mov	r1, r5
 8006056:	ec57 6b10 	vmov	r6, r7, d0
 800605a:	f7fa fda7 	bl	8000bac <__aeabi_dcmpun>
 800605e:	2800      	cmp	r0, #0
 8006060:	d13b      	bne.n	80060da <pow+0xa2>
 8006062:	ec51 0b18 	vmov	r0, r1, d8
 8006066:	2200      	movs	r2, #0
 8006068:	2300      	movs	r3, #0
 800606a:	f7fa fd6d 	bl	8000b48 <__aeabi_dcmpeq>
 800606e:	b1b8      	cbz	r0, 80060a0 <pow+0x68>
 8006070:	2200      	movs	r2, #0
 8006072:	2300      	movs	r3, #0
 8006074:	4620      	mov	r0, r4
 8006076:	4629      	mov	r1, r5
 8006078:	f7fa fd66 	bl	8000b48 <__aeabi_dcmpeq>
 800607c:	2800      	cmp	r0, #0
 800607e:	d146      	bne.n	800610e <pow+0xd6>
 8006080:	ec45 4b10 	vmov	d0, r4, r5
 8006084:	f000 f892 	bl	80061ac <finite>
 8006088:	b338      	cbz	r0, 80060da <pow+0xa2>
 800608a:	2200      	movs	r2, #0
 800608c:	2300      	movs	r3, #0
 800608e:	4620      	mov	r0, r4
 8006090:	4629      	mov	r1, r5
 8006092:	f7fa fd63 	bl	8000b5c <__aeabi_dcmplt>
 8006096:	b300      	cbz	r0, 80060da <pow+0xa2>
 8006098:	f7fe f8ce 	bl	8004238 <__errno>
 800609c:	2322      	movs	r3, #34	; 0x22
 800609e:	e01b      	b.n	80060d8 <pow+0xa0>
 80060a0:	ec47 6b10 	vmov	d0, r6, r7
 80060a4:	f000 f882 	bl	80061ac <finite>
 80060a8:	b9e0      	cbnz	r0, 80060e4 <pow+0xac>
 80060aa:	eeb0 0a48 	vmov.f32	s0, s16
 80060ae:	eef0 0a68 	vmov.f32	s1, s17
 80060b2:	f000 f87b 	bl	80061ac <finite>
 80060b6:	b1a8      	cbz	r0, 80060e4 <pow+0xac>
 80060b8:	ec45 4b10 	vmov	d0, r4, r5
 80060bc:	f000 f876 	bl	80061ac <finite>
 80060c0:	b180      	cbz	r0, 80060e4 <pow+0xac>
 80060c2:	4632      	mov	r2, r6
 80060c4:	463b      	mov	r3, r7
 80060c6:	4630      	mov	r0, r6
 80060c8:	4639      	mov	r1, r7
 80060ca:	f7fa fd6f 	bl	8000bac <__aeabi_dcmpun>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d0e2      	beq.n	8006098 <pow+0x60>
 80060d2:	f7fe f8b1 	bl	8004238 <__errno>
 80060d6:	2321      	movs	r3, #33	; 0x21
 80060d8:	6003      	str	r3, [r0, #0]
 80060da:	ecbd 8b02 	vpop	{d8}
 80060de:	ec47 6b10 	vmov	d0, r6, r7
 80060e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060e4:	2200      	movs	r2, #0
 80060e6:	2300      	movs	r3, #0
 80060e8:	4630      	mov	r0, r6
 80060ea:	4639      	mov	r1, r7
 80060ec:	f7fa fd2c 	bl	8000b48 <__aeabi_dcmpeq>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d0f2      	beq.n	80060da <pow+0xa2>
 80060f4:	eeb0 0a48 	vmov.f32	s0, s16
 80060f8:	eef0 0a68 	vmov.f32	s1, s17
 80060fc:	f000 f856 	bl	80061ac <finite>
 8006100:	2800      	cmp	r0, #0
 8006102:	d0ea      	beq.n	80060da <pow+0xa2>
 8006104:	ec45 4b10 	vmov	d0, r4, r5
 8006108:	f000 f850 	bl	80061ac <finite>
 800610c:	e7c3      	b.n	8006096 <pow+0x5e>
 800610e:	4f01      	ldr	r7, [pc, #4]	; (8006114 <pow+0xdc>)
 8006110:	2600      	movs	r6, #0
 8006112:	e7e2      	b.n	80060da <pow+0xa2>
 8006114:	3ff00000 	.word	0x3ff00000

08006118 <sqrt>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	ed2d 8b02 	vpush	{d8}
 800611e:	ec55 4b10 	vmov	r4, r5, d0
 8006122:	f000 f84f 	bl	80061c4 <__ieee754_sqrt>
 8006126:	4622      	mov	r2, r4
 8006128:	462b      	mov	r3, r5
 800612a:	4620      	mov	r0, r4
 800612c:	4629      	mov	r1, r5
 800612e:	eeb0 8a40 	vmov.f32	s16, s0
 8006132:	eef0 8a60 	vmov.f32	s17, s1
 8006136:	f7fa fd39 	bl	8000bac <__aeabi_dcmpun>
 800613a:	b990      	cbnz	r0, 8006162 <sqrt+0x4a>
 800613c:	2200      	movs	r2, #0
 800613e:	2300      	movs	r3, #0
 8006140:	4620      	mov	r0, r4
 8006142:	4629      	mov	r1, r5
 8006144:	f7fa fd0a 	bl	8000b5c <__aeabi_dcmplt>
 8006148:	b158      	cbz	r0, 8006162 <sqrt+0x4a>
 800614a:	f7fe f875 	bl	8004238 <__errno>
 800614e:	2321      	movs	r3, #33	; 0x21
 8006150:	6003      	str	r3, [r0, #0]
 8006152:	2200      	movs	r2, #0
 8006154:	2300      	movs	r3, #0
 8006156:	4610      	mov	r0, r2
 8006158:	4619      	mov	r1, r3
 800615a:	f7fa fbb7 	bl	80008cc <__aeabi_ddiv>
 800615e:	ec41 0b18 	vmov	d8, r0, r1
 8006162:	eeb0 0a48 	vmov.f32	s0, s16
 8006166:	eef0 0a68 	vmov.f32	s1, s17
 800616a:	ecbd 8b02 	vpop	{d8}
 800616e:	bd38      	pop	{r3, r4, r5, pc}

08006170 <sqrtf>:
 8006170:	b508      	push	{r3, lr}
 8006172:	ed2d 8b02 	vpush	{d8}
 8006176:	eeb0 8a40 	vmov.f32	s16, s0
 800617a:	f000 f8fd 	bl	8006378 <__ieee754_sqrtf>
 800617e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006186:	d60c      	bvs.n	80061a2 <sqrtf+0x32>
 8006188:	eddf 8a07 	vldr	s17, [pc, #28]	; 80061a8 <sqrtf+0x38>
 800618c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006194:	d505      	bpl.n	80061a2 <sqrtf+0x32>
 8006196:	f7fe f84f 	bl	8004238 <__errno>
 800619a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800619e:	2321      	movs	r3, #33	; 0x21
 80061a0:	6003      	str	r3, [r0, #0]
 80061a2:	ecbd 8b02 	vpop	{d8}
 80061a6:	bd08      	pop	{r3, pc}
 80061a8:	00000000 	.word	0x00000000

080061ac <finite>:
 80061ac:	b082      	sub	sp, #8
 80061ae:	ed8d 0b00 	vstr	d0, [sp]
 80061b2:	9801      	ldr	r0, [sp, #4]
 80061b4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80061b8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80061bc:	0fc0      	lsrs	r0, r0, #31
 80061be:	b002      	add	sp, #8
 80061c0:	4770      	bx	lr
	...

080061c4 <__ieee754_sqrt>:
 80061c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c8:	ec55 4b10 	vmov	r4, r5, d0
 80061cc:	4e67      	ldr	r6, [pc, #412]	; (800636c <__ieee754_sqrt+0x1a8>)
 80061ce:	43ae      	bics	r6, r5
 80061d0:	ee10 0a10 	vmov	r0, s0
 80061d4:	ee10 2a10 	vmov	r2, s0
 80061d8:	4629      	mov	r1, r5
 80061da:	462b      	mov	r3, r5
 80061dc:	d10d      	bne.n	80061fa <__ieee754_sqrt+0x36>
 80061de:	f7fa fa4b 	bl	8000678 <__aeabi_dmul>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4620      	mov	r0, r4
 80061e8:	4629      	mov	r1, r5
 80061ea:	f7fa f88f 	bl	800030c <__adddf3>
 80061ee:	4604      	mov	r4, r0
 80061f0:	460d      	mov	r5, r1
 80061f2:	ec45 4b10 	vmov	d0, r4, r5
 80061f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fa:	2d00      	cmp	r5, #0
 80061fc:	dc0b      	bgt.n	8006216 <__ieee754_sqrt+0x52>
 80061fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006202:	4326      	orrs	r6, r4
 8006204:	d0f5      	beq.n	80061f2 <__ieee754_sqrt+0x2e>
 8006206:	b135      	cbz	r5, 8006216 <__ieee754_sqrt+0x52>
 8006208:	f7fa f87e 	bl	8000308 <__aeabi_dsub>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	f7fa fb5c 	bl	80008cc <__aeabi_ddiv>
 8006214:	e7eb      	b.n	80061ee <__ieee754_sqrt+0x2a>
 8006216:	1509      	asrs	r1, r1, #20
 8006218:	f000 808d 	beq.w	8006336 <__ieee754_sqrt+0x172>
 800621c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006220:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006228:	07c9      	lsls	r1, r1, #31
 800622a:	bf5c      	itt	pl
 800622c:	005b      	lslpl	r3, r3, #1
 800622e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006232:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006236:	bf58      	it	pl
 8006238:	0052      	lslpl	r2, r2, #1
 800623a:	2500      	movs	r5, #0
 800623c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006240:	1076      	asrs	r6, r6, #1
 8006242:	0052      	lsls	r2, r2, #1
 8006244:	f04f 0e16 	mov.w	lr, #22
 8006248:	46ac      	mov	ip, r5
 800624a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800624e:	eb0c 0001 	add.w	r0, ip, r1
 8006252:	4298      	cmp	r0, r3
 8006254:	bfde      	ittt	le
 8006256:	1a1b      	suble	r3, r3, r0
 8006258:	eb00 0c01 	addle.w	ip, r0, r1
 800625c:	186d      	addle	r5, r5, r1
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	f1be 0e01 	subs.w	lr, lr, #1
 8006264:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006268:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800626c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006270:	d1ed      	bne.n	800624e <__ieee754_sqrt+0x8a>
 8006272:	4674      	mov	r4, lr
 8006274:	2720      	movs	r7, #32
 8006276:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800627a:	4563      	cmp	r3, ip
 800627c:	eb01 000e 	add.w	r0, r1, lr
 8006280:	dc02      	bgt.n	8006288 <__ieee754_sqrt+0xc4>
 8006282:	d113      	bne.n	80062ac <__ieee754_sqrt+0xe8>
 8006284:	4290      	cmp	r0, r2
 8006286:	d811      	bhi.n	80062ac <__ieee754_sqrt+0xe8>
 8006288:	2800      	cmp	r0, #0
 800628a:	eb00 0e01 	add.w	lr, r0, r1
 800628e:	da57      	bge.n	8006340 <__ieee754_sqrt+0x17c>
 8006290:	f1be 0f00 	cmp.w	lr, #0
 8006294:	db54      	blt.n	8006340 <__ieee754_sqrt+0x17c>
 8006296:	f10c 0801 	add.w	r8, ip, #1
 800629a:	eba3 030c 	sub.w	r3, r3, ip
 800629e:	4290      	cmp	r0, r2
 80062a0:	bf88      	it	hi
 80062a2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80062a6:	1a12      	subs	r2, r2, r0
 80062a8:	440c      	add	r4, r1
 80062aa:	46c4      	mov	ip, r8
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	3f01      	subs	r7, #1
 80062b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80062b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80062b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80062bc:	d1dd      	bne.n	800627a <__ieee754_sqrt+0xb6>
 80062be:	4313      	orrs	r3, r2
 80062c0:	d01b      	beq.n	80062fa <__ieee754_sqrt+0x136>
 80062c2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006370 <__ieee754_sqrt+0x1ac>
 80062c6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006374 <__ieee754_sqrt+0x1b0>
 80062ca:	e9da 0100 	ldrd	r0, r1, [sl]
 80062ce:	e9db 2300 	ldrd	r2, r3, [fp]
 80062d2:	f7fa f819 	bl	8000308 <__aeabi_dsub>
 80062d6:	e9da 8900 	ldrd	r8, r9, [sl]
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4640      	mov	r0, r8
 80062e0:	4649      	mov	r1, r9
 80062e2:	f7fa fc45 	bl	8000b70 <__aeabi_dcmple>
 80062e6:	b140      	cbz	r0, 80062fa <__ieee754_sqrt+0x136>
 80062e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80062ec:	e9da 0100 	ldrd	r0, r1, [sl]
 80062f0:	e9db 2300 	ldrd	r2, r3, [fp]
 80062f4:	d126      	bne.n	8006344 <__ieee754_sqrt+0x180>
 80062f6:	3501      	adds	r5, #1
 80062f8:	463c      	mov	r4, r7
 80062fa:	106a      	asrs	r2, r5, #1
 80062fc:	0863      	lsrs	r3, r4, #1
 80062fe:	07e9      	lsls	r1, r5, #31
 8006300:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006304:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006308:	bf48      	it	mi
 800630a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800630e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006312:	461c      	mov	r4, r3
 8006314:	e76d      	b.n	80061f2 <__ieee754_sqrt+0x2e>
 8006316:	0ad3      	lsrs	r3, r2, #11
 8006318:	3815      	subs	r0, #21
 800631a:	0552      	lsls	r2, r2, #21
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0fa      	beq.n	8006316 <__ieee754_sqrt+0x152>
 8006320:	02dc      	lsls	r4, r3, #11
 8006322:	d50a      	bpl.n	800633a <__ieee754_sqrt+0x176>
 8006324:	f1c1 0420 	rsb	r4, r1, #32
 8006328:	fa22 f404 	lsr.w	r4, r2, r4
 800632c:	1e4d      	subs	r5, r1, #1
 800632e:	408a      	lsls	r2, r1
 8006330:	4323      	orrs	r3, r4
 8006332:	1b41      	subs	r1, r0, r5
 8006334:	e772      	b.n	800621c <__ieee754_sqrt+0x58>
 8006336:	4608      	mov	r0, r1
 8006338:	e7f0      	b.n	800631c <__ieee754_sqrt+0x158>
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	3101      	adds	r1, #1
 800633e:	e7ef      	b.n	8006320 <__ieee754_sqrt+0x15c>
 8006340:	46e0      	mov	r8, ip
 8006342:	e7aa      	b.n	800629a <__ieee754_sqrt+0xd6>
 8006344:	f7f9 ffe2 	bl	800030c <__adddf3>
 8006348:	e9da 8900 	ldrd	r8, r9, [sl]
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7fa fc02 	bl	8000b5c <__aeabi_dcmplt>
 8006358:	b120      	cbz	r0, 8006364 <__ieee754_sqrt+0x1a0>
 800635a:	1ca0      	adds	r0, r4, #2
 800635c:	bf08      	it	eq
 800635e:	3501      	addeq	r5, #1
 8006360:	3402      	adds	r4, #2
 8006362:	e7ca      	b.n	80062fa <__ieee754_sqrt+0x136>
 8006364:	3401      	adds	r4, #1
 8006366:	f024 0401 	bic.w	r4, r4, #1
 800636a:	e7c6      	b.n	80062fa <__ieee754_sqrt+0x136>
 800636c:	7ff00000 	.word	0x7ff00000
 8006370:	200001d8 	.word	0x200001d8
 8006374:	200001e0 	.word	0x200001e0

08006378 <__ieee754_sqrtf>:
 8006378:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800637c:	4770      	bx	lr
	...

08006380 <__ieee754_pow>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	ed2d 8b06 	vpush	{d8-d10}
 8006388:	b089      	sub	sp, #36	; 0x24
 800638a:	ed8d 1b00 	vstr	d1, [sp]
 800638e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006392:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006396:	ea58 0102 	orrs.w	r1, r8, r2
 800639a:	ec57 6b10 	vmov	r6, r7, d0
 800639e:	d115      	bne.n	80063cc <__ieee754_pow+0x4c>
 80063a0:	19b3      	adds	r3, r6, r6
 80063a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80063a6:	4152      	adcs	r2, r2
 80063a8:	4299      	cmp	r1, r3
 80063aa:	4b89      	ldr	r3, [pc, #548]	; (80065d0 <__ieee754_pow+0x250>)
 80063ac:	4193      	sbcs	r3, r2
 80063ae:	f080 84d1 	bcs.w	8006d54 <__ieee754_pow+0x9d4>
 80063b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063b6:	4630      	mov	r0, r6
 80063b8:	4639      	mov	r1, r7
 80063ba:	f7f9 ffa7 	bl	800030c <__adddf3>
 80063be:	ec41 0b10 	vmov	d0, r0, r1
 80063c2:	b009      	add	sp, #36	; 0x24
 80063c4:	ecbd 8b06 	vpop	{d8-d10}
 80063c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063cc:	4b81      	ldr	r3, [pc, #516]	; (80065d4 <__ieee754_pow+0x254>)
 80063ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80063d2:	429c      	cmp	r4, r3
 80063d4:	ee10 aa10 	vmov	sl, s0
 80063d8:	463d      	mov	r5, r7
 80063da:	dc06      	bgt.n	80063ea <__ieee754_pow+0x6a>
 80063dc:	d101      	bne.n	80063e2 <__ieee754_pow+0x62>
 80063de:	2e00      	cmp	r6, #0
 80063e0:	d1e7      	bne.n	80063b2 <__ieee754_pow+0x32>
 80063e2:	4598      	cmp	r8, r3
 80063e4:	dc01      	bgt.n	80063ea <__ieee754_pow+0x6a>
 80063e6:	d10f      	bne.n	8006408 <__ieee754_pow+0x88>
 80063e8:	b172      	cbz	r2, 8006408 <__ieee754_pow+0x88>
 80063ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80063ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80063f2:	ea55 050a 	orrs.w	r5, r5, sl
 80063f6:	d1dc      	bne.n	80063b2 <__ieee754_pow+0x32>
 80063f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80063fc:	18db      	adds	r3, r3, r3
 80063fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006402:	4152      	adcs	r2, r2
 8006404:	429d      	cmp	r5, r3
 8006406:	e7d0      	b.n	80063aa <__ieee754_pow+0x2a>
 8006408:	2d00      	cmp	r5, #0
 800640a:	da3b      	bge.n	8006484 <__ieee754_pow+0x104>
 800640c:	4b72      	ldr	r3, [pc, #456]	; (80065d8 <__ieee754_pow+0x258>)
 800640e:	4598      	cmp	r8, r3
 8006410:	dc51      	bgt.n	80064b6 <__ieee754_pow+0x136>
 8006412:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006416:	4598      	cmp	r8, r3
 8006418:	f340 84ab 	ble.w	8006d72 <__ieee754_pow+0x9f2>
 800641c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006420:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006424:	2b14      	cmp	r3, #20
 8006426:	dd0f      	ble.n	8006448 <__ieee754_pow+0xc8>
 8006428:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800642c:	fa22 f103 	lsr.w	r1, r2, r3
 8006430:	fa01 f303 	lsl.w	r3, r1, r3
 8006434:	4293      	cmp	r3, r2
 8006436:	f040 849c 	bne.w	8006d72 <__ieee754_pow+0x9f2>
 800643a:	f001 0101 	and.w	r1, r1, #1
 800643e:	f1c1 0302 	rsb	r3, r1, #2
 8006442:	9304      	str	r3, [sp, #16]
 8006444:	b182      	cbz	r2, 8006468 <__ieee754_pow+0xe8>
 8006446:	e05f      	b.n	8006508 <__ieee754_pow+0x188>
 8006448:	2a00      	cmp	r2, #0
 800644a:	d15b      	bne.n	8006504 <__ieee754_pow+0x184>
 800644c:	f1c3 0314 	rsb	r3, r3, #20
 8006450:	fa48 f103 	asr.w	r1, r8, r3
 8006454:	fa01 f303 	lsl.w	r3, r1, r3
 8006458:	4543      	cmp	r3, r8
 800645a:	f040 8487 	bne.w	8006d6c <__ieee754_pow+0x9ec>
 800645e:	f001 0101 	and.w	r1, r1, #1
 8006462:	f1c1 0302 	rsb	r3, r1, #2
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	4b5c      	ldr	r3, [pc, #368]	; (80065dc <__ieee754_pow+0x25c>)
 800646a:	4598      	cmp	r8, r3
 800646c:	d132      	bne.n	80064d4 <__ieee754_pow+0x154>
 800646e:	f1b9 0f00 	cmp.w	r9, #0
 8006472:	f280 8477 	bge.w	8006d64 <__ieee754_pow+0x9e4>
 8006476:	4959      	ldr	r1, [pc, #356]	; (80065dc <__ieee754_pow+0x25c>)
 8006478:	4632      	mov	r2, r6
 800647a:	463b      	mov	r3, r7
 800647c:	2000      	movs	r0, #0
 800647e:	f7fa fa25 	bl	80008cc <__aeabi_ddiv>
 8006482:	e79c      	b.n	80063be <__ieee754_pow+0x3e>
 8006484:	2300      	movs	r3, #0
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	2a00      	cmp	r2, #0
 800648a:	d13d      	bne.n	8006508 <__ieee754_pow+0x188>
 800648c:	4b51      	ldr	r3, [pc, #324]	; (80065d4 <__ieee754_pow+0x254>)
 800648e:	4598      	cmp	r8, r3
 8006490:	d1ea      	bne.n	8006468 <__ieee754_pow+0xe8>
 8006492:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006496:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800649a:	ea53 030a 	orrs.w	r3, r3, sl
 800649e:	f000 8459 	beq.w	8006d54 <__ieee754_pow+0x9d4>
 80064a2:	4b4f      	ldr	r3, [pc, #316]	; (80065e0 <__ieee754_pow+0x260>)
 80064a4:	429c      	cmp	r4, r3
 80064a6:	dd08      	ble.n	80064ba <__ieee754_pow+0x13a>
 80064a8:	f1b9 0f00 	cmp.w	r9, #0
 80064ac:	f2c0 8456 	blt.w	8006d5c <__ieee754_pow+0x9dc>
 80064b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064b4:	e783      	b.n	80063be <__ieee754_pow+0x3e>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e7e5      	b.n	8006486 <__ieee754_pow+0x106>
 80064ba:	f1b9 0f00 	cmp.w	r9, #0
 80064be:	f04f 0000 	mov.w	r0, #0
 80064c2:	f04f 0100 	mov.w	r1, #0
 80064c6:	f6bf af7a 	bge.w	80063be <__ieee754_pow+0x3e>
 80064ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80064ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80064d2:	e774      	b.n	80063be <__ieee754_pow+0x3e>
 80064d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80064d8:	d106      	bne.n	80064e8 <__ieee754_pow+0x168>
 80064da:	4632      	mov	r2, r6
 80064dc:	463b      	mov	r3, r7
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7fa f8c9 	bl	8000678 <__aeabi_dmul>
 80064e6:	e76a      	b.n	80063be <__ieee754_pow+0x3e>
 80064e8:	4b3e      	ldr	r3, [pc, #248]	; (80065e4 <__ieee754_pow+0x264>)
 80064ea:	4599      	cmp	r9, r3
 80064ec:	d10c      	bne.n	8006508 <__ieee754_pow+0x188>
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	db0a      	blt.n	8006508 <__ieee754_pow+0x188>
 80064f2:	ec47 6b10 	vmov	d0, r6, r7
 80064f6:	b009      	add	sp, #36	; 0x24
 80064f8:	ecbd 8b06 	vpop	{d8-d10}
 80064fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	f7ff be60 	b.w	80061c4 <__ieee754_sqrt>
 8006504:	2300      	movs	r3, #0
 8006506:	9304      	str	r3, [sp, #16]
 8006508:	ec47 6b10 	vmov	d0, r6, r7
 800650c:	f000 fc62 	bl	8006dd4 <fabs>
 8006510:	ec51 0b10 	vmov	r0, r1, d0
 8006514:	f1ba 0f00 	cmp.w	sl, #0
 8006518:	d129      	bne.n	800656e <__ieee754_pow+0x1ee>
 800651a:	b124      	cbz	r4, 8006526 <__ieee754_pow+0x1a6>
 800651c:	4b2f      	ldr	r3, [pc, #188]	; (80065dc <__ieee754_pow+0x25c>)
 800651e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006522:	429a      	cmp	r2, r3
 8006524:	d123      	bne.n	800656e <__ieee754_pow+0x1ee>
 8006526:	f1b9 0f00 	cmp.w	r9, #0
 800652a:	da05      	bge.n	8006538 <__ieee754_pow+0x1b8>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	2000      	movs	r0, #0
 8006532:	492a      	ldr	r1, [pc, #168]	; (80065dc <__ieee754_pow+0x25c>)
 8006534:	f7fa f9ca 	bl	80008cc <__aeabi_ddiv>
 8006538:	2d00      	cmp	r5, #0
 800653a:	f6bf af40 	bge.w	80063be <__ieee754_pow+0x3e>
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006544:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006548:	431c      	orrs	r4, r3
 800654a:	d108      	bne.n	800655e <__ieee754_pow+0x1de>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4610      	mov	r0, r2
 8006552:	4619      	mov	r1, r3
 8006554:	f7f9 fed8 	bl	8000308 <__aeabi_dsub>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	e78f      	b.n	800647e <__ieee754_pow+0xfe>
 800655e:	9b04      	ldr	r3, [sp, #16]
 8006560:	2b01      	cmp	r3, #1
 8006562:	f47f af2c 	bne.w	80063be <__ieee754_pow+0x3e>
 8006566:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800656a:	4619      	mov	r1, r3
 800656c:	e727      	b.n	80063be <__ieee754_pow+0x3e>
 800656e:	0feb      	lsrs	r3, r5, #31
 8006570:	3b01      	subs	r3, #1
 8006572:	9306      	str	r3, [sp, #24]
 8006574:	9a06      	ldr	r2, [sp, #24]
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	d102      	bne.n	8006582 <__ieee754_pow+0x202>
 800657c:	4632      	mov	r2, r6
 800657e:	463b      	mov	r3, r7
 8006580:	e7e6      	b.n	8006550 <__ieee754_pow+0x1d0>
 8006582:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <__ieee754_pow+0x268>)
 8006584:	4598      	cmp	r8, r3
 8006586:	f340 80fb 	ble.w	8006780 <__ieee754_pow+0x400>
 800658a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800658e:	4598      	cmp	r8, r3
 8006590:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <__ieee754_pow+0x260>)
 8006592:	dd0c      	ble.n	80065ae <__ieee754_pow+0x22e>
 8006594:	429c      	cmp	r4, r3
 8006596:	dc0f      	bgt.n	80065b8 <__ieee754_pow+0x238>
 8006598:	f1b9 0f00 	cmp.w	r9, #0
 800659c:	da0f      	bge.n	80065be <__ieee754_pow+0x23e>
 800659e:	2000      	movs	r0, #0
 80065a0:	b009      	add	sp, #36	; 0x24
 80065a2:	ecbd 8b06 	vpop	{d8-d10}
 80065a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	f000 bcc2 	b.w	8006f32 <__math_oflow>
 80065ae:	429c      	cmp	r4, r3
 80065b0:	dbf2      	blt.n	8006598 <__ieee754_pow+0x218>
 80065b2:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <__ieee754_pow+0x25c>)
 80065b4:	429c      	cmp	r4, r3
 80065b6:	dd19      	ble.n	80065ec <__ieee754_pow+0x26c>
 80065b8:	f1b9 0f00 	cmp.w	r9, #0
 80065bc:	dcef      	bgt.n	800659e <__ieee754_pow+0x21e>
 80065be:	2000      	movs	r0, #0
 80065c0:	b009      	add	sp, #36	; 0x24
 80065c2:	ecbd 8b06 	vpop	{d8-d10}
 80065c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	f000 bca9 	b.w	8006f20 <__math_uflow>
 80065ce:	bf00      	nop
 80065d0:	fff00000 	.word	0xfff00000
 80065d4:	7ff00000 	.word	0x7ff00000
 80065d8:	433fffff 	.word	0x433fffff
 80065dc:	3ff00000 	.word	0x3ff00000
 80065e0:	3fefffff 	.word	0x3fefffff
 80065e4:	3fe00000 	.word	0x3fe00000
 80065e8:	41e00000 	.word	0x41e00000
 80065ec:	4b60      	ldr	r3, [pc, #384]	; (8006770 <__ieee754_pow+0x3f0>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	f7f9 fe8a 	bl	8000308 <__aeabi_dsub>
 80065f4:	a354      	add	r3, pc, #336	; (adr r3, 8006748 <__ieee754_pow+0x3c8>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	4604      	mov	r4, r0
 80065fc:	460d      	mov	r5, r1
 80065fe:	f7fa f83b 	bl	8000678 <__aeabi_dmul>
 8006602:	a353      	add	r3, pc, #332	; (adr r3, 8006750 <__ieee754_pow+0x3d0>)
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	4606      	mov	r6, r0
 800660a:	460f      	mov	r7, r1
 800660c:	4620      	mov	r0, r4
 800660e:	4629      	mov	r1, r5
 8006610:	f7fa f832 	bl	8000678 <__aeabi_dmul>
 8006614:	4b57      	ldr	r3, [pc, #348]	; (8006774 <__ieee754_pow+0x3f4>)
 8006616:	4682      	mov	sl, r0
 8006618:	468b      	mov	fp, r1
 800661a:	2200      	movs	r2, #0
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	f7fa f82a 	bl	8000678 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	a14b      	add	r1, pc, #300	; (adr r1, 8006758 <__ieee754_pow+0x3d8>)
 800662a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800662e:	f7f9 fe6b 	bl	8000308 <__aeabi_dsub>
 8006632:	4622      	mov	r2, r4
 8006634:	462b      	mov	r3, r5
 8006636:	f7fa f81f 	bl	8000678 <__aeabi_dmul>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	2000      	movs	r0, #0
 8006640:	494d      	ldr	r1, [pc, #308]	; (8006778 <__ieee754_pow+0x3f8>)
 8006642:	f7f9 fe61 	bl	8000308 <__aeabi_dsub>
 8006646:	4622      	mov	r2, r4
 8006648:	4680      	mov	r8, r0
 800664a:	4689      	mov	r9, r1
 800664c:	462b      	mov	r3, r5
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7fa f811 	bl	8000678 <__aeabi_dmul>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4640      	mov	r0, r8
 800665c:	4649      	mov	r1, r9
 800665e:	f7fa f80b 	bl	8000678 <__aeabi_dmul>
 8006662:	a33f      	add	r3, pc, #252	; (adr r3, 8006760 <__ieee754_pow+0x3e0>)
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f7fa f806 	bl	8000678 <__aeabi_dmul>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4650      	mov	r0, sl
 8006672:	4659      	mov	r1, fp
 8006674:	f7f9 fe48 	bl	8000308 <__aeabi_dsub>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	4680      	mov	r8, r0
 800667e:	4689      	mov	r9, r1
 8006680:	4630      	mov	r0, r6
 8006682:	4639      	mov	r1, r7
 8006684:	f7f9 fe42 	bl	800030c <__adddf3>
 8006688:	2000      	movs	r0, #0
 800668a:	4632      	mov	r2, r6
 800668c:	463b      	mov	r3, r7
 800668e:	4604      	mov	r4, r0
 8006690:	460d      	mov	r5, r1
 8006692:	f7f9 fe39 	bl	8000308 <__aeabi_dsub>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4640      	mov	r0, r8
 800669c:	4649      	mov	r1, r9
 800669e:	f7f9 fe33 	bl	8000308 <__aeabi_dsub>
 80066a2:	9b04      	ldr	r3, [sp, #16]
 80066a4:	9a06      	ldr	r2, [sp, #24]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	4313      	orrs	r3, r2
 80066aa:	4682      	mov	sl, r0
 80066ac:	468b      	mov	fp, r1
 80066ae:	f040 81e7 	bne.w	8006a80 <__ieee754_pow+0x700>
 80066b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006768 <__ieee754_pow+0x3e8>
 80066b6:	eeb0 8a47 	vmov.f32	s16, s14
 80066ba:	eef0 8a67 	vmov.f32	s17, s15
 80066be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066c2:	2600      	movs	r6, #0
 80066c4:	4632      	mov	r2, r6
 80066c6:	463b      	mov	r3, r7
 80066c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066cc:	f7f9 fe1c 	bl	8000308 <__aeabi_dsub>
 80066d0:	4622      	mov	r2, r4
 80066d2:	462b      	mov	r3, r5
 80066d4:	f7f9 ffd0 	bl	8000678 <__aeabi_dmul>
 80066d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066dc:	4680      	mov	r8, r0
 80066de:	4689      	mov	r9, r1
 80066e0:	4650      	mov	r0, sl
 80066e2:	4659      	mov	r1, fp
 80066e4:	f7f9 ffc8 	bl	8000678 <__aeabi_dmul>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4640      	mov	r0, r8
 80066ee:	4649      	mov	r1, r9
 80066f0:	f7f9 fe0c 	bl	800030c <__adddf3>
 80066f4:	4632      	mov	r2, r6
 80066f6:	463b      	mov	r3, r7
 80066f8:	4680      	mov	r8, r0
 80066fa:	4689      	mov	r9, r1
 80066fc:	4620      	mov	r0, r4
 80066fe:	4629      	mov	r1, r5
 8006700:	f7f9 ffba 	bl	8000678 <__aeabi_dmul>
 8006704:	460b      	mov	r3, r1
 8006706:	4604      	mov	r4, r0
 8006708:	460d      	mov	r5, r1
 800670a:	4602      	mov	r2, r0
 800670c:	4649      	mov	r1, r9
 800670e:	4640      	mov	r0, r8
 8006710:	f7f9 fdfc 	bl	800030c <__adddf3>
 8006714:	4b19      	ldr	r3, [pc, #100]	; (800677c <__ieee754_pow+0x3fc>)
 8006716:	4299      	cmp	r1, r3
 8006718:	ec45 4b19 	vmov	d9, r4, r5
 800671c:	4606      	mov	r6, r0
 800671e:	460f      	mov	r7, r1
 8006720:	468b      	mov	fp, r1
 8006722:	f340 82f0 	ble.w	8006d06 <__ieee754_pow+0x986>
 8006726:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800672a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800672e:	4303      	orrs	r3, r0
 8006730:	f000 81e4 	beq.w	8006afc <__ieee754_pow+0x77c>
 8006734:	ec51 0b18 	vmov	r0, r1, d8
 8006738:	2200      	movs	r2, #0
 800673a:	2300      	movs	r3, #0
 800673c:	f7fa fa0e 	bl	8000b5c <__aeabi_dcmplt>
 8006740:	3800      	subs	r0, #0
 8006742:	bf18      	it	ne
 8006744:	2001      	movne	r0, #1
 8006746:	e72b      	b.n	80065a0 <__ieee754_pow+0x220>
 8006748:	60000000 	.word	0x60000000
 800674c:	3ff71547 	.word	0x3ff71547
 8006750:	f85ddf44 	.word	0xf85ddf44
 8006754:	3e54ae0b 	.word	0x3e54ae0b
 8006758:	55555555 	.word	0x55555555
 800675c:	3fd55555 	.word	0x3fd55555
 8006760:	652b82fe 	.word	0x652b82fe
 8006764:	3ff71547 	.word	0x3ff71547
 8006768:	00000000 	.word	0x00000000
 800676c:	bff00000 	.word	0xbff00000
 8006770:	3ff00000 	.word	0x3ff00000
 8006774:	3fd00000 	.word	0x3fd00000
 8006778:	3fe00000 	.word	0x3fe00000
 800677c:	408fffff 	.word	0x408fffff
 8006780:	4bd5      	ldr	r3, [pc, #852]	; (8006ad8 <__ieee754_pow+0x758>)
 8006782:	402b      	ands	r3, r5
 8006784:	2200      	movs	r2, #0
 8006786:	b92b      	cbnz	r3, 8006794 <__ieee754_pow+0x414>
 8006788:	4bd4      	ldr	r3, [pc, #848]	; (8006adc <__ieee754_pow+0x75c>)
 800678a:	f7f9 ff75 	bl	8000678 <__aeabi_dmul>
 800678e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006792:	460c      	mov	r4, r1
 8006794:	1523      	asrs	r3, r4, #20
 8006796:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800679a:	4413      	add	r3, r2
 800679c:	9305      	str	r3, [sp, #20]
 800679e:	4bd0      	ldr	r3, [pc, #832]	; (8006ae0 <__ieee754_pow+0x760>)
 80067a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80067a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80067a8:	429c      	cmp	r4, r3
 80067aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80067ae:	dd08      	ble.n	80067c2 <__ieee754_pow+0x442>
 80067b0:	4bcc      	ldr	r3, [pc, #816]	; (8006ae4 <__ieee754_pow+0x764>)
 80067b2:	429c      	cmp	r4, r3
 80067b4:	f340 8162 	ble.w	8006a7c <__ieee754_pow+0x6fc>
 80067b8:	9b05      	ldr	r3, [sp, #20]
 80067ba:	3301      	adds	r3, #1
 80067bc:	9305      	str	r3, [sp, #20]
 80067be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80067c2:	2400      	movs	r4, #0
 80067c4:	00e3      	lsls	r3, r4, #3
 80067c6:	9307      	str	r3, [sp, #28]
 80067c8:	4bc7      	ldr	r3, [pc, #796]	; (8006ae8 <__ieee754_pow+0x768>)
 80067ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067ce:	ed93 7b00 	vldr	d7, [r3]
 80067d2:	4629      	mov	r1, r5
 80067d4:	ec53 2b17 	vmov	r2, r3, d7
 80067d8:	eeb0 9a47 	vmov.f32	s18, s14
 80067dc:	eef0 9a67 	vmov.f32	s19, s15
 80067e0:	4682      	mov	sl, r0
 80067e2:	f7f9 fd91 	bl	8000308 <__aeabi_dsub>
 80067e6:	4652      	mov	r2, sl
 80067e8:	4606      	mov	r6, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	462b      	mov	r3, r5
 80067ee:	ec51 0b19 	vmov	r0, r1, d9
 80067f2:	f7f9 fd8b 	bl	800030c <__adddf3>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	2000      	movs	r0, #0
 80067fc:	49bb      	ldr	r1, [pc, #748]	; (8006aec <__ieee754_pow+0x76c>)
 80067fe:	f7fa f865 	bl	80008cc <__aeabi_ddiv>
 8006802:	ec41 0b1a 	vmov	d10, r0, r1
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4630      	mov	r0, r6
 800680c:	4639      	mov	r1, r7
 800680e:	f7f9 ff33 	bl	8000678 <__aeabi_dmul>
 8006812:	2300      	movs	r3, #0
 8006814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006818:	9302      	str	r3, [sp, #8]
 800681a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800681e:	46ab      	mov	fp, r5
 8006820:	106d      	asrs	r5, r5, #1
 8006822:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006826:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800682a:	ec41 0b18 	vmov	d8, r0, r1
 800682e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006832:	2200      	movs	r2, #0
 8006834:	4640      	mov	r0, r8
 8006836:	4649      	mov	r1, r9
 8006838:	4614      	mov	r4, r2
 800683a:	461d      	mov	r5, r3
 800683c:	f7f9 ff1c 	bl	8000678 <__aeabi_dmul>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4630      	mov	r0, r6
 8006846:	4639      	mov	r1, r7
 8006848:	f7f9 fd5e 	bl	8000308 <__aeabi_dsub>
 800684c:	ec53 2b19 	vmov	r2, r3, d9
 8006850:	4606      	mov	r6, r0
 8006852:	460f      	mov	r7, r1
 8006854:	4620      	mov	r0, r4
 8006856:	4629      	mov	r1, r5
 8006858:	f7f9 fd56 	bl	8000308 <__aeabi_dsub>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4650      	mov	r0, sl
 8006862:	4659      	mov	r1, fp
 8006864:	f7f9 fd50 	bl	8000308 <__aeabi_dsub>
 8006868:	4642      	mov	r2, r8
 800686a:	464b      	mov	r3, r9
 800686c:	f7f9 ff04 	bl	8000678 <__aeabi_dmul>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4630      	mov	r0, r6
 8006876:	4639      	mov	r1, r7
 8006878:	f7f9 fd46 	bl	8000308 <__aeabi_dsub>
 800687c:	ec53 2b1a 	vmov	r2, r3, d10
 8006880:	f7f9 fefa 	bl	8000678 <__aeabi_dmul>
 8006884:	ec53 2b18 	vmov	r2, r3, d8
 8006888:	ec41 0b19 	vmov	d9, r0, r1
 800688c:	ec51 0b18 	vmov	r0, r1, d8
 8006890:	f7f9 fef2 	bl	8000678 <__aeabi_dmul>
 8006894:	a37c      	add	r3, pc, #496	; (adr r3, 8006a88 <__ieee754_pow+0x708>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	4604      	mov	r4, r0
 800689c:	460d      	mov	r5, r1
 800689e:	f7f9 feeb 	bl	8000678 <__aeabi_dmul>
 80068a2:	a37b      	add	r3, pc, #492	; (adr r3, 8006a90 <__ieee754_pow+0x710>)
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f7f9 fd30 	bl	800030c <__adddf3>
 80068ac:	4622      	mov	r2, r4
 80068ae:	462b      	mov	r3, r5
 80068b0:	f7f9 fee2 	bl	8000678 <__aeabi_dmul>
 80068b4:	a378      	add	r3, pc, #480	; (adr r3, 8006a98 <__ieee754_pow+0x718>)
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f7f9 fd27 	bl	800030c <__adddf3>
 80068be:	4622      	mov	r2, r4
 80068c0:	462b      	mov	r3, r5
 80068c2:	f7f9 fed9 	bl	8000678 <__aeabi_dmul>
 80068c6:	a376      	add	r3, pc, #472	; (adr r3, 8006aa0 <__ieee754_pow+0x720>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f7f9 fd1e 	bl	800030c <__adddf3>
 80068d0:	4622      	mov	r2, r4
 80068d2:	462b      	mov	r3, r5
 80068d4:	f7f9 fed0 	bl	8000678 <__aeabi_dmul>
 80068d8:	a373      	add	r3, pc, #460	; (adr r3, 8006aa8 <__ieee754_pow+0x728>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f7f9 fd15 	bl	800030c <__adddf3>
 80068e2:	4622      	mov	r2, r4
 80068e4:	462b      	mov	r3, r5
 80068e6:	f7f9 fec7 	bl	8000678 <__aeabi_dmul>
 80068ea:	a371      	add	r3, pc, #452	; (adr r3, 8006ab0 <__ieee754_pow+0x730>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7f9 fd0c 	bl	800030c <__adddf3>
 80068f4:	4622      	mov	r2, r4
 80068f6:	4606      	mov	r6, r0
 80068f8:	460f      	mov	r7, r1
 80068fa:	462b      	mov	r3, r5
 80068fc:	4620      	mov	r0, r4
 80068fe:	4629      	mov	r1, r5
 8006900:	f7f9 feba 	bl	8000678 <__aeabi_dmul>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4630      	mov	r0, r6
 800690a:	4639      	mov	r1, r7
 800690c:	f7f9 feb4 	bl	8000678 <__aeabi_dmul>
 8006910:	4642      	mov	r2, r8
 8006912:	4604      	mov	r4, r0
 8006914:	460d      	mov	r5, r1
 8006916:	464b      	mov	r3, r9
 8006918:	ec51 0b18 	vmov	r0, r1, d8
 800691c:	f7f9 fcf6 	bl	800030c <__adddf3>
 8006920:	ec53 2b19 	vmov	r2, r3, d9
 8006924:	f7f9 fea8 	bl	8000678 <__aeabi_dmul>
 8006928:	4622      	mov	r2, r4
 800692a:	462b      	mov	r3, r5
 800692c:	f7f9 fcee 	bl	800030c <__adddf3>
 8006930:	4642      	mov	r2, r8
 8006932:	4682      	mov	sl, r0
 8006934:	468b      	mov	fp, r1
 8006936:	464b      	mov	r3, r9
 8006938:	4640      	mov	r0, r8
 800693a:	4649      	mov	r1, r9
 800693c:	f7f9 fe9c 	bl	8000678 <__aeabi_dmul>
 8006940:	4b6b      	ldr	r3, [pc, #428]	; (8006af0 <__ieee754_pow+0x770>)
 8006942:	2200      	movs	r2, #0
 8006944:	4606      	mov	r6, r0
 8006946:	460f      	mov	r7, r1
 8006948:	f7f9 fce0 	bl	800030c <__adddf3>
 800694c:	4652      	mov	r2, sl
 800694e:	465b      	mov	r3, fp
 8006950:	f7f9 fcdc 	bl	800030c <__adddf3>
 8006954:	2000      	movs	r0, #0
 8006956:	4604      	mov	r4, r0
 8006958:	460d      	mov	r5, r1
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7f9 fe89 	bl	8000678 <__aeabi_dmul>
 8006966:	4b62      	ldr	r3, [pc, #392]	; (8006af0 <__ieee754_pow+0x770>)
 8006968:	4680      	mov	r8, r0
 800696a:	4689      	mov	r9, r1
 800696c:	2200      	movs	r2, #0
 800696e:	4620      	mov	r0, r4
 8006970:	4629      	mov	r1, r5
 8006972:	f7f9 fcc9 	bl	8000308 <__aeabi_dsub>
 8006976:	4632      	mov	r2, r6
 8006978:	463b      	mov	r3, r7
 800697a:	f7f9 fcc5 	bl	8000308 <__aeabi_dsub>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4650      	mov	r0, sl
 8006984:	4659      	mov	r1, fp
 8006986:	f7f9 fcbf 	bl	8000308 <__aeabi_dsub>
 800698a:	ec53 2b18 	vmov	r2, r3, d8
 800698e:	f7f9 fe73 	bl	8000678 <__aeabi_dmul>
 8006992:	4622      	mov	r2, r4
 8006994:	4606      	mov	r6, r0
 8006996:	460f      	mov	r7, r1
 8006998:	462b      	mov	r3, r5
 800699a:	ec51 0b19 	vmov	r0, r1, d9
 800699e:	f7f9 fe6b 	bl	8000678 <__aeabi_dmul>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4630      	mov	r0, r6
 80069a8:	4639      	mov	r1, r7
 80069aa:	f7f9 fcaf 	bl	800030c <__adddf3>
 80069ae:	4606      	mov	r6, r0
 80069b0:	460f      	mov	r7, r1
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4640      	mov	r0, r8
 80069b8:	4649      	mov	r1, r9
 80069ba:	f7f9 fca7 	bl	800030c <__adddf3>
 80069be:	a33e      	add	r3, pc, #248	; (adr r3, 8006ab8 <__ieee754_pow+0x738>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	2000      	movs	r0, #0
 80069c6:	4604      	mov	r4, r0
 80069c8:	460d      	mov	r5, r1
 80069ca:	f7f9 fe55 	bl	8000678 <__aeabi_dmul>
 80069ce:	4642      	mov	r2, r8
 80069d0:	ec41 0b18 	vmov	d8, r0, r1
 80069d4:	464b      	mov	r3, r9
 80069d6:	4620      	mov	r0, r4
 80069d8:	4629      	mov	r1, r5
 80069da:	f7f9 fc95 	bl	8000308 <__aeabi_dsub>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4630      	mov	r0, r6
 80069e4:	4639      	mov	r1, r7
 80069e6:	f7f9 fc8f 	bl	8000308 <__aeabi_dsub>
 80069ea:	a335      	add	r3, pc, #212	; (adr r3, 8006ac0 <__ieee754_pow+0x740>)
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f7f9 fe42 	bl	8000678 <__aeabi_dmul>
 80069f4:	a334      	add	r3, pc, #208	; (adr r3, 8006ac8 <__ieee754_pow+0x748>)
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	4606      	mov	r6, r0
 80069fc:	460f      	mov	r7, r1
 80069fe:	4620      	mov	r0, r4
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7f9 fe39 	bl	8000678 <__aeabi_dmul>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	f7f9 fc7d 	bl	800030c <__adddf3>
 8006a12:	9a07      	ldr	r2, [sp, #28]
 8006a14:	4b37      	ldr	r3, [pc, #220]	; (8006af4 <__ieee754_pow+0x774>)
 8006a16:	4413      	add	r3, r2
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f7f9 fc76 	bl	800030c <__adddf3>
 8006a20:	4682      	mov	sl, r0
 8006a22:	9805      	ldr	r0, [sp, #20]
 8006a24:	468b      	mov	fp, r1
 8006a26:	f7f9 fdbd 	bl	80005a4 <__aeabi_i2d>
 8006a2a:	9a07      	ldr	r2, [sp, #28]
 8006a2c:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <__ieee754_pow+0x778>)
 8006a2e:	4413      	add	r3, r2
 8006a30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a34:	4606      	mov	r6, r0
 8006a36:	460f      	mov	r7, r1
 8006a38:	4652      	mov	r2, sl
 8006a3a:	465b      	mov	r3, fp
 8006a3c:	ec51 0b18 	vmov	r0, r1, d8
 8006a40:	f7f9 fc64 	bl	800030c <__adddf3>
 8006a44:	4642      	mov	r2, r8
 8006a46:	464b      	mov	r3, r9
 8006a48:	f7f9 fc60 	bl	800030c <__adddf3>
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	463b      	mov	r3, r7
 8006a50:	f7f9 fc5c 	bl	800030c <__adddf3>
 8006a54:	2000      	movs	r0, #0
 8006a56:	4632      	mov	r2, r6
 8006a58:	463b      	mov	r3, r7
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	460d      	mov	r5, r1
 8006a5e:	f7f9 fc53 	bl	8000308 <__aeabi_dsub>
 8006a62:	4642      	mov	r2, r8
 8006a64:	464b      	mov	r3, r9
 8006a66:	f7f9 fc4f 	bl	8000308 <__aeabi_dsub>
 8006a6a:	ec53 2b18 	vmov	r2, r3, d8
 8006a6e:	f7f9 fc4b 	bl	8000308 <__aeabi_dsub>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4650      	mov	r0, sl
 8006a78:	4659      	mov	r1, fp
 8006a7a:	e610      	b.n	800669e <__ieee754_pow+0x31e>
 8006a7c:	2401      	movs	r4, #1
 8006a7e:	e6a1      	b.n	80067c4 <__ieee754_pow+0x444>
 8006a80:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006ad0 <__ieee754_pow+0x750>
 8006a84:	e617      	b.n	80066b6 <__ieee754_pow+0x336>
 8006a86:	bf00      	nop
 8006a88:	4a454eef 	.word	0x4a454eef
 8006a8c:	3fca7e28 	.word	0x3fca7e28
 8006a90:	93c9db65 	.word	0x93c9db65
 8006a94:	3fcd864a 	.word	0x3fcd864a
 8006a98:	a91d4101 	.word	0xa91d4101
 8006a9c:	3fd17460 	.word	0x3fd17460
 8006aa0:	518f264d 	.word	0x518f264d
 8006aa4:	3fd55555 	.word	0x3fd55555
 8006aa8:	db6fabff 	.word	0xdb6fabff
 8006aac:	3fdb6db6 	.word	0x3fdb6db6
 8006ab0:	33333303 	.word	0x33333303
 8006ab4:	3fe33333 	.word	0x3fe33333
 8006ab8:	e0000000 	.word	0xe0000000
 8006abc:	3feec709 	.word	0x3feec709
 8006ac0:	dc3a03fd 	.word	0xdc3a03fd
 8006ac4:	3feec709 	.word	0x3feec709
 8006ac8:	145b01f5 	.word	0x145b01f5
 8006acc:	be3e2fe0 	.word	0xbe3e2fe0
 8006ad0:	00000000 	.word	0x00000000
 8006ad4:	3ff00000 	.word	0x3ff00000
 8006ad8:	7ff00000 	.word	0x7ff00000
 8006adc:	43400000 	.word	0x43400000
 8006ae0:	0003988e 	.word	0x0003988e
 8006ae4:	000bb679 	.word	0x000bb679
 8006ae8:	080074b0 	.word	0x080074b0
 8006aec:	3ff00000 	.word	0x3ff00000
 8006af0:	40080000 	.word	0x40080000
 8006af4:	080074d0 	.word	0x080074d0
 8006af8:	080074c0 	.word	0x080074c0
 8006afc:	a3b3      	add	r3, pc, #716	; (adr r3, 8006dcc <__ieee754_pow+0xa4c>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	f7f9 fc01 	bl	800030c <__adddf3>
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	ec41 0b1a 	vmov	d10, r0, r1
 8006b10:	462b      	mov	r3, r5
 8006b12:	4630      	mov	r0, r6
 8006b14:	4639      	mov	r1, r7
 8006b16:	f7f9 fbf7 	bl	8000308 <__aeabi_dsub>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	ec51 0b1a 	vmov	r0, r1, d10
 8006b22:	f7fa f839 	bl	8000b98 <__aeabi_dcmpgt>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f47f ae04 	bne.w	8006734 <__ieee754_pow+0x3b4>
 8006b2c:	4aa2      	ldr	r2, [pc, #648]	; (8006db8 <__ieee754_pow+0xa38>)
 8006b2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b32:	4293      	cmp	r3, r2
 8006b34:	f340 8107 	ble.w	8006d46 <__ieee754_pow+0x9c6>
 8006b38:	151b      	asrs	r3, r3, #20
 8006b3a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006b3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006b42:	fa4a fa03 	asr.w	sl, sl, r3
 8006b46:	44da      	add	sl, fp
 8006b48:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006b4c:	489b      	ldr	r0, [pc, #620]	; (8006dbc <__ieee754_pow+0xa3c>)
 8006b4e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006b52:	4108      	asrs	r0, r1
 8006b54:	ea00 030a 	and.w	r3, r0, sl
 8006b58:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006b5c:	f1c1 0114 	rsb	r1, r1, #20
 8006b60:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006b64:	fa4a fa01 	asr.w	sl, sl, r1
 8006b68:	f1bb 0f00 	cmp.w	fp, #0
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	4620      	mov	r0, r4
 8006b72:	4629      	mov	r1, r5
 8006b74:	bfb8      	it	lt
 8006b76:	f1ca 0a00 	rsblt	sl, sl, #0
 8006b7a:	f7f9 fbc5 	bl	8000308 <__aeabi_dsub>
 8006b7e:	ec41 0b19 	vmov	d9, r0, r1
 8006b82:	4642      	mov	r2, r8
 8006b84:	464b      	mov	r3, r9
 8006b86:	ec51 0b19 	vmov	r0, r1, d9
 8006b8a:	f7f9 fbbf 	bl	800030c <__adddf3>
 8006b8e:	a37a      	add	r3, pc, #488	; (adr r3, 8006d78 <__ieee754_pow+0x9f8>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	2000      	movs	r0, #0
 8006b96:	4604      	mov	r4, r0
 8006b98:	460d      	mov	r5, r1
 8006b9a:	f7f9 fd6d 	bl	8000678 <__aeabi_dmul>
 8006b9e:	ec53 2b19 	vmov	r2, r3, d9
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460f      	mov	r7, r1
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7f9 fbad 	bl	8000308 <__aeabi_dsub>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	f7f9 fba7 	bl	8000308 <__aeabi_dsub>
 8006bba:	a371      	add	r3, pc, #452	; (adr r3, 8006d80 <__ieee754_pow+0xa00>)
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f7f9 fd5a 	bl	8000678 <__aeabi_dmul>
 8006bc4:	a370      	add	r3, pc, #448	; (adr r3, 8006d88 <__ieee754_pow+0xa08>)
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	4680      	mov	r8, r0
 8006bcc:	4689      	mov	r9, r1
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7f9 fd51 	bl	8000678 <__aeabi_dmul>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4640      	mov	r0, r8
 8006bdc:	4649      	mov	r1, r9
 8006bde:	f7f9 fb95 	bl	800030c <__adddf3>
 8006be2:	4604      	mov	r4, r0
 8006be4:	460d      	mov	r5, r1
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4630      	mov	r0, r6
 8006bec:	4639      	mov	r1, r7
 8006bee:	f7f9 fb8d 	bl	800030c <__adddf3>
 8006bf2:	4632      	mov	r2, r6
 8006bf4:	463b      	mov	r3, r7
 8006bf6:	4680      	mov	r8, r0
 8006bf8:	4689      	mov	r9, r1
 8006bfa:	f7f9 fb85 	bl	8000308 <__aeabi_dsub>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4620      	mov	r0, r4
 8006c04:	4629      	mov	r1, r5
 8006c06:	f7f9 fb7f 	bl	8000308 <__aeabi_dsub>
 8006c0a:	4642      	mov	r2, r8
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	460f      	mov	r7, r1
 8006c10:	464b      	mov	r3, r9
 8006c12:	4640      	mov	r0, r8
 8006c14:	4649      	mov	r1, r9
 8006c16:	f7f9 fd2f 	bl	8000678 <__aeabi_dmul>
 8006c1a:	a35d      	add	r3, pc, #372	; (adr r3, 8006d90 <__ieee754_pow+0xa10>)
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	4604      	mov	r4, r0
 8006c22:	460d      	mov	r5, r1
 8006c24:	f7f9 fd28 	bl	8000678 <__aeabi_dmul>
 8006c28:	a35b      	add	r3, pc, #364	; (adr r3, 8006d98 <__ieee754_pow+0xa18>)
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f7f9 fb6b 	bl	8000308 <__aeabi_dsub>
 8006c32:	4622      	mov	r2, r4
 8006c34:	462b      	mov	r3, r5
 8006c36:	f7f9 fd1f 	bl	8000678 <__aeabi_dmul>
 8006c3a:	a359      	add	r3, pc, #356	; (adr r3, 8006da0 <__ieee754_pow+0xa20>)
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f7f9 fb64 	bl	800030c <__adddf3>
 8006c44:	4622      	mov	r2, r4
 8006c46:	462b      	mov	r3, r5
 8006c48:	f7f9 fd16 	bl	8000678 <__aeabi_dmul>
 8006c4c:	a356      	add	r3, pc, #344	; (adr r3, 8006da8 <__ieee754_pow+0xa28>)
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f7f9 fb59 	bl	8000308 <__aeabi_dsub>
 8006c56:	4622      	mov	r2, r4
 8006c58:	462b      	mov	r3, r5
 8006c5a:	f7f9 fd0d 	bl	8000678 <__aeabi_dmul>
 8006c5e:	a354      	add	r3, pc, #336	; (adr r3, 8006db0 <__ieee754_pow+0xa30>)
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	f7f9 fb52 	bl	800030c <__adddf3>
 8006c68:	4622      	mov	r2, r4
 8006c6a:	462b      	mov	r3, r5
 8006c6c:	f7f9 fd04 	bl	8000678 <__aeabi_dmul>
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	4640      	mov	r0, r8
 8006c76:	4649      	mov	r1, r9
 8006c78:	f7f9 fb46 	bl	8000308 <__aeabi_dsub>
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	460d      	mov	r5, r1
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4640      	mov	r0, r8
 8006c86:	4649      	mov	r1, r9
 8006c88:	f7f9 fcf6 	bl	8000678 <__aeabi_dmul>
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	ec41 0b19 	vmov	d9, r0, r1
 8006c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7f9 fb35 	bl	8000308 <__aeabi_dsub>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	ec51 0b19 	vmov	r0, r1, d9
 8006ca6:	f7f9 fe11 	bl	80008cc <__aeabi_ddiv>
 8006caa:	4632      	mov	r2, r6
 8006cac:	4604      	mov	r4, r0
 8006cae:	460d      	mov	r5, r1
 8006cb0:	463b      	mov	r3, r7
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	f7f9 fcdf 	bl	8000678 <__aeabi_dmul>
 8006cba:	4632      	mov	r2, r6
 8006cbc:	463b      	mov	r3, r7
 8006cbe:	f7f9 fb25 	bl	800030c <__adddf3>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7f9 fb1d 	bl	8000308 <__aeabi_dsub>
 8006cce:	4642      	mov	r2, r8
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	f7f9 fb19 	bl	8000308 <__aeabi_dsub>
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4602      	mov	r2, r0
 8006cda:	4939      	ldr	r1, [pc, #228]	; (8006dc0 <__ieee754_pow+0xa40>)
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f7f9 fb13 	bl	8000308 <__aeabi_dsub>
 8006ce2:	ec41 0b10 	vmov	d0, r0, r1
 8006ce6:	ee10 3a90 	vmov	r3, s1
 8006cea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf2:	da2b      	bge.n	8006d4c <__ieee754_pow+0x9cc>
 8006cf4:	4650      	mov	r0, sl
 8006cf6:	f000 f877 	bl	8006de8 <scalbn>
 8006cfa:	ec51 0b10 	vmov	r0, r1, d0
 8006cfe:	ec53 2b18 	vmov	r2, r3, d8
 8006d02:	f7ff bbee 	b.w	80064e2 <__ieee754_pow+0x162>
 8006d06:	4b2f      	ldr	r3, [pc, #188]	; (8006dc4 <__ieee754_pow+0xa44>)
 8006d08:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006d0c:	429e      	cmp	r6, r3
 8006d0e:	f77f af0d 	ble.w	8006b2c <__ieee754_pow+0x7ac>
 8006d12:	4b2d      	ldr	r3, [pc, #180]	; (8006dc8 <__ieee754_pow+0xa48>)
 8006d14:	440b      	add	r3, r1
 8006d16:	4303      	orrs	r3, r0
 8006d18:	d009      	beq.n	8006d2e <__ieee754_pow+0x9ae>
 8006d1a:	ec51 0b18 	vmov	r0, r1, d8
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2300      	movs	r3, #0
 8006d22:	f7f9 ff1b 	bl	8000b5c <__aeabi_dcmplt>
 8006d26:	3800      	subs	r0, #0
 8006d28:	bf18      	it	ne
 8006d2a:	2001      	movne	r0, #1
 8006d2c:	e448      	b.n	80065c0 <__ieee754_pow+0x240>
 8006d2e:	4622      	mov	r2, r4
 8006d30:	462b      	mov	r3, r5
 8006d32:	f7f9 fae9 	bl	8000308 <__aeabi_dsub>
 8006d36:	4642      	mov	r2, r8
 8006d38:	464b      	mov	r3, r9
 8006d3a:	f7f9 ff23 	bl	8000b84 <__aeabi_dcmpge>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f43f aef4 	beq.w	8006b2c <__ieee754_pow+0x7ac>
 8006d44:	e7e9      	b.n	8006d1a <__ieee754_pow+0x99a>
 8006d46:	f04f 0a00 	mov.w	sl, #0
 8006d4a:	e71a      	b.n	8006b82 <__ieee754_pow+0x802>
 8006d4c:	ec51 0b10 	vmov	r0, r1, d0
 8006d50:	4619      	mov	r1, r3
 8006d52:	e7d4      	b.n	8006cfe <__ieee754_pow+0x97e>
 8006d54:	491a      	ldr	r1, [pc, #104]	; (8006dc0 <__ieee754_pow+0xa40>)
 8006d56:	2000      	movs	r0, #0
 8006d58:	f7ff bb31 	b.w	80063be <__ieee754_pow+0x3e>
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	2100      	movs	r1, #0
 8006d60:	f7ff bb2d 	b.w	80063be <__ieee754_pow+0x3e>
 8006d64:	4630      	mov	r0, r6
 8006d66:	4639      	mov	r1, r7
 8006d68:	f7ff bb29 	b.w	80063be <__ieee754_pow+0x3e>
 8006d6c:	9204      	str	r2, [sp, #16]
 8006d6e:	f7ff bb7b 	b.w	8006468 <__ieee754_pow+0xe8>
 8006d72:	2300      	movs	r3, #0
 8006d74:	f7ff bb65 	b.w	8006442 <__ieee754_pow+0xc2>
 8006d78:	00000000 	.word	0x00000000
 8006d7c:	3fe62e43 	.word	0x3fe62e43
 8006d80:	fefa39ef 	.word	0xfefa39ef
 8006d84:	3fe62e42 	.word	0x3fe62e42
 8006d88:	0ca86c39 	.word	0x0ca86c39
 8006d8c:	be205c61 	.word	0xbe205c61
 8006d90:	72bea4d0 	.word	0x72bea4d0
 8006d94:	3e663769 	.word	0x3e663769
 8006d98:	c5d26bf1 	.word	0xc5d26bf1
 8006d9c:	3ebbbd41 	.word	0x3ebbbd41
 8006da0:	af25de2c 	.word	0xaf25de2c
 8006da4:	3f11566a 	.word	0x3f11566a
 8006da8:	16bebd93 	.word	0x16bebd93
 8006dac:	3f66c16c 	.word	0x3f66c16c
 8006db0:	5555553e 	.word	0x5555553e
 8006db4:	3fc55555 	.word	0x3fc55555
 8006db8:	3fe00000 	.word	0x3fe00000
 8006dbc:	fff00000 	.word	0xfff00000
 8006dc0:	3ff00000 	.word	0x3ff00000
 8006dc4:	4090cbff 	.word	0x4090cbff
 8006dc8:	3f6f3400 	.word	0x3f6f3400
 8006dcc:	652b82fe 	.word	0x652b82fe
 8006dd0:	3c971547 	.word	0x3c971547

08006dd4 <fabs>:
 8006dd4:	ec51 0b10 	vmov	r0, r1, d0
 8006dd8:	ee10 2a10 	vmov	r2, s0
 8006ddc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006de0:	ec43 2b10 	vmov	d0, r2, r3
 8006de4:	4770      	bx	lr
	...

08006de8 <scalbn>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	ec55 4b10 	vmov	r4, r5, d0
 8006dee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006df2:	4606      	mov	r6, r0
 8006df4:	462b      	mov	r3, r5
 8006df6:	b999      	cbnz	r1, 8006e20 <scalbn+0x38>
 8006df8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006dfc:	4323      	orrs	r3, r4
 8006dfe:	d03f      	beq.n	8006e80 <scalbn+0x98>
 8006e00:	4b35      	ldr	r3, [pc, #212]	; (8006ed8 <scalbn+0xf0>)
 8006e02:	4629      	mov	r1, r5
 8006e04:	ee10 0a10 	vmov	r0, s0
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f7f9 fc35 	bl	8000678 <__aeabi_dmul>
 8006e0e:	4b33      	ldr	r3, [pc, #204]	; (8006edc <scalbn+0xf4>)
 8006e10:	429e      	cmp	r6, r3
 8006e12:	4604      	mov	r4, r0
 8006e14:	460d      	mov	r5, r1
 8006e16:	da10      	bge.n	8006e3a <scalbn+0x52>
 8006e18:	a327      	add	r3, pc, #156	; (adr r3, 8006eb8 <scalbn+0xd0>)
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	e01f      	b.n	8006e60 <scalbn+0x78>
 8006e20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006e24:	4291      	cmp	r1, r2
 8006e26:	d10c      	bne.n	8006e42 <scalbn+0x5a>
 8006e28:	ee10 2a10 	vmov	r2, s0
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	4629      	mov	r1, r5
 8006e30:	f7f9 fa6c 	bl	800030c <__adddf3>
 8006e34:	4604      	mov	r4, r0
 8006e36:	460d      	mov	r5, r1
 8006e38:	e022      	b.n	8006e80 <scalbn+0x98>
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006e40:	3936      	subs	r1, #54	; 0x36
 8006e42:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006e46:	4296      	cmp	r6, r2
 8006e48:	dd0d      	ble.n	8006e66 <scalbn+0x7e>
 8006e4a:	2d00      	cmp	r5, #0
 8006e4c:	a11c      	add	r1, pc, #112	; (adr r1, 8006ec0 <scalbn+0xd8>)
 8006e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e52:	da02      	bge.n	8006e5a <scalbn+0x72>
 8006e54:	a11c      	add	r1, pc, #112	; (adr r1, 8006ec8 <scalbn+0xe0>)
 8006e56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e5a:	a319      	add	r3, pc, #100	; (adr r3, 8006ec0 <scalbn+0xd8>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f7f9 fc0a 	bl	8000678 <__aeabi_dmul>
 8006e64:	e7e6      	b.n	8006e34 <scalbn+0x4c>
 8006e66:	1872      	adds	r2, r6, r1
 8006e68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006e6c:	428a      	cmp	r2, r1
 8006e6e:	dcec      	bgt.n	8006e4a <scalbn+0x62>
 8006e70:	2a00      	cmp	r2, #0
 8006e72:	dd08      	ble.n	8006e86 <scalbn+0x9e>
 8006e74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e80:	ec45 4b10 	vmov	d0, r4, r5
 8006e84:	bd70      	pop	{r4, r5, r6, pc}
 8006e86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006e8a:	da08      	bge.n	8006e9e <scalbn+0xb6>
 8006e8c:	2d00      	cmp	r5, #0
 8006e8e:	a10a      	add	r1, pc, #40	; (adr r1, 8006eb8 <scalbn+0xd0>)
 8006e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e94:	dac0      	bge.n	8006e18 <scalbn+0x30>
 8006e96:	a10e      	add	r1, pc, #56	; (adr r1, 8006ed0 <scalbn+0xe8>)
 8006e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e9c:	e7bc      	b.n	8006e18 <scalbn+0x30>
 8006e9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ea2:	3236      	adds	r2, #54	; 0x36
 8006ea4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ea8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006eac:	4620      	mov	r0, r4
 8006eae:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <scalbn+0xf8>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	e7d5      	b.n	8006e60 <scalbn+0x78>
 8006eb4:	f3af 8000 	nop.w
 8006eb8:	c2f8f359 	.word	0xc2f8f359
 8006ebc:	01a56e1f 	.word	0x01a56e1f
 8006ec0:	8800759c 	.word	0x8800759c
 8006ec4:	7e37e43c 	.word	0x7e37e43c
 8006ec8:	8800759c 	.word	0x8800759c
 8006ecc:	fe37e43c 	.word	0xfe37e43c
 8006ed0:	c2f8f359 	.word	0xc2f8f359
 8006ed4:	81a56e1f 	.word	0x81a56e1f
 8006ed8:	43500000 	.word	0x43500000
 8006edc:	ffff3cb0 	.word	0xffff3cb0
 8006ee0:	3c900000 	.word	0x3c900000

08006ee4 <with_errno>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	460d      	mov	r5, r1
 8006eea:	4616      	mov	r6, r2
 8006eec:	f7fd f9a4 	bl	8004238 <__errno>
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	6006      	str	r6, [r0, #0]
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}

08006ef8 <xflow>:
 8006ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006efa:	4614      	mov	r4, r2
 8006efc:	461d      	mov	r5, r3
 8006efe:	b108      	cbz	r0, 8006f04 <xflow+0xc>
 8006f00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f04:	e9cd 2300 	strd	r2, r3, [sp]
 8006f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7f9 fbb2 	bl	8000678 <__aeabi_dmul>
 8006f14:	2222      	movs	r2, #34	; 0x22
 8006f16:	b003      	add	sp, #12
 8006f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f1c:	f7ff bfe2 	b.w	8006ee4 <with_errno>

08006f20 <__math_uflow>:
 8006f20:	b508      	push	{r3, lr}
 8006f22:	2200      	movs	r2, #0
 8006f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f28:	f7ff ffe6 	bl	8006ef8 <xflow>
 8006f2c:	ec41 0b10 	vmov	d0, r0, r1
 8006f30:	bd08      	pop	{r3, pc}

08006f32 <__math_oflow>:
 8006f32:	b508      	push	{r3, lr}
 8006f34:	2200      	movs	r2, #0
 8006f36:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006f3a:	f7ff ffdd 	bl	8006ef8 <xflow>
 8006f3e:	ec41 0b10 	vmov	d0, r0, r1
 8006f42:	bd08      	pop	{r3, pc}

08006f44 <_init>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr

08006f50 <_fini>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	bf00      	nop
 8006f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f56:	bc08      	pop	{r3}
 8006f58:	469e      	mov	lr, r3
 8006f5a:	4770      	bx	lr
